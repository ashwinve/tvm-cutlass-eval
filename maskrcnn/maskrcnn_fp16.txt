type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

def @main(%input0: Tensor[(1, 3, 512, 512), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, 28, 28), float32]) {
  %0 = cast(%input0, dtype="float16") /* ty=Tensor[(1, 3, 512, 512), float16] */;
  %1 = split(%0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 512, 512), float16],) */;
  %2 = %1.0;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(3), float32] */, dtype="float16") /* ty=Tensor[(3), float16] */;
  %4 = expand_dims(%3, axis=1) /* ty=Tensor[(3, 1), float16] */;
  %5 = squeeze(%2, axis=[0]) /* ty=Tensor[(3, 512, 512), float16] */;
  %6 = expand_dims(%4, axis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(3), float32] */, dtype="float16") /* ty=Tensor[(3), float16] */;
  %8 = expand_dims(%7, axis=1) /* ty=Tensor[(3, 1), float16] */;
  %9 = subtract(%5, %6) /* ty=Tensor[(3, 512, 512), float16] */;
  %10 = expand_dims(%8, axis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %11 = divide(%9, %10) /* ty=Tensor[(3, 512, 512), float16] */;
  %12 = expand_dims(%11, axis=0) /* ty=Tensor[(1, 3, 512, 512), float16] */;
  %13 = image.resize2d(%12, size=[800, 800], roi=[0f, 0f, 0f, 0f], rounding_method="", cubic_alpha=-0.75f) /* ty=Tensor[(1, 3, 800, 800), float16] */;
  %14 = take(%13, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 800, 800), float16] */;
  %15 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %16 = nn.pad(%14, %15, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float16] */;
  %17 = (%16,);
  %18 = stack(%17) /* ty=Tensor[(1, 3, 800, 800), float16] */;
  %19 = cast(%model.backbone.body.conv1.weight, dtype="float16") /* ty=Tensor[(64, 3, 7, 7), float16] */;
  %20 = layout_transform(%18, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 800, 800, 3), float16] */;
  %21 = layout_transform(%19, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(7, 7, 3, 64), float16] */;
  %22 = cast(%model.backbone.body.bn1.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %23 = cast(%model.backbone.body.bn1.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %24 = reshape(%23, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %25 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %26 = add(%24, %25) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %27 = reshape(%22, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %28 = rsqrt(%26) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %29 = multiply(%27, %28) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %30 = nn.conv2d(%20, %21, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 400, 400, 64), float16] */;
  %31 = layout_transform(%29, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %32 = cast(%model.backbone.body.bn1.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %33 = cast(%model.backbone.body.bn1.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %34 = reshape(%33, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %35 = reshape(%32, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %36 = multiply(%34, %29) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %37 = subtract(%35, %36) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %38 = multiply(%30, %31) /* ty=Tensor[(1, 400, 400, 64), float16] */;
  %39 = layout_transform(%37, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %40 = add(%38, %39) /* ty=Tensor[(1, 400, 400, 64), float16] */;
  %41 = nn.relu(%40) /* ty=Tensor[(1, 400, 400, 64), float16] */;
  %42 = cast(%model.backbone.body.layer1.0.conv1.weight, dtype="float16") /* ty=Tensor[(64, 64, 1, 1), float16] */;
  %43 = nn.max_pool2d(%41, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %44 = layout_transform(%42, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 64), float16] */;
  %45 = cast(%model.backbone.body.layer1.0.bn1.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %46 = cast(%model.backbone.body.layer1.0.bn1.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %47 = reshape(%46, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %48 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %49 = add(%47, %48) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %50 = reshape(%45, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %51 = rsqrt(%49) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %52 = multiply(%50, %51) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %53 = nn.conv2d(%43, %44, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %54 = layout_transform(%52, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %55 = cast(%model.backbone.body.layer1.0.bn1.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %56 = cast(%model.backbone.body.layer1.0.bn1.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %57 = reshape(%56, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %58 = reshape(%55, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %59 = multiply(%57, %52) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %60 = subtract(%58, %59) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %61 = multiply(%53, %54) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %62 = layout_transform(%60, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %63 = add(%61, %62) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %64 = cast(%model.backbone.body.layer1.0.conv2.weight, dtype="float16") /* ty=Tensor[(64, 64, 3, 3), float16] */;
  %65 = nn.relu(%63) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %66 = layout_transform(%64, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float16] */;
  %67 = cast(%model.backbone.body.layer1.0.bn2.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %68 = cast(%model.backbone.body.layer1.0.bn2.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %69 = reshape(%68, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %70 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %71 = add(%69, %70) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %72 = reshape(%67, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %73 = rsqrt(%71) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %74 = multiply(%72, %73) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %75 = nn.conv2d(%65, %66, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %76 = layout_transform(%74, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %77 = cast(%model.backbone.body.layer1.0.bn2.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %78 = cast(%model.backbone.body.layer1.0.bn2.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %79 = reshape(%78, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %80 = reshape(%77, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %81 = multiply(%79, %74) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %82 = subtract(%80, %81) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %83 = multiply(%75, %76) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %84 = layout_transform(%82, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %85 = add(%83, %84) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %86 = cast(%model.backbone.body.layer1.0.conv3.weight, dtype="float16") /* ty=Tensor[(256, 64, 1, 1), float16] */;
  %87 = nn.relu(%85) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %88 = layout_transform(%86, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float16] */;
  %89 = cast(%model.backbone.body.layer1.0.bn3.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %90 = cast(%model.backbone.body.layer1.0.bn3.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %91 = reshape(%90, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %92 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %93 = add(%91, %92) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %94 = reshape(%89, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %95 = rsqrt(%93) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %96 = multiply(%94, %95) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %97 = nn.conv2d(%87, %88, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %98 = layout_transform(%96, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %99 = cast(%model.backbone.body.layer1.0.bn3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %100 = cast(%model.backbone.body.layer1.0.bn3.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %101 = reshape(%100, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %102 = reshape(%99, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %103 = multiply(%101, %96) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %104 = subtract(%102, %103) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %105 = multiply(%97, %98) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %106 = layout_transform(%104, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %107 = cast(%model.backbone.body.layer1.0.downsample.0.weight, dtype="float16") /* ty=Tensor[(256, 64, 1, 1), float16] */;
  %108 = layout_transform(%107, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float16] */;
  %109 = cast(%model.backbone.body.layer1.0.downsample.1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %110 = cast(%model.backbone.body.layer1.0.downsample.1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %111 = reshape(%110, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %112 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %113 = add(%111, %112) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %114 = reshape(%109, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %115 = rsqrt(%113) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %116 = multiply(%114, %115) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %117 = nn.conv2d(%43, %108, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %118 = layout_transform(%116, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %119 = cast(%model.backbone.body.layer1.0.downsample.1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %120 = cast(%model.backbone.body.layer1.0.downsample.1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %121 = reshape(%120, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %122 = reshape(%119, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %123 = multiply(%121, %116) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %124 = subtract(%122, %123) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %125 = multiply(%117, %118) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %126 = layout_transform(%124, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %127 = add(%105, %106) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %128 = add(%125, %126) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %129 = add(%127, %128) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %130 = cast(%model.backbone.body.layer1.1.conv1.weight, dtype="float16") /* ty=Tensor[(64, 256, 1, 1), float16] */;
  %131 = nn.relu(%129) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %132 = layout_transform(%130, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float16] */;
  %133 = cast(%model.backbone.body.layer1.1.bn1.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %134 = cast(%model.backbone.body.layer1.1.bn1.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %135 = reshape(%134, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %136 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %137 = add(%135, %136) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %138 = reshape(%133, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %139 = rsqrt(%137) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %140 = multiply(%138, %139) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %141 = nn.conv2d(%131, %132, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %142 = layout_transform(%140, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %143 = cast(%model.backbone.body.layer1.1.bn1.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %144 = cast(%model.backbone.body.layer1.1.bn1.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %145 = reshape(%144, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %146 = reshape(%143, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %147 = multiply(%145, %140) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %148 = subtract(%146, %147) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %149 = multiply(%141, %142) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %150 = layout_transform(%148, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %151 = add(%149, %150) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %152 = cast(%model.backbone.body.layer1.1.conv2.weight, dtype="float16") /* ty=Tensor[(64, 64, 3, 3), float16] */;
  %153 = nn.relu(%151) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %154 = layout_transform(%152, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float16] */;
  %155 = cast(%model.backbone.body.layer1.1.bn2.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %156 = cast(%model.backbone.body.layer1.1.bn2.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %157 = reshape(%156, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %158 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %159 = add(%157, %158) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %160 = reshape(%155, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %161 = rsqrt(%159) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %162 = multiply(%160, %161) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %163 = nn.conv2d(%153, %154, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %164 = layout_transform(%162, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %165 = cast(%model.backbone.body.layer1.1.bn2.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %166 = cast(%model.backbone.body.layer1.1.bn2.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %167 = reshape(%166, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %168 = reshape(%165, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %169 = multiply(%167, %162) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %170 = subtract(%168, %169) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %171 = multiply(%163, %164) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %172 = layout_transform(%170, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %173 = add(%171, %172) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %174 = cast(%model.backbone.body.layer1.1.conv3.weight, dtype="float16") /* ty=Tensor[(256, 64, 1, 1), float16] */;
  %175 = nn.relu(%173) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %176 = layout_transform(%174, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float16] */;
  %177 = cast(%model.backbone.body.layer1.1.bn3.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %178 = cast(%model.backbone.body.layer1.1.bn3.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %179 = reshape(%178, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %180 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %181 = add(%179, %180) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %182 = reshape(%177, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %183 = rsqrt(%181) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %184 = multiply(%182, %183) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %185 = nn.conv2d(%175, %176, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %186 = layout_transform(%184, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %187 = cast(%model.backbone.body.layer1.1.bn3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %188 = cast(%model.backbone.body.layer1.1.bn3.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %189 = reshape(%188, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %190 = reshape(%187, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %191 = multiply(%189, %184) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %192 = subtract(%190, %191) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %193 = multiply(%185, %186) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %194 = layout_transform(%192, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %195 = add(%193, %194) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %196 = add(%195, %131) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %197 = cast(%model.backbone.body.layer1.2.conv1.weight, dtype="float16") /* ty=Tensor[(64, 256, 1, 1), float16] */;
  %198 = nn.relu(%196) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %199 = layout_transform(%197, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float16] */;
  %200 = cast(%model.backbone.body.layer1.2.bn1.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %201 = cast(%model.backbone.body.layer1.2.bn1.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %202 = reshape(%201, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %203 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %204 = add(%202, %203) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %205 = reshape(%200, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %206 = rsqrt(%204) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %207 = multiply(%205, %206) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %208 = nn.conv2d(%198, %199, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %209 = layout_transform(%207, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %210 = cast(%model.backbone.body.layer1.2.bn1.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %211 = cast(%model.backbone.body.layer1.2.bn1.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %212 = reshape(%211, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %213 = reshape(%210, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %214 = multiply(%212, %207) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %215 = subtract(%213, %214) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %216 = multiply(%208, %209) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %217 = layout_transform(%215, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %218 = add(%216, %217) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %219 = cast(%model.backbone.body.layer1.2.conv2.weight, dtype="float16") /* ty=Tensor[(64, 64, 3, 3), float16] */;
  %220 = nn.relu(%218) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %221 = layout_transform(%219, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float16] */;
  %222 = cast(%model.backbone.body.layer1.2.bn2.weight, dtype="float16") /* ty=Tensor[(64), float16] */;
  %223 = cast(%model.backbone.body.layer1.2.bn2.running_var, dtype="float16") /* ty=Tensor[(64), float16] */;
  %224 = reshape(%223, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %225 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %226 = add(%224, %225) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %227 = reshape(%222, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %228 = rsqrt(%226) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %229 = multiply(%227, %228) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %230 = nn.conv2d(%220, %221, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %231 = layout_transform(%229, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %232 = cast(%model.backbone.body.layer1.2.bn2.bias, dtype="float16") /* ty=Tensor[(64), float16] */;
  %233 = cast(%model.backbone.body.layer1.2.bn2.running_mean, dtype="float16") /* ty=Tensor[(64), float16] */;
  %234 = reshape(%233, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %235 = reshape(%232, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %236 = multiply(%234, %229) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %237 = subtract(%235, %236) /* ty=Tensor[(1, 64, 1, 1), float16] */;
  %238 = multiply(%230, %231) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %239 = layout_transform(%237, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float16] */;
  %240 = add(%238, %239) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %241 = cast(%model.backbone.body.layer1.2.conv3.weight, dtype="float16") /* ty=Tensor[(256, 64, 1, 1), float16] */;
  %242 = nn.relu(%240) /* ty=Tensor[(1, 200, 200, 64), float16] */;
  %243 = layout_transform(%241, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float16] */;
  %244 = cast(%model.backbone.body.layer1.2.bn3.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %245 = cast(%model.backbone.body.layer1.2.bn3.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %246 = reshape(%245, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %247 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %248 = add(%246, %247) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %249 = reshape(%244, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %250 = rsqrt(%248) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %251 = multiply(%249, %250) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %252 = nn.conv2d(%242, %243, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %253 = layout_transform(%251, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %254 = cast(%model.backbone.body.layer1.2.bn3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %255 = cast(%model.backbone.body.layer1.2.bn3.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %256 = reshape(%255, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %257 = reshape(%254, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %258 = multiply(%256, %251) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %259 = subtract(%257, %258) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %260 = multiply(%252, %253) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %261 = layout_transform(%259, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %262 = add(%260, %261) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %263 = add(%262, %198) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %264 = cast(%model.backbone.fpn.inner_blocks.0.weight, dtype="float16") /* ty=Tensor[(256, 256, 1, 1), float16] */;
  %265 = nn.relu(%263) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %266 = layout_transform(%264, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 256), float16] */;
  %267 = cast(%model.backbone.fpn.inner_blocks.0.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %268 = expand_dims(%267, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %269 = expand_dims(%268, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %270 = nn.conv2d(%265, %266, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %271 = layout_transform(%269, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %272 = cast(%model.backbone.body.layer2.0.conv1.weight, dtype="float16") /* ty=Tensor[(128, 256, 1, 1), float16] */;
  %273 = layout_transform(%272, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 128), float16] */;
  %274 = cast(%model.backbone.body.layer2.0.bn1.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %275 = cast(%model.backbone.body.layer2.0.bn1.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %276 = reshape(%275, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %277 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %278 = add(%276, %277) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %279 = reshape(%274, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %280 = rsqrt(%278) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %281 = multiply(%279, %280) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %282 = nn.conv2d(%265, %273, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 128), float16] */;
  %283 = layout_transform(%281, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %284 = cast(%model.backbone.body.layer2.0.bn1.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %285 = cast(%model.backbone.body.layer2.0.bn1.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %286 = reshape(%285, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %287 = reshape(%284, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %288 = multiply(%286, %281) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %289 = subtract(%287, %288) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %290 = multiply(%282, %283) /* ty=Tensor[(1, 200, 200, 128), float16] */;
  %291 = layout_transform(%289, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %292 = add(%290, %291) /* ty=Tensor[(1, 200, 200, 128), float16] */;
  %293 = cast(%model.backbone.body.layer2.0.conv2.weight, dtype="float16") /* ty=Tensor[(128, 128, 3, 3), float16] */;
  %294 = nn.relu(%292) /* ty=Tensor[(1, 200, 200, 128), float16] */;
  %295 = layout_transform(%293, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float16] */;
  %296 = cast(%model.backbone.body.layer2.0.bn2.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %297 = cast(%model.backbone.body.layer2.0.bn2.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %298 = reshape(%297, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %299 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %300 = add(%298, %299) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %301 = reshape(%296, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %302 = rsqrt(%300) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %303 = multiply(%301, %302) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %304 = nn.conv2d(%294, %295, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %305 = layout_transform(%303, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %306 = cast(%model.backbone.body.layer2.0.bn2.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %307 = cast(%model.backbone.body.layer2.0.bn2.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %308 = reshape(%307, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %309 = reshape(%306, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %310 = multiply(%308, %303) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %311 = subtract(%309, %310) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %312 = multiply(%304, %305) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %313 = layout_transform(%311, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %314 = add(%312, %313) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %315 = cast(%model.backbone.body.layer2.0.conv3.weight, dtype="float16") /* ty=Tensor[(512, 128, 1, 1), float16] */;
  %316 = nn.relu(%314) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %317 = layout_transform(%315, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float16] */;
  %318 = cast(%model.backbone.body.layer2.0.bn3.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %319 = cast(%model.backbone.body.layer2.0.bn3.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %320 = reshape(%319, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %321 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %322 = add(%320, %321) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %323 = reshape(%318, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %324 = rsqrt(%322) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %325 = multiply(%323, %324) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %326 = nn.conv2d(%316, %317, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %327 = layout_transform(%325, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %328 = cast(%model.backbone.body.layer2.0.bn3.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %329 = cast(%model.backbone.body.layer2.0.bn3.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %330 = reshape(%329, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %331 = reshape(%328, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %332 = multiply(%330, %325) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %333 = subtract(%331, %332) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %334 = multiply(%326, %327) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %335 = layout_transform(%333, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %336 = cast(%model.backbone.body.layer2.0.downsample.0.weight, dtype="float16") /* ty=Tensor[(512, 256, 1, 1), float16] */;
  %337 = layout_transform(%336, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 512), float16] */;
  %338 = cast(%model.backbone.body.layer2.0.downsample.1.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %339 = cast(%model.backbone.body.layer2.0.downsample.1.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %340 = reshape(%339, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %341 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %342 = add(%340, %341) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %343 = reshape(%338, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %344 = rsqrt(%342) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %345 = multiply(%343, %344) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %346 = nn.conv2d(%265, %337, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %347 = layout_transform(%345, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %348 = cast(%model.backbone.body.layer2.0.downsample.1.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %349 = cast(%model.backbone.body.layer2.0.downsample.1.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %350 = reshape(%349, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %351 = reshape(%348, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %352 = multiply(%350, %345) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %353 = subtract(%351, %352) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %354 = multiply(%346, %347) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %355 = layout_transform(%353, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %356 = add(%334, %335) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %357 = add(%354, %355) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %358 = add(%356, %357) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %359 = cast(%model.backbone.body.layer2.1.conv1.weight, dtype="float16") /* ty=Tensor[(128, 512, 1, 1), float16] */;
  %360 = nn.relu(%358) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %361 = layout_transform(%359, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float16] */;
  %362 = cast(%model.backbone.body.layer2.1.bn1.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %363 = cast(%model.backbone.body.layer2.1.bn1.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %364 = reshape(%363, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %365 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %366 = add(%364, %365) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %367 = reshape(%362, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %368 = rsqrt(%366) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %369 = multiply(%367, %368) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %370 = nn.conv2d(%360, %361, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %371 = layout_transform(%369, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %372 = cast(%model.backbone.body.layer2.1.bn1.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %373 = cast(%model.backbone.body.layer2.1.bn1.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %374 = reshape(%373, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %375 = reshape(%372, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %376 = multiply(%374, %369) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %377 = subtract(%375, %376) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %378 = multiply(%370, %371) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %379 = layout_transform(%377, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %380 = add(%378, %379) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %381 = cast(%model.backbone.body.layer2.1.conv2.weight, dtype="float16") /* ty=Tensor[(128, 128, 3, 3), float16] */;
  %382 = nn.relu(%380) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %383 = layout_transform(%381, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float16] */;
  %384 = cast(%model.backbone.body.layer2.1.bn2.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %385 = cast(%model.backbone.body.layer2.1.bn2.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %386 = reshape(%385, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %387 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %388 = add(%386, %387) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %389 = reshape(%384, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %390 = rsqrt(%388) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %391 = multiply(%389, %390) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %392 = nn.conv2d(%382, %383, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %393 = layout_transform(%391, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %394 = cast(%model.backbone.body.layer2.1.bn2.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %395 = cast(%model.backbone.body.layer2.1.bn2.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %396 = reshape(%395, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %397 = reshape(%394, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %398 = multiply(%396, %391) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %399 = subtract(%397, %398) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %400 = multiply(%392, %393) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %401 = layout_transform(%399, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %402 = add(%400, %401) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %403 = cast(%model.backbone.body.layer2.1.conv3.weight, dtype="float16") /* ty=Tensor[(512, 128, 1, 1), float16] */;
  %404 = nn.relu(%402) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %405 = layout_transform(%403, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float16] */;
  %406 = cast(%model.backbone.body.layer2.1.bn3.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %407 = cast(%model.backbone.body.layer2.1.bn3.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %408 = reshape(%407, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %409 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %410 = add(%408, %409) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %411 = reshape(%406, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %412 = rsqrt(%410) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %413 = multiply(%411, %412) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %414 = nn.conv2d(%404, %405, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %415 = layout_transform(%413, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %416 = cast(%model.backbone.body.layer2.1.bn3.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %417 = cast(%model.backbone.body.layer2.1.bn3.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %418 = reshape(%417, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %419 = reshape(%416, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %420 = multiply(%418, %413) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %421 = subtract(%419, %420) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %422 = multiply(%414, %415) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %423 = layout_transform(%421, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %424 = add(%422, %423) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %425 = add(%424, %360) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %426 = cast(%model.backbone.body.layer2.2.conv1.weight, dtype="float16") /* ty=Tensor[(128, 512, 1, 1), float16] */;
  %427 = nn.relu(%425) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %428 = layout_transform(%426, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float16] */;
  %429 = cast(%model.backbone.body.layer2.2.bn1.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %430 = cast(%model.backbone.body.layer2.2.bn1.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %431 = reshape(%430, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %432 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %433 = add(%431, %432) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %434 = reshape(%429, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %435 = rsqrt(%433) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %436 = multiply(%434, %435) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %437 = nn.conv2d(%427, %428, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %438 = layout_transform(%436, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %439 = cast(%model.backbone.body.layer2.2.bn1.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %440 = cast(%model.backbone.body.layer2.2.bn1.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %441 = reshape(%440, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %442 = reshape(%439, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %443 = multiply(%441, %436) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %444 = subtract(%442, %443) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %445 = multiply(%437, %438) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %446 = layout_transform(%444, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %447 = add(%445, %446) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %448 = cast(%model.backbone.body.layer2.2.conv2.weight, dtype="float16") /* ty=Tensor[(128, 128, 3, 3), float16] */;
  %449 = nn.relu(%447) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %450 = layout_transform(%448, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float16] */;
  %451 = cast(%model.backbone.body.layer2.2.bn2.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %452 = cast(%model.backbone.body.layer2.2.bn2.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %453 = reshape(%452, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %454 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %455 = add(%453, %454) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %456 = reshape(%451, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %457 = rsqrt(%455) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %458 = multiply(%456, %457) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %459 = nn.conv2d(%449, %450, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %460 = layout_transform(%458, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %461 = cast(%model.backbone.body.layer2.2.bn2.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %462 = cast(%model.backbone.body.layer2.2.bn2.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %463 = reshape(%462, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %464 = reshape(%461, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %465 = multiply(%463, %458) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %466 = subtract(%464, %465) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %467 = multiply(%459, %460) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %468 = layout_transform(%466, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %469 = add(%467, %468) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %470 = cast(%model.backbone.body.layer2.2.conv3.weight, dtype="float16") /* ty=Tensor[(512, 128, 1, 1), float16] */;
  %471 = nn.relu(%469) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %472 = layout_transform(%470, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float16] */;
  %473 = cast(%model.backbone.body.layer2.2.bn3.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %474 = cast(%model.backbone.body.layer2.2.bn3.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %475 = reshape(%474, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %476 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %477 = add(%475, %476) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %478 = reshape(%473, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %479 = rsqrt(%477) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %480 = multiply(%478, %479) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %481 = nn.conv2d(%471, %472, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %482 = layout_transform(%480, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %483 = cast(%model.backbone.body.layer2.2.bn3.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %484 = cast(%model.backbone.body.layer2.2.bn3.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %485 = reshape(%484, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %486 = reshape(%483, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %487 = multiply(%485, %480) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %488 = subtract(%486, %487) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %489 = multiply(%481, %482) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %490 = layout_transform(%488, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %491 = add(%489, %490) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %492 = add(%491, %427) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %493 = cast(%model.backbone.body.layer2.3.conv1.weight, dtype="float16") /* ty=Tensor[(128, 512, 1, 1), float16] */;
  %494 = nn.relu(%492) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %495 = layout_transform(%493, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float16] */;
  %496 = cast(%model.backbone.body.layer2.3.bn1.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %497 = cast(%model.backbone.body.layer2.3.bn1.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %498 = reshape(%497, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %499 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %500 = add(%498, %499) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %501 = reshape(%496, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %502 = rsqrt(%500) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %503 = multiply(%501, %502) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %504 = nn.conv2d(%494, %495, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %505 = layout_transform(%503, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %506 = cast(%model.backbone.body.layer2.3.bn1.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %507 = cast(%model.backbone.body.layer2.3.bn1.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %508 = reshape(%507, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %509 = reshape(%506, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %510 = multiply(%508, %503) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %511 = subtract(%509, %510) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %512 = multiply(%504, %505) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %513 = layout_transform(%511, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %514 = add(%512, %513) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %515 = cast(%model.backbone.body.layer2.3.conv2.weight, dtype="float16") /* ty=Tensor[(128, 128, 3, 3), float16] */;
  %516 = nn.relu(%514) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %517 = layout_transform(%515, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float16] */;
  %518 = cast(%model.backbone.body.layer2.3.bn2.weight, dtype="float16") /* ty=Tensor[(128), float16] */;
  %519 = cast(%model.backbone.body.layer2.3.bn2.running_var, dtype="float16") /* ty=Tensor[(128), float16] */;
  %520 = reshape(%519, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %521 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %522 = add(%520, %521) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %523 = reshape(%518, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %524 = rsqrt(%522) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %525 = multiply(%523, %524) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %526 = nn.conv2d(%516, %517, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %527 = layout_transform(%525, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %528 = cast(%model.backbone.body.layer2.3.bn2.bias, dtype="float16") /* ty=Tensor[(128), float16] */;
  %529 = cast(%model.backbone.body.layer2.3.bn2.running_mean, dtype="float16") /* ty=Tensor[(128), float16] */;
  %530 = reshape(%529, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %531 = reshape(%528, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %532 = multiply(%530, %525) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %533 = subtract(%531, %532) /* ty=Tensor[(1, 128, 1, 1), float16] */;
  %534 = multiply(%526, %527) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %535 = layout_transform(%533, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float16] */;
  %536 = add(%534, %535) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %537 = cast(%model.backbone.body.layer2.3.conv3.weight, dtype="float16") /* ty=Tensor[(512, 128, 1, 1), float16] */;
  %538 = nn.relu(%536) /* ty=Tensor[(1, 100, 100, 128), float16] */;
  %539 = layout_transform(%537, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float16] */;
  %540 = cast(%model.backbone.body.layer2.3.bn3.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %541 = cast(%model.backbone.body.layer2.3.bn3.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %542 = reshape(%541, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %543 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %544 = add(%542, %543) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %545 = reshape(%540, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %546 = rsqrt(%544) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %547 = multiply(%545, %546) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %548 = nn.conv2d(%538, %539, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %549 = layout_transform(%547, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %550 = cast(%model.backbone.body.layer2.3.bn3.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %551 = cast(%model.backbone.body.layer2.3.bn3.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %552 = reshape(%551, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %553 = reshape(%550, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %554 = multiply(%552, %547) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %555 = subtract(%553, %554) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %556 = multiply(%548, %549) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %557 = layout_transform(%555, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %558 = add(%556, %557) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %559 = add(%558, %494) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %560 = cast(%model.backbone.fpn.inner_blocks.1.weight, dtype="float16") /* ty=Tensor[(256, 512, 1, 1), float16] */;
  %561 = nn.relu(%559) /* ty=Tensor[(1, 100, 100, 512), float16] */;
  %562 = layout_transform(%560, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float16] */;
  %563 = cast(%model.backbone.fpn.inner_blocks.1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %564 = expand_dims(%563, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %565 = expand_dims(%564, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %566 = nn.conv2d(%561, %562, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %567 = layout_transform(%565, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %568 = cast(%model.backbone.body.layer3.0.conv1.weight, dtype="float16") /* ty=Tensor[(256, 512, 1, 1), float16] */;
  %569 = layout_transform(%568, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float16] */;
  %570 = cast(%model.backbone.body.layer3.0.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %571 = cast(%model.backbone.body.layer3.0.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %572 = reshape(%571, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %573 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %574 = add(%572, %573) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %575 = reshape(%570, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %576 = rsqrt(%574) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %577 = multiply(%575, %576) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %578 = nn.conv2d(%561, %569, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %579 = layout_transform(%577, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %580 = cast(%model.backbone.body.layer3.0.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %581 = cast(%model.backbone.body.layer3.0.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %582 = reshape(%581, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %583 = reshape(%580, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %584 = multiply(%582, %577) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %585 = subtract(%583, %584) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %586 = multiply(%578, %579) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %587 = layout_transform(%585, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %588 = add(%586, %587) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %589 = cast(%model.backbone.body.layer3.0.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %590 = nn.relu(%588) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %591 = layout_transform(%589, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %592 = cast(%model.backbone.body.layer3.0.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %593 = cast(%model.backbone.body.layer3.0.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %594 = reshape(%593, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %595 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %596 = add(%594, %595) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %597 = reshape(%592, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %598 = rsqrt(%596) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %599 = multiply(%597, %598) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %600 = nn.conv2d(%590, %591, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %601 = layout_transform(%599, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %602 = cast(%model.backbone.body.layer3.0.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %603 = cast(%model.backbone.body.layer3.0.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %604 = reshape(%603, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %605 = reshape(%602, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %606 = multiply(%604, %599) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %607 = subtract(%605, %606) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %608 = multiply(%600, %601) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %609 = layout_transform(%607, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %610 = add(%608, %609) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %611 = cast(%model.backbone.body.layer3.0.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %612 = nn.relu(%610) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %613 = layout_transform(%611, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %614 = cast(%model.backbone.body.layer3.0.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %615 = cast(%model.backbone.body.layer3.0.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %616 = reshape(%615, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %617 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %618 = add(%616, %617) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %619 = reshape(%614, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %620 = rsqrt(%618) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %621 = multiply(%619, %620) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %622 = nn.conv2d(%612, %613, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %623 = layout_transform(%621, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %624 = cast(%model.backbone.body.layer3.0.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %625 = cast(%model.backbone.body.layer3.0.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %626 = reshape(%625, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %627 = reshape(%624, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %628 = multiply(%626, %621) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %629 = subtract(%627, %628) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %630 = multiply(%622, %623) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %631 = layout_transform(%629, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %632 = cast(%model.backbone.body.layer3.0.downsample.0.weight, dtype="float16") /* ty=Tensor[(1024, 512, 1, 1), float16] */;
  %633 = layout_transform(%632, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 1024), float16] */;
  %634 = cast(%model.backbone.body.layer3.0.downsample.1.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %635 = cast(%model.backbone.body.layer3.0.downsample.1.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %636 = reshape(%635, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %637 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %638 = add(%636, %637) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %639 = reshape(%634, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %640 = rsqrt(%638) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %641 = multiply(%639, %640) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %642 = nn.conv2d(%561, %633, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %643 = layout_transform(%641, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %644 = cast(%model.backbone.body.layer3.0.downsample.1.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %645 = cast(%model.backbone.body.layer3.0.downsample.1.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %646 = reshape(%645, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %647 = reshape(%644, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %648 = multiply(%646, %641) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %649 = subtract(%647, %648) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %650 = multiply(%642, %643) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %651 = layout_transform(%649, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %652 = add(%630, %631) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %653 = add(%650, %651) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %654 = add(%652, %653) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %655 = cast(%model.backbone.body.layer3.1.conv1.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %656 = nn.relu(%654) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %657 = layout_transform(%655, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %658 = cast(%model.backbone.body.layer3.1.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %659 = cast(%model.backbone.body.layer3.1.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %660 = reshape(%659, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %661 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %662 = add(%660, %661) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %663 = reshape(%658, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %664 = rsqrt(%662) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %665 = multiply(%663, %664) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %666 = nn.conv2d(%656, %657, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %667 = layout_transform(%665, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %668 = cast(%model.backbone.body.layer3.1.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %669 = cast(%model.backbone.body.layer3.1.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %670 = reshape(%669, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %671 = reshape(%668, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %672 = multiply(%670, %665) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %673 = subtract(%671, %672) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %674 = multiply(%666, %667) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %675 = layout_transform(%673, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %676 = add(%674, %675) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %677 = cast(%model.backbone.body.layer3.1.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %678 = nn.relu(%676) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %679 = layout_transform(%677, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %680 = cast(%model.backbone.body.layer3.1.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %681 = cast(%model.backbone.body.layer3.1.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %682 = reshape(%681, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %683 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %684 = add(%682, %683) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %685 = reshape(%680, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %686 = rsqrt(%684) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %687 = multiply(%685, %686) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %688 = nn.conv2d(%678, %679, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %689 = layout_transform(%687, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %690 = cast(%model.backbone.body.layer3.1.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %691 = cast(%model.backbone.body.layer3.1.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %692 = reshape(%691, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %693 = reshape(%690, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %694 = multiply(%692, %687) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %695 = subtract(%693, %694) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %696 = multiply(%688, %689) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %697 = layout_transform(%695, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %698 = add(%696, %697) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %699 = cast(%model.backbone.body.layer3.1.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %700 = nn.relu(%698) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %701 = layout_transform(%699, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %702 = cast(%model.backbone.body.layer3.1.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %703 = cast(%model.backbone.body.layer3.1.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %704 = reshape(%703, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %705 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %706 = add(%704, %705) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %707 = reshape(%702, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %708 = rsqrt(%706) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %709 = multiply(%707, %708) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %710 = nn.conv2d(%700, %701, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %711 = layout_transform(%709, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %712 = cast(%model.backbone.body.layer3.1.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %713 = cast(%model.backbone.body.layer3.1.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %714 = reshape(%713, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %715 = reshape(%712, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %716 = multiply(%714, %709) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %717 = subtract(%715, %716) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %718 = multiply(%710, %711) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %719 = layout_transform(%717, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %720 = add(%718, %719) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %721 = add(%720, %656) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %722 = cast(%model.backbone.body.layer3.2.conv1.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %723 = nn.relu(%721) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %724 = layout_transform(%722, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %725 = cast(%model.backbone.body.layer3.2.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %726 = cast(%model.backbone.body.layer3.2.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %727 = reshape(%726, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %728 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %729 = add(%727, %728) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %730 = reshape(%725, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %731 = rsqrt(%729) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %732 = multiply(%730, %731) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %733 = nn.conv2d(%723, %724, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %734 = layout_transform(%732, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %735 = cast(%model.backbone.body.layer3.2.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %736 = cast(%model.backbone.body.layer3.2.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %737 = reshape(%736, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %738 = reshape(%735, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %739 = multiply(%737, %732) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %740 = subtract(%738, %739) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %741 = multiply(%733, %734) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %742 = layout_transform(%740, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %743 = add(%741, %742) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %744 = cast(%model.backbone.body.layer3.2.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %745 = nn.relu(%743) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %746 = layout_transform(%744, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %747 = cast(%model.backbone.body.layer3.2.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %748 = cast(%model.backbone.body.layer3.2.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %749 = reshape(%748, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %750 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %751 = add(%749, %750) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %752 = reshape(%747, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %753 = rsqrt(%751) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %754 = multiply(%752, %753) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %755 = nn.conv2d(%745, %746, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %756 = layout_transform(%754, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %757 = cast(%model.backbone.body.layer3.2.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %758 = cast(%model.backbone.body.layer3.2.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %759 = reshape(%758, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %760 = reshape(%757, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %761 = multiply(%759, %754) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %762 = subtract(%760, %761) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %763 = multiply(%755, %756) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %764 = layout_transform(%762, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %765 = add(%763, %764) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %766 = cast(%model.backbone.body.layer3.2.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %767 = nn.relu(%765) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %768 = layout_transform(%766, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %769 = cast(%model.backbone.body.layer3.2.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %770 = cast(%model.backbone.body.layer3.2.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %771 = reshape(%770, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %772 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %773 = add(%771, %772) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %774 = reshape(%769, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %775 = rsqrt(%773) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %776 = multiply(%774, %775) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %777 = nn.conv2d(%767, %768, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %778 = layout_transform(%776, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %779 = cast(%model.backbone.body.layer3.2.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %780 = cast(%model.backbone.body.layer3.2.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %781 = reshape(%780, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %782 = reshape(%779, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %783 = multiply(%781, %776) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %784 = subtract(%782, %783) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %785 = multiply(%777, %778) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %786 = layout_transform(%784, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %787 = add(%785, %786) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %788 = add(%787, %723) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %789 = cast(%model.backbone.body.layer3.3.conv1.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %790 = nn.relu(%788) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %791 = layout_transform(%789, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %792 = cast(%model.backbone.body.layer3.3.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %793 = cast(%model.backbone.body.layer3.3.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %794 = reshape(%793, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %795 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %796 = add(%794, %795) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %797 = reshape(%792, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %798 = rsqrt(%796) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %799 = multiply(%797, %798) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %800 = nn.conv2d(%790, %791, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %801 = layout_transform(%799, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %802 = cast(%model.backbone.body.layer3.3.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %803 = cast(%model.backbone.body.layer3.3.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %804 = reshape(%803, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %805 = reshape(%802, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %806 = multiply(%804, %799) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %807 = subtract(%805, %806) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %808 = multiply(%800, %801) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %809 = layout_transform(%807, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %810 = add(%808, %809) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %811 = cast(%model.backbone.body.layer3.3.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %812 = nn.relu(%810) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %813 = layout_transform(%811, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %814 = cast(%model.backbone.body.layer3.3.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %815 = cast(%model.backbone.body.layer3.3.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %816 = reshape(%815, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %817 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %818 = add(%816, %817) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %819 = reshape(%814, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %820 = rsqrt(%818) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %821 = multiply(%819, %820) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %822 = nn.conv2d(%812, %813, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %823 = layout_transform(%821, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %824 = cast(%model.backbone.body.layer3.3.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %825 = cast(%model.backbone.body.layer3.3.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %826 = reshape(%825, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %827 = reshape(%824, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %828 = multiply(%826, %821) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %829 = subtract(%827, %828) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %830 = multiply(%822, %823) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %831 = layout_transform(%829, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %832 = add(%830, %831) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %833 = cast(%model.backbone.body.layer3.3.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %834 = nn.relu(%832) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %835 = layout_transform(%833, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %836 = cast(%model.backbone.body.layer3.3.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %837 = cast(%model.backbone.body.layer3.3.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %838 = reshape(%837, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %839 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %840 = add(%838, %839) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %841 = reshape(%836, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %842 = rsqrt(%840) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %843 = multiply(%841, %842) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %844 = nn.conv2d(%834, %835, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %845 = layout_transform(%843, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %846 = cast(%model.backbone.body.layer3.3.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %847 = cast(%model.backbone.body.layer3.3.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %848 = reshape(%847, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %849 = reshape(%846, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %850 = multiply(%848, %843) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %851 = subtract(%849, %850) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %852 = multiply(%844, %845) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %853 = layout_transform(%851, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %854 = add(%852, %853) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %855 = add(%854, %790) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %856 = cast(%model.backbone.body.layer3.4.conv1.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %857 = nn.relu(%855) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %858 = layout_transform(%856, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %859 = cast(%model.backbone.body.layer3.4.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %860 = cast(%model.backbone.body.layer3.4.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %861 = reshape(%860, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %862 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %863 = add(%861, %862) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %864 = reshape(%859, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %865 = rsqrt(%863) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %866 = multiply(%864, %865) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %867 = nn.conv2d(%857, %858, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %868 = layout_transform(%866, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %869 = cast(%model.backbone.body.layer3.4.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %870 = cast(%model.backbone.body.layer3.4.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %871 = reshape(%870, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %872 = reshape(%869, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %873 = multiply(%871, %866) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %874 = subtract(%872, %873) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %875 = multiply(%867, %868) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %876 = layout_transform(%874, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %877 = add(%875, %876) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %878 = cast(%model.backbone.body.layer3.4.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %879 = nn.relu(%877) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %880 = layout_transform(%878, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %881 = cast(%model.backbone.body.layer3.4.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %882 = cast(%model.backbone.body.layer3.4.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %883 = reshape(%882, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %884 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %885 = add(%883, %884) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %886 = reshape(%881, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %887 = rsqrt(%885) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %888 = multiply(%886, %887) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %889 = nn.conv2d(%879, %880, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %890 = layout_transform(%888, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %891 = cast(%model.backbone.body.layer3.4.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %892 = cast(%model.backbone.body.layer3.4.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %893 = reshape(%892, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %894 = reshape(%891, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %895 = multiply(%893, %888) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %896 = subtract(%894, %895) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %897 = multiply(%889, %890) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %898 = layout_transform(%896, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %899 = add(%897, %898) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %900 = cast(%model.backbone.body.layer3.4.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %901 = nn.relu(%899) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %902 = layout_transform(%900, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %903 = cast(%model.backbone.body.layer3.4.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %904 = cast(%model.backbone.body.layer3.4.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %905 = reshape(%904, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %906 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %907 = add(%905, %906) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %908 = reshape(%903, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %909 = rsqrt(%907) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %910 = multiply(%908, %909) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %911 = nn.conv2d(%901, %902, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %912 = layout_transform(%910, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %913 = cast(%model.backbone.body.layer3.4.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %914 = cast(%model.backbone.body.layer3.4.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %915 = reshape(%914, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %916 = reshape(%913, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %917 = multiply(%915, %910) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %918 = subtract(%916, %917) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %919 = multiply(%911, %912) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %920 = layout_transform(%918, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %921 = add(%919, %920) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %922 = add(%921, %857) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %923 = cast(%model.backbone.body.layer3.5.conv1.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %924 = nn.relu(%922) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %925 = layout_transform(%923, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %926 = cast(%model.backbone.body.layer3.5.bn1.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %927 = cast(%model.backbone.body.layer3.5.bn1.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %928 = reshape(%927, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %929 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %930 = add(%928, %929) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %931 = reshape(%926, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %932 = rsqrt(%930) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %933 = multiply(%931, %932) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %934 = nn.conv2d(%924, %925, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %935 = layout_transform(%933, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %936 = cast(%model.backbone.body.layer3.5.bn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %937 = cast(%model.backbone.body.layer3.5.bn1.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %938 = reshape(%937, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %939 = reshape(%936, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %940 = multiply(%938, %933) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %941 = subtract(%939, %940) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %942 = multiply(%934, %935) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %943 = layout_transform(%941, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %944 = add(%942, %943) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %945 = cast(%model.backbone.body.layer3.5.conv2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %946 = nn.relu(%944) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %947 = layout_transform(%945, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %948 = cast(%model.backbone.body.layer3.5.bn2.weight, dtype="float16") /* ty=Tensor[(256), float16] */;
  %949 = cast(%model.backbone.body.layer3.5.bn2.running_var, dtype="float16") /* ty=Tensor[(256), float16] */;
  %950 = reshape(%949, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %951 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %952 = add(%950, %951) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %953 = reshape(%948, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %954 = rsqrt(%952) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %955 = multiply(%953, %954) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %956 = nn.conv2d(%946, %947, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %957 = layout_transform(%955, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %958 = cast(%model.backbone.body.layer3.5.bn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %959 = cast(%model.backbone.body.layer3.5.bn2.running_mean, dtype="float16") /* ty=Tensor[(256), float16] */;
  %960 = reshape(%959, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %961 = reshape(%958, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %962 = multiply(%960, %955) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %963 = subtract(%961, %962) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %964 = multiply(%956, %957) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %965 = layout_transform(%963, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %966 = add(%964, %965) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %967 = cast(%model.backbone.body.layer3.5.conv3.weight, dtype="float16") /* ty=Tensor[(1024, 256, 1, 1), float16] */;
  %968 = nn.relu(%966) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %969 = layout_transform(%967, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float16] */;
  %970 = cast(%model.backbone.body.layer3.5.bn3.weight, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %971 = cast(%model.backbone.body.layer3.5.bn3.running_var, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %972 = reshape(%971, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %973 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %974 = add(%972, %973) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %975 = reshape(%970, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %976 = rsqrt(%974) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %977 = multiply(%975, %976) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %978 = nn.conv2d(%968, %969, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %979 = layout_transform(%977, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %980 = cast(%model.backbone.body.layer3.5.bn3.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %981 = cast(%model.backbone.body.layer3.5.bn3.running_mean, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %982 = reshape(%981, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %983 = reshape(%980, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %984 = multiply(%982, %977) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %985 = subtract(%983, %984) /* ty=Tensor[(1, 1024, 1, 1), float16] */;
  %986 = multiply(%978, %979) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %987 = layout_transform(%985, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float16] */;
  %988 = add(%986, %987) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %989 = add(%988, %924) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %990 = cast(%model.backbone.fpn.inner_blocks.2.weight, dtype="float16") /* ty=Tensor[(256, 1024, 1, 1), float16] */;
  %991 = nn.relu(%989) /* ty=Tensor[(1, 50, 50, 1024), float16] */;
  %992 = layout_transform(%990, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float16] */;
  %993 = cast(%model.backbone.fpn.inner_blocks.2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %994 = expand_dims(%993, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %995 = expand_dims(%994, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %996 = nn.conv2d(%991, %992, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %997 = layout_transform(%995, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %998 = cast(%model.backbone.body.layer4.0.conv1.weight, dtype="float16") /* ty=Tensor[(512, 1024, 1, 1), float16] */;
  %999 = layout_transform(%998, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 512), float16] */;
  %1000 = cast(%model.backbone.body.layer4.0.bn1.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1001 = cast(%model.backbone.body.layer4.0.bn1.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1002 = reshape(%1001, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1003 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1004 = add(%1002, %1003) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1005 = reshape(%1000, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1006 = rsqrt(%1004) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1007 = multiply(%1005, %1006) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1008 = nn.conv2d(%991, %999, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 512), float16] */;
  %1009 = layout_transform(%1007, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1010 = cast(%model.backbone.body.layer4.0.bn1.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1011 = cast(%model.backbone.body.layer4.0.bn1.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1012 = reshape(%1011, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1013 = reshape(%1010, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1014 = multiply(%1012, %1007) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1015 = subtract(%1013, %1014) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1016 = multiply(%1008, %1009) /* ty=Tensor[(1, 50, 50, 512), float16] */;
  %1017 = layout_transform(%1015, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1018 = add(%1016, %1017) /* ty=Tensor[(1, 50, 50, 512), float16] */;
  %1019 = cast(%model.backbone.body.layer4.0.conv2.weight, dtype="float16") /* ty=Tensor[(512, 512, 3, 3), float16] */;
  %1020 = nn.relu(%1018) /* ty=Tensor[(1, 50, 50, 512), float16] */;
  %1021 = layout_transform(%1019, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float16] */;
  %1022 = cast(%model.backbone.body.layer4.0.bn2.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1023 = cast(%model.backbone.body.layer4.0.bn2.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1024 = reshape(%1023, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1025 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1026 = add(%1024, %1025) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1027 = reshape(%1022, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1028 = rsqrt(%1026) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1029 = multiply(%1027, %1028) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1030 = nn.conv2d(%1020, %1021, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1031 = layout_transform(%1029, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1032 = cast(%model.backbone.body.layer4.0.bn2.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1033 = cast(%model.backbone.body.layer4.0.bn2.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1034 = reshape(%1033, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1035 = reshape(%1032, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1036 = multiply(%1034, %1029) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1037 = subtract(%1035, %1036) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1038 = multiply(%1030, %1031) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1039 = layout_transform(%1037, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1040 = add(%1038, %1039) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1041 = cast(%model.backbone.body.layer4.0.conv3.weight, dtype="float16") /* ty=Tensor[(2048, 512, 1, 1), float16] */;
  %1042 = nn.relu(%1040) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1043 = layout_transform(%1041, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float16] */;
  %1044 = cast(%model.backbone.body.layer4.0.bn3.weight, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1045 = cast(%model.backbone.body.layer4.0.bn3.running_var, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1046 = reshape(%1045, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1047 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1048 = add(%1046, %1047) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1049 = reshape(%1044, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1050 = rsqrt(%1048) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1051 = multiply(%1049, %1050) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1052 = nn.conv2d(%1042, %1043, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1053 = layout_transform(%1051, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1054 = cast(%model.backbone.body.layer4.0.bn3.bias, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1055 = cast(%model.backbone.body.layer4.0.bn3.running_mean, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1056 = reshape(%1055, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1057 = reshape(%1054, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1058 = multiply(%1056, %1051) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1059 = subtract(%1057, %1058) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1060 = multiply(%1052, %1053) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1061 = layout_transform(%1059, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1062 = cast(%model.backbone.body.layer4.0.downsample.0.weight, dtype="float16") /* ty=Tensor[(2048, 1024, 1, 1), float16] */;
  %1063 = layout_transform(%1062, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 2048), float16] */;
  %1064 = cast(%model.backbone.body.layer4.0.downsample.1.weight, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1065 = cast(%model.backbone.body.layer4.0.downsample.1.running_var, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1066 = reshape(%1065, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1067 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1068 = add(%1066, %1067) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1069 = reshape(%1064, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1070 = rsqrt(%1068) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1071 = multiply(%1069, %1070) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1072 = nn.conv2d(%991, %1063, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1073 = layout_transform(%1071, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1074 = cast(%model.backbone.body.layer4.0.downsample.1.bias, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1075 = cast(%model.backbone.body.layer4.0.downsample.1.running_mean, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1076 = reshape(%1075, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1077 = reshape(%1074, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1078 = multiply(%1076, %1071) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1079 = subtract(%1077, %1078) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1080 = multiply(%1072, %1073) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1081 = layout_transform(%1079, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1082 = add(%1060, %1061) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1083 = add(%1080, %1081) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1084 = add(%1082, %1083) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1085 = cast(%model.backbone.body.layer4.1.conv1.weight, dtype="float16") /* ty=Tensor[(512, 2048, 1, 1), float16] */;
  %1086 = nn.relu(%1084) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1087 = layout_transform(%1085, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float16] */;
  %1088 = cast(%model.backbone.body.layer4.1.bn1.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1089 = cast(%model.backbone.body.layer4.1.bn1.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1090 = reshape(%1089, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1091 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1092 = add(%1090, %1091) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1093 = reshape(%1088, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1094 = rsqrt(%1092) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1095 = multiply(%1093, %1094) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1096 = nn.conv2d(%1086, %1087, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1097 = layout_transform(%1095, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1098 = cast(%model.backbone.body.layer4.1.bn1.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1099 = cast(%model.backbone.body.layer4.1.bn1.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1100 = reshape(%1099, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1101 = reshape(%1098, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1102 = multiply(%1100, %1095) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1103 = subtract(%1101, %1102) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1104 = multiply(%1096, %1097) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1105 = layout_transform(%1103, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1106 = add(%1104, %1105) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1107 = cast(%model.backbone.body.layer4.1.conv2.weight, dtype="float16") /* ty=Tensor[(512, 512, 3, 3), float16] */;
  %1108 = nn.relu(%1106) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1109 = layout_transform(%1107, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float16] */;
  %1110 = cast(%model.backbone.body.layer4.1.bn2.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1111 = cast(%model.backbone.body.layer4.1.bn2.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1112 = reshape(%1111, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1113 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1114 = add(%1112, %1113) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1115 = reshape(%1110, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1116 = rsqrt(%1114) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1117 = multiply(%1115, %1116) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1118 = nn.conv2d(%1108, %1109, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1119 = layout_transform(%1117, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1120 = cast(%model.backbone.body.layer4.1.bn2.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1121 = cast(%model.backbone.body.layer4.1.bn2.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1122 = reshape(%1121, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1123 = reshape(%1120, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1124 = multiply(%1122, %1117) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1125 = subtract(%1123, %1124) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1126 = multiply(%1118, %1119) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1127 = layout_transform(%1125, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1128 = add(%1126, %1127) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1129 = cast(%model.backbone.body.layer4.1.conv3.weight, dtype="float16") /* ty=Tensor[(2048, 512, 1, 1), float16] */;
  %1130 = nn.relu(%1128) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1131 = layout_transform(%1129, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float16] */;
  %1132 = cast(%model.backbone.body.layer4.1.bn3.weight, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1133 = cast(%model.backbone.body.layer4.1.bn3.running_var, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1134 = reshape(%1133, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1135 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1136 = add(%1134, %1135) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1137 = reshape(%1132, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1138 = rsqrt(%1136) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1139 = multiply(%1137, %1138) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1140 = nn.conv2d(%1130, %1131, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1141 = layout_transform(%1139, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1142 = cast(%model.backbone.body.layer4.1.bn3.bias, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1143 = cast(%model.backbone.body.layer4.1.bn3.running_mean, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1144 = reshape(%1143, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1145 = reshape(%1142, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1146 = multiply(%1144, %1139) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1147 = subtract(%1145, %1146) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1148 = multiply(%1140, %1141) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1149 = layout_transform(%1147, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1150 = add(%1148, %1149) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1151 = add(%1150, %1086) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1152 = cast(%model.backbone.body.layer4.2.conv1.weight, dtype="float16") /* ty=Tensor[(512, 2048, 1, 1), float16] */;
  %1153 = nn.relu(%1151) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1154 = layout_transform(%1152, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float16] */;
  %1155 = cast(%model.backbone.body.layer4.2.bn1.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1156 = cast(%model.backbone.body.layer4.2.bn1.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1157 = reshape(%1156, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1158 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1159 = add(%1157, %1158) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1160 = reshape(%1155, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1161 = rsqrt(%1159) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1162 = multiply(%1160, %1161) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1163 = nn.conv2d(%1153, %1154, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1164 = layout_transform(%1162, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1165 = cast(%model.backbone.body.layer4.2.bn1.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1166 = cast(%model.backbone.body.layer4.2.bn1.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1167 = reshape(%1166, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1168 = reshape(%1165, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1169 = multiply(%1167, %1162) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1170 = subtract(%1168, %1169) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1171 = multiply(%1163, %1164) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1172 = layout_transform(%1170, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1173 = add(%1171, %1172) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1174 = cast(%model.backbone.body.layer4.2.conv2.weight, dtype="float16") /* ty=Tensor[(512, 512, 3, 3), float16] */;
  %1175 = nn.relu(%1173) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1176 = layout_transform(%1174, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float16] */;
  %1177 = cast(%model.backbone.body.layer4.2.bn2.weight, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1178 = cast(%model.backbone.body.layer4.2.bn2.running_var, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1179 = reshape(%1178, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1180 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1181 = add(%1179, %1180) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1182 = reshape(%1177, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1183 = rsqrt(%1181) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1184 = multiply(%1182, %1183) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1185 = nn.conv2d(%1175, %1176, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1186 = layout_transform(%1184, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1187 = cast(%model.backbone.body.layer4.2.bn2.bias, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1188 = cast(%model.backbone.body.layer4.2.bn2.running_mean, dtype="float16") /* ty=Tensor[(512), float16] */;
  %1189 = reshape(%1188, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1190 = reshape(%1187, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1191 = multiply(%1189, %1184) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1192 = subtract(%1190, %1191) /* ty=Tensor[(1, 512, 1, 1), float16] */;
  %1193 = multiply(%1185, %1186) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1194 = layout_transform(%1192, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float16] */;
  %1195 = add(%1193, %1194) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1196 = cast(%model.backbone.body.layer4.2.conv3.weight, dtype="float16") /* ty=Tensor[(2048, 512, 1, 1), float16] */;
  %1197 = nn.relu(%1195) /* ty=Tensor[(1, 25, 25, 512), float16] */;
  %1198 = layout_transform(%1196, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float16] */;
  %1199 = cast(%model.backbone.body.layer4.2.bn3.weight, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1200 = cast(%model.backbone.body.layer4.2.bn3.running_var, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1201 = reshape(%1200, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1202 = cast(0f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1203 = add(%1201, %1202) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1204 = reshape(%1199, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1205 = rsqrt(%1203) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1206 = multiply(%1204, %1205) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1207 = nn.conv2d(%1197, %1198, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1208 = layout_transform(%1206, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1209 = cast(%model.backbone.body.layer4.2.bn3.bias, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1210 = cast(%model.backbone.body.layer4.2.bn3.running_mean, dtype="float16") /* ty=Tensor[(2048), float16] */;
  %1211 = reshape(%1210, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1212 = reshape(%1209, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1213 = multiply(%1211, %1206) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1214 = subtract(%1212, %1213) /* ty=Tensor[(1, 2048, 1, 1), float16] */;
  %1215 = multiply(%1207, %1208) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1216 = layout_transform(%1214, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float16] */;
  %1217 = add(%1215, %1216) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1218 = add(%1217, %1153) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1219 = cast(%model.backbone.fpn.inner_blocks.3.weight, dtype="float16") /* ty=Tensor[(256, 2048, 1, 1), float16] */;
  %1220 = nn.relu(%1218) /* ty=Tensor[(1, 25, 25, 2048), float16] */;
  %1221 = layout_transform(%1219, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 256), float16] */;
  %1222 = cast(%model.backbone.fpn.inner_blocks.3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1223 = expand_dims(%1222, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1224 = expand_dims(%1223, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1225 = nn.conv2d(%1220, %1221, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1226 = layout_transform(%1224, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1227 = add(%1225, %1226) /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1228 = add(%996, %997) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1229 = image.resize2d(%1227, size=[50, 50], roi=[0f, 0f, 0f, 0f], layout="NHWC", method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="", cubic_alpha=-0.75f) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1230 = add(%1228, %1229) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1231 = add(%566, %567) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1232 = image.resize2d(%1230, size=[100, 100], roi=[0f, 0f, 0f, 0f], layout="NHWC", method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="", cubic_alpha=-0.75f) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1233 = add(%1231, %1232) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1234 = add(%270, %271) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1235 = image.resize2d(%1233, size=[200, 200], roi=[0f, 0f, 0f, 0f], layout="NHWC", method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="", cubic_alpha=-0.75f) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1236 = cast(%model.backbone.fpn.layer_blocks.0.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %1237 = add(%1234, %1235) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1238 = layout_transform(%1236, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %1239 = cast(%model.backbone.fpn.layer_blocks.0.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1240 = expand_dims(%1239, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1241 = expand_dims(%1240, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1242 = nn.conv2d(%1237, %1238, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1243 = layout_transform(%1241, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1244 = add(%1242, %1243) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1245 = cast(%model.rpn.head.conv.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %1246 = layout_transform(%1245, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %1247 = cast(%model.rpn.head.conv.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1248 = expand_dims(%1247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1249 = expand_dims(%1248, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1250 = nn.conv2d(%1244, %1246, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1251 = layout_transform(%1249, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1252 = add(%1250, %1251) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1253 = cast(%model.rpn.head.bbox_pred.weight, dtype="float16") /* ty=Tensor[(12, 256, 1, 1), float16] */;
  %1254 = nn.relu(%1252) /* ty=Tensor[(1, 200, 200, 256), float16] */;
  %1255 = layout_transform(%1253, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 12), float16] */;
  %1256 = cast(%model.rpn.head.bbox_pred.bias, dtype="float16") /* ty=Tensor[(12), float16] */;
  %1257 = expand_dims(%1256, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float16] */;
  %1258 = expand_dims(%1257, axis=0) /* ty=Tensor[(1, 12, 1, 1), float16] */;
  %1259 = nn.conv2d(%1254, %1255, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 12), float16] */;
  %1260 = layout_transform(%1258, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float16] */;
  %1261 = add(%1259, %1260) /* ty=Tensor[(1, 200, 200, 12), float16] */;
  %1262 = layout_transform(%1261, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 200, 200), float16] */;
  %1263 = reshape(%1262, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float16] */;
  %1264 = transpose(%1263, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float16] */;
  %1265 = cast(%model.backbone.fpn.layer_blocks.1.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %1266 = layout_transform(%1265, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %1267 = cast(%model.backbone.fpn.layer_blocks.1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1268 = expand_dims(%1267, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1269 = expand_dims(%1268, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1270 = nn.conv2d(%1233, %1266, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1271 = layout_transform(%1269, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1272 = add(%1270, %1271) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1273 = expand_dims(%1247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1274 = expand_dims(%1273, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1275 = nn.conv2d(%1272, %1246, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1276 = layout_transform(%1274, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1277 = add(%1275, %1276) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1278 = nn.relu(%1277) /* ty=Tensor[(1, 100, 100, 256), float16] */;
  %1279 = expand_dims(%1256, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float16] */;
  %1280 = expand_dims(%1279, axis=0) /* ty=Tensor[(1, 12, 1, 1), float16] */;
  %1281 = nn.conv2d(%1278, %1255, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 12), float16] */;
  %1282 = layout_transform(%1280, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float16] */;
  %1283 = add(%1281, %1282) /* ty=Tensor[(1, 100, 100, 12), float16] */;
  %1284 = layout_transform(%1283, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 100, 100), float16] */;
  %1285 = reshape(%1284, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float16] */;
  %1286 = transpose(%1285, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float16] */;
  %1287 = cast(%model.backbone.fpn.layer_blocks.2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %1288 = layout_transform(%1287, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %1289 = cast(%model.backbone.fpn.layer_blocks.2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1290 = expand_dims(%1289, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1291 = expand_dims(%1290, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1292 = nn.conv2d(%1230, %1288, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1293 = layout_transform(%1291, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1294 = add(%1292, %1293) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1295 = expand_dims(%1247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1296 = expand_dims(%1295, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1297 = nn.conv2d(%1294, %1246, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1298 = layout_transform(%1296, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1299 = add(%1297, %1298) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1300 = nn.relu(%1299) /* ty=Tensor[(1, 50, 50, 256), float16] */;
  %1301 = expand_dims(%1256, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float16] */;
  %1302 = expand_dims(%1301, axis=0) /* ty=Tensor[(1, 12, 1, 1), float16] */;
  %1303 = nn.conv2d(%1300, %1255, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 12), float16] */;
  %1304 = layout_transform(%1302, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float16] */;
  %1305 = add(%1303, %1304) /* ty=Tensor[(1, 50, 50, 12), float16] */;
  %1306 = layout_transform(%1305, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 50, 50), float16] */;
  %1307 = reshape(%1306, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float16] */;
  %1308 = transpose(%1307, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float16] */;
  %1309 = cast(%model.backbone.fpn.layer_blocks.3.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %1310 = layout_transform(%1309, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %1311 = cast(%model.backbone.fpn.layer_blocks.3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %1312 = expand_dims(%1311, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1313 = expand_dims(%1312, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1314 = nn.conv2d(%1227, %1310, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1315 = layout_transform(%1313, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1316 = add(%1314, %1315) /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1317 = expand_dims(%1247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1318 = expand_dims(%1317, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1319 = nn.conv2d(%1316, %1246, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1320 = layout_transform(%1318, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1321 = add(%1319, %1320) /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1322 = nn.relu(%1321) /* ty=Tensor[(1, 25, 25, 256), float16] */;
  %1323 = expand_dims(%1256, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float16] */;
  %1324 = expand_dims(%1323, axis=0) /* ty=Tensor[(1, 12, 1, 1), float16] */;
  %1325 = nn.conv2d(%1322, %1255, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 12), float16] */;
  %1326 = layout_transform(%1324, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float16] */;
  %1327 = add(%1325, %1326) /* ty=Tensor[(1, 25, 25, 12), float16] */;
  %1328 = layout_transform(%1327, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 25, 25), float16] */;
  %1329 = reshape(%1328, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float16] */;
  %1330 = transpose(%1329, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float16] */;
  %1331 = nn.max_pool2d(%1316, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 13, 13, 256), float16] */;
  %1332 = expand_dims(%1247, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %1333 = expand_dims(%1332, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %1334 = nn.conv2d(%1331, %1246, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 13, 13, 256), float16] */;
  %1335 = layout_transform(%1333, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %1336 = add(%1334, %1335) /* ty=Tensor[(1, 13, 13, 256), float16] */;
  %1337 = nn.relu(%1336) /* ty=Tensor[(1, 13, 13, 256), float16] */;
  %1338 = expand_dims(%1256, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float16] */;
  %1339 = expand_dims(%1338, axis=0) /* ty=Tensor[(1, 12, 1, 1), float16] */;
  %1340 = nn.conv2d(%1337, %1255, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 13, 13, 12), float16] */;
  %1341 = layout_transform(%1339, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float16] */;
  %1342 = add(%1340, %1341) /* ty=Tensor[(1, 13, 13, 12), float16] */;
  %1343 = layout_transform(%1342, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 13, 13), float16] */;
  %1344 = reshape(%1343, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float16] */;
  %1345 = transpose(%1344, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float16] */;
  %1346 = reshape(%1264, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float16] */;
  %1347 = reshape(%1286, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float16] */;
  %1348 = reshape(%1308, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float16] */;
  %1349 = reshape(%1330, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float16] */;
  %1350 = reshape(%1345, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float16] */;
  %1351 = (%1346, %1347, %1348, %1349, %1350);
  %1352 = concatenate(%1351, axis=1) /* ty=Tensor[(1, 159882, 4), float16] */;
  %1353 = reshape(%1352, newshape=[-1, 4]) /* ty=Tensor[(159882, 4), float16] */;
  %1354 = reshape(%1353, newshape=[159882, -1]) /* ty=Tensor[(159882, 4), float16] */;
  %1355 = strided_slice(%1354, begin=[0, 0], end=[159882, 4], strides=[1, 4], axes=None) /* ty=Tensor[(159882, 1), float16] */;
  %1356 = cast(1f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1357 = divide(%1355, %1356) /* ty=Tensor[(159882, 1), float16] */;
  %1358 = arange(0 /* ty=int32 */, 200 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="int32") /* ty=Tensor[(200), int32] */;
  %1359 = divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1360 = cast(%1358, dtype="int64") /* ty=Tensor[(200), int64] */;
  %1361 = cast(%1359, dtype="int64") /* ty=int64 */;
  %1362 = arange(0 /* ty=int32 */, 200 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="int32") /* ty=Tensor[(200), int32] */;
  %1363 = divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1364 = cast(%1362, dtype="int64") /* ty=Tensor[(200), int64] */;
  %1365 = cast(%1363, dtype="int64") /* ty=int64 */;
  %1366 = multiply(%1360, %1361) /* ty=Tensor[(200), int64] */;
  %1367 = multiply(%1364, %1365) /* ty=Tensor[(200), int64] */;
  %1368 = (%1366, %1367);
  %1369 = meshgrid(%1368) /* ty=(Tensor[(200, 200), int64], Tensor[(200, 200), int64]) */;
  %1370 = %1369.1;
  %1371 = %1369.0;
  %1372 = reshape(%1370, newshape=[-1]) /* ty=Tensor[(40000), int64] */;
  %1373 = reshape(%1371, newshape=[-1]) /* ty=Tensor[(40000), int64] */;
  %1374 = (%1372, %1373, %1372, %1373);
  %1375 = stack(%1374, axis=1) /* ty=Tensor[(40000, 4), int64] */;
  %1376 = reshape(%1375, newshape=[-1, 1, 4]) /* ty=Tensor[(40000, 1, 4), int64] */;
  %1377 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4), float32] */, dtype="float16") /* ty=Tensor[(3, 4), float16] */;
  %1378 = reshape(%1377, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float16] */;
  %1379 = cast(%1376, dtype="float32") /* ty=Tensor[(40000, 1, 4), float32] */;
  %1380 = cast(%1378, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %1381 = add(%1379, %1380) /* ty=Tensor[(40000, 3, 4), float32] */;
  %1382 = arange(0 /* ty=int32 */, 100 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="int32") /* ty=Tensor[(100), int32] */;
  %1383 = divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1384 = cast(%1382, dtype="int64") /* ty=Tensor[(100), int64] */;
  %1385 = cast(%1383, dtype="int64") /* ty=int64 */;
  %1386 = arange(0 /* ty=int32 */, 100 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="int32") /* ty=Tensor[(100), int32] */;
  %1387 = divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1388 = cast(%1386, dtype="int64") /* ty=Tensor[(100), int64] */;
  %1389 = cast(%1387, dtype="int64") /* ty=int64 */;
  %1390 = multiply(%1384, %1385) /* ty=Tensor[(100), int64] */;
  %1391 = multiply(%1388, %1389) /* ty=Tensor[(100), int64] */;
  %1392 = (%1390, %1391);
  %1393 = meshgrid(%1392) /* ty=(Tensor[(100, 100), int64], Tensor[(100, 100), int64]) */;
  %1394 = %1393.1;
  %1395 = %1393.0;
  %1396 = reshape(%1394, newshape=[-1]) /* ty=Tensor[(10000), int64] */;
  %1397 = reshape(%1395, newshape=[-1]) /* ty=Tensor[(10000), int64] */;
  %1398 = (%1396, %1397, %1396, %1397);
  %1399 = stack(%1398, axis=1) /* ty=Tensor[(10000, 4), int64] */;
  %1400 = reshape(%1399, newshape=[-1, 1, 4]) /* ty=Tensor[(10000, 1, 4), int64] */;
  %1401 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 4), float32] */, dtype="float16") /* ty=Tensor[(3, 4), float16] */;
  %1402 = reshape(%1401, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float16] */;
  %1403 = cast(%1400, dtype="float32") /* ty=Tensor[(10000, 1, 4), float32] */;
  %1404 = cast(%1402, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %1405 = add(%1403, %1404) /* ty=Tensor[(10000, 3, 4), float32] */;
  %1406 = arange(0 /* ty=int32 */, 50 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="int32") /* ty=Tensor[(50), int32] */;
  %1407 = divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1408 = cast(%1406, dtype="int64") /* ty=Tensor[(50), int64] */;
  %1409 = cast(%1407, dtype="int64") /* ty=int64 */;
  %1410 = arange(0 /* ty=int32 */, 50 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="int32") /* ty=Tensor[(50), int32] */;
  %1411 = divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1412 = cast(%1410, dtype="int64") /* ty=Tensor[(50), int64] */;
  %1413 = cast(%1411, dtype="int64") /* ty=int64 */;
  %1414 = multiply(%1408, %1409) /* ty=Tensor[(50), int64] */;
  %1415 = multiply(%1412, %1413) /* ty=Tensor[(50), int64] */;
  %1416 = (%1414, %1415);
  %1417 = meshgrid(%1416) /* ty=(Tensor[(50, 50), int64], Tensor[(50, 50), int64]) */;
  %1418 = %1417.1;
  %1419 = %1417.0;
  %1420 = reshape(%1418, newshape=[-1]) /* ty=Tensor[(2500), int64] */;
  %1421 = reshape(%1419, newshape=[-1]) /* ty=Tensor[(2500), int64] */;
  %1422 = (%1420, %1421, %1420, %1421);
  %1423 = stack(%1422, axis=1) /* ty=Tensor[(2500, 4), int64] */;
  %1424 = reshape(%1423, newshape=[-1, 1, 4]) /* ty=Tensor[(2500, 1, 4), int64] */;
  %1425 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4), float32] */, dtype="float16") /* ty=Tensor[(3, 4), float16] */;
  %1426 = reshape(%1425, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float16] */;
  %1427 = cast(%1424, dtype="float32") /* ty=Tensor[(2500, 1, 4), float32] */;
  %1428 = cast(%1426, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %1429 = add(%1427, %1428) /* ty=Tensor[(2500, 3, 4), float32] */;
  %1430 = arange(0 /* ty=int32 */, 25 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(25), int32] */;
  %1431 = divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1432 = cast(%1430, dtype="int64") /* ty=Tensor[(25), int64] */;
  %1433 = cast(%1431, dtype="int64") /* ty=int64 */;
  %1434 = arange(0 /* ty=int32 */, 25 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="int32") /* ty=Tensor[(25), int32] */;
  %1435 = divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1436 = cast(%1434, dtype="int64") /* ty=Tensor[(25), int64] */;
  %1437 = cast(%1435, dtype="int64") /* ty=int64 */;
  %1438 = multiply(%1432, %1433) /* ty=Tensor[(25), int64] */;
  %1439 = multiply(%1436, %1437) /* ty=Tensor[(25), int64] */;
  %1440 = (%1438, %1439);
  %1441 = meshgrid(%1440) /* ty=(Tensor[(25, 25), int64], Tensor[(25, 25), int64]) */;
  %1442 = %1441.1;
  %1443 = %1441.0;
  %1444 = reshape(%1442, newshape=[-1]) /* ty=Tensor[(625), int64] */;
  %1445 = reshape(%1443, newshape=[-1]) /* ty=Tensor[(625), int64] */;
  %1446 = (%1444, %1445, %1444, %1445);
  %1447 = stack(%1446, axis=1) /* ty=Tensor[(625, 4), int64] */;
  %1448 = reshape(%1447, newshape=[-1, 1, 4]) /* ty=Tensor[(625, 1, 4), int64] */;
  %1449 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4), float32] */, dtype="float16") /* ty=Tensor[(3, 4), float16] */;
  %1450 = reshape(%1449, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float16] */;
  %1451 = cast(%1448, dtype="float32") /* ty=Tensor[(625, 1, 4), float32] */;
  %1452 = cast(%1450, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %1453 = add(%1451, %1452) /* ty=Tensor[(625, 3, 4), float32] */;
  %1454 = arange(0 /* ty=int32 */, 13 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="int32") /* ty=Tensor[(13), int32] */;
  %1455 = divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1456 = cast(%1454, dtype="int64") /* ty=Tensor[(13), int64] */;
  %1457 = cast(%1455, dtype="int64") /* ty=int64 */;
  %1458 = arange(0 /* ty=int32 */, 13 /* ty=int32 */, 1 /* ty=int32 */, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="int32") /* ty=Tensor[(13), int32] */;
  %1459 = divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1460 = cast(%1458, dtype="int64") /* ty=Tensor[(13), int64] */;
  %1461 = cast(%1459, dtype="int64") /* ty=int64 */;
  %1462 = multiply(%1456, %1457) /* ty=Tensor[(13), int64] */;
  %1463 = multiply(%1460, %1461) /* ty=Tensor[(13), int64] */;
  %1464 = (%1462, %1463);
  %1465 = meshgrid(%1464) /* ty=(Tensor[(13, 13), int64], Tensor[(13, 13), int64]) */;
  %1466 = %1465.1;
  %1467 = %1465.0;
  %1468 = reshape(%1466, newshape=[-1]) /* ty=Tensor[(169), int64] */;
  %1469 = reshape(%1467, newshape=[-1]) /* ty=Tensor[(169), int64] */;
  %1470 = (%1468, %1469, %1468, %1469);
  %1471 = stack(%1470, axis=1) /* ty=Tensor[(169, 4), int64] */;
  %1472 = reshape(%1471, newshape=[-1, 1, 4]) /* ty=Tensor[(169, 1, 4), int64] */;
  %1473 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 4), float32] */, dtype="float16") /* ty=Tensor[(3, 4), float16] */;
  %1474 = reshape(%1473, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float16] */;
  %1475 = cast(%1472, dtype="float32") /* ty=Tensor[(169, 1, 4), float32] */;
  %1476 = cast(%1474, dtype="float32") /* ty=Tensor[(1, 3, 4), float32] */;
  %1477 = add(%1475, %1476) /* ty=Tensor[(169, 3, 4), float32] */;
  %1478 = reshape(%1381, newshape=[-1, 4]) /* ty=Tensor[(120000, 4), float32] */;
  %1479 = reshape(%1405, newshape=[-1, 4]) /* ty=Tensor[(30000, 4), float32] */;
  %1480 = reshape(%1429, newshape=[-1, 4]) /* ty=Tensor[(7500, 4), float32] */;
  %1481 = reshape(%1453, newshape=[-1, 4]) /* ty=Tensor[(1875, 4), float32] */;
  %1482 = reshape(%1477, newshape=[-1, 4]) /* ty=Tensor[(507, 4), float32] */;
  %1483 = (%1478, %1479, %1480, %1481, %1482);
  %1484 = concatenate(%1483) /* ty=Tensor[(159882, 4), float32] */;
  %1485 = (%1484,);
  %1486 = concatenate(%1485) /* ty=Tensor[(159882, 4), float32] */;
  %1487 = take(%1486, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1488 = take(%1486, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1489 = subtract(%1487, %1488) /* ty=Tensor[(159882), float32] */;
  %1490 = cast(%1357, dtype="float32") /* ty=Tensor[(159882, 1), float32] */;
  %1491 = expand_dims(%1489, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1492 = take(%1486, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1493 = multiply(%1489, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1494 = add(%1492, %1493) /* ty=Tensor[(159882), float32] */;
  %1495 = multiply(%1490, %1491) /* ty=Tensor[(159882, 1), float32] */;
  %1496 = expand_dims(%1494, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1497 = strided_slice(%1354, begin=[0, 2], end=[159882, 4], strides=[1, 4], axes=None) /* ty=Tensor[(159882, 1), float16] */;
  %1498 = cast(1f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1499 = divide(%1497, %1498) /* ty=Tensor[(159882, 1), float16] */;
  %1500 = clip(%1499, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float16] */;
  %1501 = cast(%1500, dtype="float32") /* ty=Tensor[(159882, 1), float32] */;
  %1502 = exp(%1501) /* ty=Tensor[(159882, 1), float32] */;
  %1503 = expand_dims(%1489, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1504 = multiply(%1502, %1503) /* ty=Tensor[(159882, 1), float32] */;
  %1505 = add(%1495, %1496) /* ty=Tensor[(159882, 1), float32] */;
  %1506 = multiply(0.5f /* ty=float32 */, %1504) /* ty=Tensor[(159882, 1), float32] */;
  %1507 = strided_slice(%1354, begin=[0, 1], end=[159882, 4], strides=[1, 4], axes=None) /* ty=Tensor[(159882, 1), float16] */;
  %1508 = cast(1f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1509 = divide(%1507, %1508) /* ty=Tensor[(159882, 1), float16] */;
  %1510 = take(%1486, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1511 = take(%1486, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1512 = subtract(%1510, %1511) /* ty=Tensor[(159882), float32] */;
  %1513 = cast(%1509, dtype="float32") /* ty=Tensor[(159882, 1), float32] */;
  %1514 = expand_dims(%1512, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1515 = take(%1486, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1516 = multiply(%1512, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1517 = add(%1515, %1516) /* ty=Tensor[(159882), float32] */;
  %1518 = multiply(%1513, %1514) /* ty=Tensor[(159882, 1), float32] */;
  %1519 = expand_dims(%1517, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1520 = strided_slice(%1354, begin=[0, 3], end=[159882, 4], strides=[1, 4], axes=None) /* ty=Tensor[(159882, 1), float16] */;
  %1521 = cast(1f /* ty=float32 */, dtype="float16") /* ty=float16 */;
  %1522 = divide(%1520, %1521) /* ty=Tensor[(159882, 1), float16] */;
  %1523 = clip(%1522, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float16] */;
  %1524 = cast(%1523, dtype="float32") /* ty=Tensor[(159882, 1), float32] */;
  %1525 = exp(%1524) /* ty=Tensor[(159882, 1), float32] */;
  %1526 = expand_dims(%1512, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1527 = multiply(%1525, %1526) /* ty=Tensor[(159882, 1), float32] */;
  %1528 = add(%1518, %1519) /* ty=Tensor[(159882, 1), float32] */;
  %1529 = multiply(0.5f /* ty=float32 */, %1527) /* ty=Tensor[(159882, 1), float32] */;
  %1530 = subtract(%1505, %1506) /* ty=Tensor[(159882, 1), float32] */;
  %1531 = subtract(%1528, %1529) /* ty=Tensor[(159882, 1), float32] */;
  %1532 = add(%1505, %1506) /* ty=Tensor[(159882, 1), float32] */;
  %1533 = add(%1528, %1529) /* ty=Tensor[(159882, 1), float32] */;
  %1534 = (%1530, %1531, %1532, %1533);
  %1535 = stack(%1534, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1536 = reshape(%1535, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
  %1537 = squeeze(%1536, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
  %1538 = reshape(%1537, newshape=[159882, -1, 4]) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1539 = arange(0 /* ty=int64 */, 1 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64") /* ty=Tensor[(1), int64] */;
  %1540 = cast(%model.rpn.head.cls_logits.weight, dtype="float16") /* ty=Tensor[(3, 256, 1, 1), float16] */;
  %1541 = layout_transform(%1540, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 3), float16] */;
  %1542 = cast(%model.rpn.head.cls_logits.bias, dtype="float16") /* ty=Tensor[(3), float16] */;
  %1543 = expand_dims(%1542, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %1544 = expand_dims(%1543, axis=0) /* ty=Tensor[(1, 3, 1, 1), float16] */;
  %1545 = nn.conv2d(%1254, %1541, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 200, 200, 3), float16] */;
  %1546 = layout_transform(%1544, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float16] */;
  %1547 = add(%1545, %1546) /* ty=Tensor[(1, 200, 200, 3), float16] */;
  %1548 = layout_transform(%1547, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 200, 200), float16] */;
  %1549 = reshape(%1548, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float16] */;
  %1550 = transpose(%1549, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float16] */;
  %1551 = expand_dims(%1542, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %1552 = expand_dims(%1551, axis=0) /* ty=Tensor[(1, 3, 1, 1), float16] */;
  %1553 = nn.conv2d(%1278, %1541, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 100, 100, 3), float16] */;
  %1554 = layout_transform(%1552, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float16] */;
  %1555 = add(%1553, %1554) /* ty=Tensor[(1, 100, 100, 3), float16] */;
  %1556 = layout_transform(%1555, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 100, 100), float16] */;
  %1557 = reshape(%1556, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float16] */;
  %1558 = transpose(%1557, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float16] */;
  %1559 = expand_dims(%1542, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %1560 = expand_dims(%1559, axis=0) /* ty=Tensor[(1, 3, 1, 1), float16] */;
  %1561 = nn.conv2d(%1300, %1541, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 50, 50, 3), float16] */;
  %1562 = layout_transform(%1560, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float16] */;
  %1563 = add(%1561, %1562) /* ty=Tensor[(1, 50, 50, 3), float16] */;
  %1564 = layout_transform(%1563, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 50, 50), float16] */;
  %1565 = reshape(%1564, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float16] */;
  %1566 = transpose(%1565, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float16] */;
  %1567 = expand_dims(%1542, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %1568 = expand_dims(%1567, axis=0) /* ty=Tensor[(1, 3, 1, 1), float16] */;
  %1569 = nn.conv2d(%1322, %1541, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 25, 25, 3), float16] */;
  %1570 = layout_transform(%1568, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float16] */;
  %1571 = add(%1569, %1570) /* ty=Tensor[(1, 25, 25, 3), float16] */;
  %1572 = layout_transform(%1571, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 25, 25), float16] */;
  %1573 = reshape(%1572, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float16] */;
  %1574 = transpose(%1573, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float16] */;
  %1575 = expand_dims(%1542, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float16] */;
  %1576 = expand_dims(%1575, axis=0) /* ty=Tensor[(1, 3, 1, 1), float16] */;
  %1577 = nn.conv2d(%1337, %1541, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(1, 13, 13, 3), float16] */;
  %1578 = layout_transform(%1576, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float16] */;
  %1579 = add(%1577, %1578) /* ty=Tensor[(1, 13, 13, 3), float16] */;
  %1580 = layout_transform(%1579, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 13, 13), float16] */;
  %1581 = reshape(%1580, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float16] */;
  %1582 = transpose(%1581, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float16] */;
  %1583 = reshape(%1550, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float16] */;
  %1584 = reshape(%1558, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float16] */;
  %1585 = reshape(%1566, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float16] */;
  %1586 = reshape(%1574, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float16] */;
  %1587 = reshape(%1582, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float16] */;
  %1588 = (%1583, %1584, %1585, %1586, %1587);
  %1589 = concatenate(%1588, axis=1) /* ty=Tensor[(1, 159882, 1), float16] */;
  %1590 = reshape(%1589, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float16] */;
  %1591 = squeeze(%1590, axis=[1]) /* ty=Tensor[(159882, 1), float16] */;
  %1592 = reshape(%1591, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float16] */;
  %1593 = split(%1592, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float16], Tensor[(1, 30000), float16], Tensor[(1, 7500), float16], Tensor[(1, 1875), float16], Tensor[(1, 507), float16]) */;
  %1594 = %1593.0;
  %1595 = topk(%1594, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float16], Tensor[(1, 1000), int64]) */;
  %1596 = %1595.1;
  %1597 = %1593.1;
  %1598 = topk(%1597, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float16], Tensor[(1, 1000), int64]) */;
  %1599 = take(meta[relay.Constant][40] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1600 = expand_dims(%1599, axis=0) /* ty=Tensor[(1), int64] */;
  %1601 = %1598.1;
  %1602 = add(%1600, 0 /* ty=int64 */) /* ty=Tensor[(1), int64] */;
  %1603 = %1593.2;
  %1604 = topk(%1603, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float16], Tensor[(1, 1000), int64]) */;
  %1605 = take(meta[relay.Constant][41] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1606 = expand_dims(%1605, axis=0) /* ty=Tensor[(1), int64] */;
  %1607 = %1604.1;
  %1608 = add(%1602, %1606) /* ty=Tensor[(1), int64] */;
  %1609 = %1593.3;
  %1610 = topk(%1609, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float16], Tensor[(1, 1000), int64]) */;
  %1611 = take(meta[relay.Constant][42] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1612 = expand_dims(%1611, axis=0) /* ty=Tensor[(1), int64] */;
  %1613 = %1610.1;
  %1614 = add(%1608, %1612) /* ty=Tensor[(1), int64] */;
  %1615 = %1593.4;
  %1616 = topk(%1615, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float16], Tensor[(1, 507), int64]) */;
  %1617 = take(meta[relay.Constant][43] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1618 = expand_dims(%1617, axis=0) /* ty=Tensor[(1), int64] */;
  %1619 = %1616.1;
  %1620 = add(%1614, %1618) /* ty=Tensor[(1), int64] */;
  %1621 = add(%1596, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
  %1622 = add(%1601, %1602) /* ty=Tensor[(1, 1000), int64] */;
  %1623 = add(%1607, %1608) /* ty=Tensor[(1, 1000), int64] */;
  %1624 = add(%1613, %1614) /* ty=Tensor[(1, 1000), int64] */;
  %1625 = add(%1619, %1620) /* ty=Tensor[(1, 507), int64] */;
  %1626 = (%1621, %1622, %1623, %1624, %1625);
  %1627 = reshape(%1538, newshape=[1, -1, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
  %1628 = expand_dims(%1539, axis=1) /* ty=Tensor[(1, 1), int64] */;
  %1629 = concatenate(%1626, axis=1) /* ty=Tensor[(1, 4507), int64] */;
  %1630 = (%1627, %1628, %1629);
  %1631 = adv_index(%1630) /* ty=Tensor[(1, 4507, 4), float32] */;
  %1632 = split(%1631, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
  %1633 = %1632.0;
  %1634 = squeeze(%1633, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
  %1635 = strided_slice(%1634, begin=[0, 0], end=[4507, 4], strides=[1, 2], axes=None) /* ty=Tensor[(4507, 2), float32] */;
  %1636 = maximum(%1635, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1637 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1638 = strided_slice(%1634, begin=[0, 1], end=[4507, 4], strides=[1, 2], axes=None) /* ty=Tensor[(4507, 2), float32] */;
  %1639 = maximum(%1638, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1640 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1641 = minimum(%1636, %1637) /* ty=Tensor[(4507, 2), float32] */;
  %1642 = minimum(%1639, %1640) /* ty=Tensor[(4507, 2), float32] */;
  %1643 = (%1641, %1642);
  %1644 = stack(%1643, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
  %1645 = reshape(%1644, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */;
  %1646 = take(%1645, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1647 = take(%1645, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1648 = subtract(%1646, %1647) /* ty=Tensor[(4507), float32] */;
  %1649 = greater_equal(%1648, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1650 = take(%1645, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1651 = take(%1645, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1652 = subtract(%1650, %1651) /* ty=Tensor[(4507), float32] */;
  %1653 = greater_equal(%1652, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1654 = cast(%1649, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1655 = cast(%1653, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1656 = logical_and(%1654, %1655) /* ty=Tensor[(4507), bool] */;
  %1657 = argwhere(%1656) /* ty=Tensor[(?, 1), int32] */;
  %1658 = split(%1657, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1659 = %1658.0;
  %1660 = squeeze(%1659, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1661 = (%1645, %1660);
  %1662 = (%1592, %1628, %1629);
  %1663 = %1662.0;
  %1664 = cast(%1663, dtype="float32") /* ty=Tensor[(1, 159882), float32] */;
  %1665 = %1662.1;
  %1666 = %1662.2;
  %1667 = (%1664, %1665, %1666);
  %1668 = adv_index(%1667) /* ty=Tensor[(1, 4507), float32] */;
  %1669 = sigmoid(%1668) /* ty=Tensor[(1, 4507), float32] */;
  %1670 = split(%1669, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
  %1671 = %1670.0;
  %1672 = squeeze(%1671, axis=[0]) /* ty=Tensor[(4507), float32] */;
  %1673 = (%1672, %1660);
  %1674 = adv_index(%1673) /* ty=Tensor[(?), float32] */;
  %1675 = greater_equal(%1674, 0f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1676 = argwhere(%1675) /* ty=Tensor[(?, 1), int32] */;
  %1677 = split(%1676, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1678 = %1677.0;
  %1679 = adv_index(%1661) /* ty=Tensor[(?, 4), float32] */;
  %1680 = squeeze(%1678, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1681 = (%1679, %1680);
  %1682 = adv_index(%1681) /* ty=Tensor[(?, 4), float32] */;
  %1683 = ndarray_size(%1682, dtype="int32") /* ty=int32 */;
  %1684 = equal(%1683, 0 /* ty=int32 */) /* ty=bool */;
  %1734 = if (%1684) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1685 = full(0 /* ty=int32 */, shape=[120000], dtype="int64") /* ty=Tensor[(120000), int64] */;
    %1686 = full(1 /* ty=int32 */, shape=[30000], dtype="int64") /* ty=Tensor[(30000), int64] */;
    %1687 = full(2 /* ty=int32 */, shape=[7500], dtype="int64") /* ty=Tensor[(7500), int64] */;
    %1688 = full(3 /* ty=int32 */, shape=[1875], dtype="int64") /* ty=Tensor[(1875), int64] */;
    %1689 = full(4 /* ty=int32 */, shape=[507], dtype="int64") /* ty=Tensor[(507), int64] */;
    %1690 = (%1685, %1686, %1687, %1688, %1689);
    %1691 = concatenate(%1690) /* ty=Tensor[(159882), int64] */;
    %1692 = reshape(%1691, newshape=[1, -1]) /* ty=Tensor[(1, 159882), int64] */;
    %1693 = cast(%1592, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
    %1694 = broadcast_to_like(%1692, %1693) /* ty=Tensor[(1, 159882), int64] */;
    %1695 = (%1694, %1628, %1629);
    %1696 = adv_index(%1695) /* ty=Tensor[(1, 4507), int64] */;
    %1697 = split(%1696, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
    %1698 = %1697.0;
    %1699 = squeeze(%1698, axis=[0]) /* ty=Tensor[(4507), int64] */;
    %1700 = (%1699, %1660);
    %1701 = adv_index(%1700) /* ty=Tensor[(?), int64] */;
    %1702 = (%1701, %1680);
    %1703 = adv_index(%1702) /* ty=Tensor[(?), int64] */;
    %1704 = expand_dims(%1703, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %1705 = (%1674, %1680);
    %1706 = adv_index(%1705) /* ty=Tensor[(?), float32] */;
    %1707 = min(%1706) /* ty=float32 */;
    %1708 = subtract(%1706, %1707) /* ty=Tensor[(?), float32] */;
    %1709 = add(%1708, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1710 = cast(%1704, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %1711 = expand_dims(%1709, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1712 = (%1710, %1711, %1682);
    %1713 = concatenate(%1712, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %1714 = shape_of(%1709, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1715 = squeeze(%1714) /* ty=int32 */;
    %1716 = arange(0 /* ty=int32 */, %1715, 1 /* ty=int32 */, start=meta[relay.Constant][44], stop=meta[relay.Call][0], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1717 = expand_dims(%1713, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %1718 = expand_dims(%1716, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1719 = vision.non_max_suppression(%1717, %1714, %1718, -1 /* ty=int32 */, 0.7f /* ty=float32 */) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1720 = %1719.0;
    %1721 = cast_like(0 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1722 = squeeze(%1720, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1723 = shape_of(%1722, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1724 = cast_like(%1723, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1725 = slice_like(%1724, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, axes=None) /* ty=Tensor[(1), int32] */;
    %1726 = less(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1721) /* ty=Tensor[(1), bool] */;
    %1727 = add(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1725) /* ty=Tensor[(1), int32] */;
    %1728 = where(%1726, %1727, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1729 = greater_equal(%1728, %1725) /* ty=Tensor[(1), bool] */;
    %1730 = %1719.1;
    %1731 = where(%1729, %1725, %1728) /* ty=Tensor[(1), int32] */;
    %1732 = squeeze(%1730, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1733 = dyn.strided_slice(%1722, %1731, %1732, meta[relay.Constant][47] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size", axes=None) /* ty=Tensor[(?), int32] */;
    cast(%1733, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1735 = strided_slice(%1734, begin=[0], end=[1000], strides=[1], axes=None) /* ty=Tensor[(?), int64] */;
  %1736 = (%1682, %1735);
  %1737 = cast_like(0 /* ty=int32 */, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1738 = adv_index(%1736) /* ty=Tensor[(?, 4), float32] */;
  %1739 = shape_of(%1738, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1740 = cast_like(%1739, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1741 = slice_like(%1740, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %1742 = less(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1737) /* ty=Tensor[(2), bool] */;
  %1743 = add(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1741) /* ty=Tensor[(2), int32] */;
  %1744 = where(%1742, %1743, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1745 = greater_equal(%1744, %1741) /* ty=Tensor[(2), bool] */;
  %1746 = shape_of(%1738, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1747 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1748 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1749 = scatter(%1746, %1747, %1748) /* ty=Tensor[(2), int32] */;
  %1750 = where(%1745, %1741, %1744) /* ty=Tensor[(2), int32] */;
  %1751 = cast(%1749, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1752 = dyn.strided_slice(%1738, %1750, %1751, meta[relay.Constant][49] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %1753 = full_like(%1752, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1754 = (%1753,);
  %1755 = (%1738,);
  %1756 = concatenate(%1754) /* ty=Tensor[(?, ?), float32] */;
  %1757 = concatenate(%1755) /* ty=Tensor[(?, 4), float32] */;
  %1758 = (%1756, %1757);
  %1759 = take(%1738, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1760 = take(%1738, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1761 = take(%1738, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1762 = take(%1738, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1763 = subtract(%1759, %1760) /* ty=Tensor[(?), float32] */;
  %1764 = subtract(%1761, %1762) /* ty=Tensor[(?), float32] */;
  %1765 = multiply(%1763, %1764) /* ty=Tensor[(?), float32] */;
  %1766 = (%1765,);
  %1767 = concatenate(%1766) /* ty=Tensor[(?), float32] */;
  %1768 = sqrt(%1767) /* ty=Tensor[(?), float32] */;
  %1769 = divide(%1768, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1770 = log2(%1769) /* ty=Tensor[(?), float32] */;
  %1771 = add(%1770, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1772 = add(%1771, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1773 = floor(%1772) /* ty=Tensor[(?), float32] */;
  %1774 = clip(%1773, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1775 = cast(%1774, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1776 = subtract(%1775, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1777 = equal(%1776, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1778 = argwhere(%1777) /* ty=Tensor[(?, 1), int32] */;
  %1779 = split(%1778, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1780 = %1779.0;
  %1781 = concatenate(%1758, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1782 = squeeze(%1780, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1783 = (%1781, %1782);
  %1784 = cast(%1244, dtype="float32") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %1785 = adv_index(%1783) /* ty=Tensor[(?, ?), float32] */;
  %1786 = equal(%1776, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1787 = argwhere(%1786) /* ty=Tensor[(?, 1), int32] */;
  %1788 = split(%1787, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1789 = %1788.0;
  %1790 = squeeze(%1789, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1791 = (%1781, %1790);
  %1792 = cast(%1272, dtype="float32") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %1793 = adv_index(%1791) /* ty=Tensor[(?, ?), float32] */;
  %1794 = equal(%1776, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1795 = argwhere(%1794) /* ty=Tensor[(?, 1), int32] */;
  %1796 = split(%1795, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1797 = %1796.0;
  %1798 = squeeze(%1797, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1799 = (%1781, %1798);
  %1800 = cast(%1294, dtype="float32") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %1801 = adv_index(%1799) /* ty=Tensor[(?, ?), float32] */;
  %1802 = equal(%1776, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1803 = argwhere(%1802) /* ty=Tensor[(?, 1), int32] */;
  %1804 = split(%1803, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1805 = %1804.0;
  %1806 = squeeze(%1805, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1807 = (%1781, %1806);
  %1808 = cast(%1316, dtype="float32") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %1809 = adv_index(%1807) /* ty=Tensor[(?, ?), float32] */;
  %1810 = vision.roi_align(%1784, %1785, pooled_size=[7, 7], spatial_scale=0.25f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1811 = vision.roi_align(%1792, %1793, pooled_size=[7, 7], spatial_scale=0.125f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1812 = vision.roi_align(%1800, %1801, pooled_size=[7, 7], spatial_scale=0.0625f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1813 = vision.roi_align(%1808, %1809, pooled_size=[7, 7], spatial_scale=0.03125f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1814 = (%1810, %1811, %1812, %1813);
  %1815 = concatenate(%1814) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1816 = equal(%1776, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1817 = argwhere(%1816) /* ty=Tensor[(?, 1), int32] */;
  %1818 = split(%1817, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1819 = %1818.0;
  %1820 = squeeze(%1819, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1821 = equal(%1776, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1822 = argwhere(%1821) /* ty=Tensor[(?, 1), int32] */;
  %1823 = split(%1822, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1824 = %1823.0;
  %1825 = squeeze(%1824, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1826 = equal(%1776, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1827 = argwhere(%1826) /* ty=Tensor[(?, 1), int32] */;
  %1828 = split(%1827, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1829 = %1828.0;
  %1830 = squeeze(%1829, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1831 = equal(%1776, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1832 = argwhere(%1831) /* ty=Tensor[(?, 1), int32] */;
  %1833 = split(%1832, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1834 = %1833.0;
  %1835 = squeeze(%1834, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1836 = cast(%1820, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1837 = cast(%1825, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1838 = cast(%1830, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1839 = cast(%1835, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1840 = (%1836, %1837, %1838, %1839);
  %1841 = concatenate(%1840) /* ty=Tensor[(?), int64] */;
  %1842 = argsort(%1841, dtype="int32") /* ty=Tensor[(?), int32] */;
  %1843 = layout_transform(%1815, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1844 = cast(%1842, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1845 = take(%1843, %1844, axis=0) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1846 = reshape(%1845, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
  %1847 = squeeze(%1846, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */;
  %1848 = cast(%1847, dtype="float16") /* ty=Tensor[(?, 12544), float16] */;
  %1849 = cast(%model.roi_heads.box_head.fc6.weight, dtype="float16") /* ty=Tensor[(1024, 12544), float16] */;
  %1850 = cast(%model.roi_heads.box_head.fc6.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %1851 = nn.dense(%1848, %1849, units=None, out_dtype="float16") /* ty=Tensor[(?, 1024), float16] */;
  %1852 = expand_dims(%1850, axis=0) /* ty=Tensor[(1, 1024), float16] */;
  %1853 = add(%1851, %1852) /* ty=Tensor[(?, 1024), float16] */;
  %1854 = nn.relu(%1853) /* ty=Tensor[(?, 1024), float16] */;
  %1855 = cast(%model.roi_heads.box_head.fc7.weight, dtype="float16") /* ty=Tensor[(1024, 1024), float16] */;
  %1856 = cast(%model.roi_heads.box_head.fc7.bias, dtype="float16") /* ty=Tensor[(1024), float16] */;
  %1857 = nn.dense(%1854, %1855, units=None, out_dtype="float16") /* ty=Tensor[(?, 1024), float16] */;
  %1858 = expand_dims(%1856, axis=0) /* ty=Tensor[(1, 1024), float16] */;
  %1859 = add(%1857, %1858) /* ty=Tensor[(?, 1024), float16] */;
  %1860 = nn.relu(%1859) /* ty=Tensor[(?, 1024), float16] */;
  %1861 = reshape(%1860, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float16] */;
  %1862 = cast(%model.roi_heads.box_predictor.bbox_pred.weight, dtype="float16") /* ty=Tensor[(364, 1024), float16] */;
  %1863 = cast(%model.roi_heads.box_predictor.bbox_pred.bias, dtype="float16") /* ty=Tensor[(364), float16] */;
  %1864 = nn.dense(%1861, %1862, units=None, out_dtype="float16") /* ty=Tensor[(?, 364), float16] */;
  %1865 = expand_dims(%1863, axis=0) /* ty=Tensor[(1, 364), float16] */;
  %1866 = add(%1864, %1865) /* ty=Tensor[(?, 364), float16] */;
  %1867 = shape_of(%1738, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1868 = take(%1867, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1869 = add(%1868, 0 /* ty=int32 */) /* ty=int32 */;
  %1870 = cast(%1869, dtype="int64") /* ty=int64 */;
  %1871 = expand_dims(%1870, axis=0) /* ty=Tensor[(1), int64] */;
  %1872 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1873 = (%1871, %1872);
  %1874 = cast(%1866, dtype="float32") /* ty=Tensor[(?, 364), float32] */;
  %1875 = concatenate(%1873) /* ty=Tensor[(2), int64] */;
  %1876 = cast_like(0 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1877 = dyn.reshape(%1874, %1875, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1878 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1879 = cast_like(%1878, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1880 = slice_like(%1879, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %1881 = less(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1876) /* ty=Tensor[(2), bool] */;
  %1882 = add(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1880) /* ty=Tensor[(2), int32] */;
  %1883 = where(%1881, %1882, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1884 = greater_equal(%1883, %1880) /* ty=Tensor[(2), bool] */;
  %1885 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1886 = where(%1884, %1880, %1883) /* ty=Tensor[(2), int32] */;
  %1887 = cast(%1885, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1888 = dyn.strided_slice(%1877, %1886, %1887, meta[relay.Constant][51] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %1889 = (%1738,);
  %1890 = concatenate(%1889) /* ty=Tensor[(?, 4), float32] */;
  %1891 = take(%1890, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1892 = take(%1890, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1893 = subtract(%1891, %1892) /* ty=Tensor[(?), float32] */;
  %1894 = divide(%1888, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1895 = expand_dims(%1893, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1896 = take(%1890, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1897 = multiply(%1893, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1898 = add(%1896, %1897) /* ty=Tensor[(?), float32] */;
  %1899 = multiply(%1894, %1895) /* ty=Tensor[(?, ?), float32] */;
  %1900 = expand_dims(%1898, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1901 = cast_like(0 /* ty=int32 */, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1902 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1903 = cast_like(%1902, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1904 = slice_like(%1903, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %1905 = less(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1901) /* ty=Tensor[(2), bool] */;
  %1906 = add(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1904) /* ty=Tensor[(2), int32] */;
  %1907 = where(%1905, %1906, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1908 = greater_equal(%1907, %1904) /* ty=Tensor[(2), bool] */;
  %1909 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1910 = where(%1908, %1904, %1907) /* ty=Tensor[(2), int32] */;
  %1911 = cast(%1909, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1912 = dyn.strided_slice(%1877, %1910, %1911, meta[relay.Constant][53] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %1913 = divide(%1912, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1914 = clip(%1913, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1915 = exp(%1914) /* ty=Tensor[(?, ?), float32] */;
  %1916 = expand_dims(%1893, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1917 = multiply(%1915, %1916) /* ty=Tensor[(?, ?), float32] */;
  %1918 = add(%1899, %1900) /* ty=Tensor[(?, ?), float32] */;
  %1919 = multiply(0.5f /* ty=float32 */, %1917) /* ty=Tensor[(?, ?), float32] */;
  %1920 = cast_like(0 /* ty=int32 */, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1921 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1922 = cast_like(%1921, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1923 = slice_like(%1922, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %1924 = less(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1920) /* ty=Tensor[(2), bool] */;
  %1925 = add(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1923) /* ty=Tensor[(2), int32] */;
  %1926 = where(%1924, %1925, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1927 = greater_equal(%1926, %1923) /* ty=Tensor[(2), bool] */;
  %1928 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1929 = where(%1927, %1923, %1926) /* ty=Tensor[(2), int32] */;
  %1930 = cast(%1928, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1931 = dyn.strided_slice(%1877, %1929, %1930, meta[relay.Constant][55] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %1932 = take(%1890, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1933 = take(%1890, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1934 = subtract(%1932, %1933) /* ty=Tensor[(?), float32] */;
  %1935 = divide(%1931, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1936 = expand_dims(%1934, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1937 = take(%1890, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1938 = multiply(%1934, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1939 = add(%1937, %1938) /* ty=Tensor[(?), float32] */;
  %1940 = multiply(%1935, %1936) /* ty=Tensor[(?, ?), float32] */;
  %1941 = expand_dims(%1939, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1942 = cast_like(0 /* ty=int32 */, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1943 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1944 = cast_like(%1943, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1945 = slice_like(%1944, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %1946 = less(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1942) /* ty=Tensor[(2), bool] */;
  %1947 = add(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1945) /* ty=Tensor[(2), int32] */;
  %1948 = where(%1946, %1947, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1949 = greater_equal(%1948, %1945) /* ty=Tensor[(2), bool] */;
  %1950 = shape_of(%1877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1951 = where(%1949, %1945, %1948) /* ty=Tensor[(2), int32] */;
  %1952 = cast(%1950, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1953 = dyn.strided_slice(%1877, %1951, %1952, meta[relay.Constant][57] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %1954 = divide(%1953, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1955 = clip(%1954, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1956 = exp(%1955) /* ty=Tensor[(?, ?), float32] */;
  %1957 = expand_dims(%1934, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1958 = multiply(%1956, %1957) /* ty=Tensor[(?, ?), float32] */;
  %1959 = add(%1940, %1941) /* ty=Tensor[(?, ?), float32] */;
  %1960 = multiply(0.5f /* ty=float32 */, %1958) /* ty=Tensor[(?, ?), float32] */;
  %1961 = subtract(%1918, %1919) /* ty=Tensor[(?, ?), float32] */;
  %1962 = subtract(%1959, %1960) /* ty=Tensor[(?, ?), float32] */;
  %1963 = add(%1918, %1919) /* ty=Tensor[(?, ?), float32] */;
  %1964 = add(%1959, %1960) /* ty=Tensor[(?, ?), float32] */;
  %1965 = (%1961, %1962, %1963, %1964);
  %1966 = stack(%1965, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
  %1967 = reshape(%1966, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
  %1968 = cast(%1869, dtype="int64") /* ty=int64 */;
  %1969 = expand_dims(%1968, axis=0) /* ty=Tensor[(1), int64] */;
  %1970 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1971 = expand_dims(4 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1972 = (%1969, %1970, %1971);
  %1973 = squeeze(%1967, axis=[2]) /* ty=Tensor[(?, ?), float32] */;
  %1974 = concatenate(%1972) /* ty=Tensor[(3), int64] */;
  %1975 = cast_like(0 /* ty=int32 */, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1976 = dyn.reshape(%1973, %1974, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1977 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1978 = cast_like(%1977, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1979 = slice_like(%1978, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, axes=None) /* ty=Tensor[(3), int32] */;
  %1980 = less(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1975) /* ty=Tensor[(3), bool] */;
  %1981 = add(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1979) /* ty=Tensor[(3), int32] */;
  %1982 = where(%1980, %1981, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1983 = greater_equal(%1982, %1979) /* ty=Tensor[(3), bool] */;
  %1984 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1985 = where(%1983, %1979, %1982) /* ty=Tensor[(3), int32] */;
  %1986 = cast(%1984, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1987 = dyn.strided_slice(%1976, %1985, %1986, meta[relay.Constant][59] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1988 = maximum(%1987, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1989 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1990 = cast_like(0 /* ty=int32 */, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1991 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1992 = cast_like(%1991, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1993 = slice_like(%1992, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, axes=None) /* ty=Tensor[(3), int32] */;
  %1994 = less(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1990) /* ty=Tensor[(3), bool] */;
  %1995 = add(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1993) /* ty=Tensor[(3), int32] */;
  %1996 = where(%1994, %1995, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1997 = greater_equal(%1996, %1993) /* ty=Tensor[(3), bool] */;
  %1998 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1999 = where(%1997, %1993, %1996) /* ty=Tensor[(3), int32] */;
  %2000 = cast(%1998, dtype="int64") /* ty=Tensor[(3), int64] */;
  %2001 = dyn.strided_slice(%1976, %1999, %2000, meta[relay.Constant][61] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %2002 = maximum(%2001, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %2003 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2004 = minimum(%1988, %1989) /* ty=Tensor[(?, ?, ?), float32] */;
  %2005 = minimum(%2002, %2003) /* ty=Tensor[(?, ?, ?), float32] */;
  %2006 = (%2004, %2005);
  %2007 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2008 = take(%2007, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2009 = cast(%2008, dtype="int64") /* ty=int64 */;
  %2010 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2011 = take(%2010, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2012 = cast(%2011, dtype="int64") /* ty=int64 */;
  %2013 = shape_of(%1976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2014 = take(%2013, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2015 = cast(%2014, dtype="int64") /* ty=int64 */;
  %2016 = expand_dims(%2009, axis=0) /* ty=Tensor[(1), int64] */;
  %2017 = expand_dims(%2012, axis=0) /* ty=Tensor[(1), int64] */;
  %2018 = expand_dims(%2015, axis=0) /* ty=Tensor[(1), int64] */;
  %2019 = (%2016, %2017, %2018);
  %2020 = stack(%2006, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %2021 = concatenate(%2019) /* ty=Tensor[(3), int64] */;
  %2022 = cast_like(0 /* ty=int32 */, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %2023 = dyn.reshape(%2020, %2021, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %2024 = shape_of(%2023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2025 = cast_like(%2024, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2026 = slice_like(%2025, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, axes=None) /* ty=Tensor[(3), int32] */;
  %2027 = less(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %2022) /* ty=Tensor[(3), bool] */;
  %2028 = add(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %2026) /* ty=Tensor[(3), int32] */;
  %2029 = where(%2027, %2028, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2030 = greater_equal(%2029, %2026) /* ty=Tensor[(3), bool] */;
  %2031 = shape_of(%2023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2032 = where(%2030, %2026, %2029) /* ty=Tensor[(3), int32] */;
  %2033 = cast(%2031, dtype="int64") /* ty=Tensor[(3), int64] */;
  %2034 = dyn.strided_slice(%2023, %2032, %2033, meta[relay.Constant][63] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %2035 = cast(%model.roi_heads.box_predictor.cls_score.weight, dtype="float16") /* ty=Tensor[(91, 1024), float16] */;
  %2036 = cast(%model.roi_heads.box_predictor.cls_score.bias, dtype="float16") /* ty=Tensor[(91), float16] */;
  %2037 = nn.dense(%1861, %2035, units=None, out_dtype="float16") /* ty=Tensor[(?, 91), float16] */;
  %2038 = expand_dims(%2036, axis=0) /* ty=Tensor[(1, 91), float16] */;
  %2039 = add(%2037, %2038) /* ty=Tensor[(?, 91), float16] */;
  %2040 = cast(%2039, dtype="float32") /* ty=Tensor[(?, 91), float32] */;
  %2041 = cast_like(0 /* ty=int32 */, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2042 = nn.softmax(%2040) /* ty=Tensor[(?, 91), float32] */;
  %2043 = shape_of(%2042, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2044 = cast_like(%2043, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2045 = slice_like(%2044, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %2046 = less(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %2041) /* ty=Tensor[(2), bool] */;
  %2047 = add(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %2045) /* ty=Tensor[(2), int32] */;
  %2048 = where(%2046, %2047, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2049 = greater_equal(%2048, %2045) /* ty=Tensor[(2), bool] */;
  %2050 = shape_of(%2042, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2051 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2052 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2053 = scatter(%2050, %2051, %2052) /* ty=Tensor[(2), int32] */;
  %2054 = where(%2049, %2045, %2048) /* ty=Tensor[(2), int32] */;
  %2055 = cast(%2053, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2056 = dyn.strided_slice(%2042, %2054, %2055, meta[relay.Constant][65] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %2057 = reshape(%2056, newshape=[-1]) /* ty=Tensor[(?), float32] */;
  %2058 = greater(%2057, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %2059 = argwhere(%2058) /* ty=Tensor[(?, 1), int32] */;
  %2060 = split(%2059, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2061 = %2060.0;
  %2062 = reshape(%2034, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
  %2063 = squeeze(%2061, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2064 = (%2062, %2063);
  %2065 = adv_index(%2064) /* ty=Tensor[(?, 4), float32] */;
  %2066 = take(%2065, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2067 = take(%2065, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2068 = subtract(%2066, %2067) /* ty=Tensor[(?), float32] */;
  %2069 = greater_equal(%2068, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %2070 = take(%2065, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2071 = take(%2065, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2072 = subtract(%2070, %2071) /* ty=Tensor[(?), float32] */;
  %2073 = greater_equal(%2072, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %2074 = cast(%2069, dtype="bool") /* ty=Tensor[(?), bool] */;
  %2075 = cast(%2073, dtype="bool") /* ty=Tensor[(?), bool] */;
  %2076 = logical_and(%2074, %2075) /* ty=Tensor[(?), bool] */;
  %2077 = argwhere(%2076) /* ty=Tensor[(?, 1), int32] */;
  %2078 = split(%2077, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2079 = %2078.0;
  %2080 = squeeze(%2079, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2081 = (%2065, %2080);
  %2082 = adv_index(%2081) /* ty=Tensor[(?, 4), float32] */;
  %2083 = ndarray_size(%2082, dtype="int32") /* ty=int32 */;
  %2084 = equal(%2083, 0 /* ty=int32 */) /* ty=bool */;
  %2141 = if (%2084) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %2085 = arange(0 /* ty=int64 */, 91 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][66], stop=meta[relay.Constant][67], step=meta[relay.Constant][68], dtype="int64") /* ty=Tensor[(91), int64] */;
    %2086 = reshape(%2085, newshape=[1, -1]) /* ty=Tensor[(1, 91), int64] */;
    %2087 = cast(%2042, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    %2088 = cast_like(0 /* ty=int32 */, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
    %2089 = broadcast_to_like(%2086, %2087) /* ty=Tensor[(?, 91), int64] */;
    %2090 = shape_of(%2089, dtype="int32") /* ty=Tensor[(2), int32] */;
    %2091 = cast_like(%2090, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %2092 = slice_like(%2091, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
    %2093 = less(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %2088) /* ty=Tensor[(2), bool] */;
    %2094 = add(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %2092) /* ty=Tensor[(2), int32] */;
    %2095 = where(%2093, %2094, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %2096 = greater_equal(%2095, %2092) /* ty=Tensor[(2), bool] */;
    %2097 = shape_of(%2089, dtype="int32") /* ty=Tensor[(2), int32] */;
    %2098 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %2099 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %2100 = scatter(%2097, %2098, %2099) /* ty=Tensor[(2), int32] */;
    %2101 = where(%2096, %2092, %2095) /* ty=Tensor[(2), int32] */;
    %2102 = cast(%2100, dtype="int64") /* ty=Tensor[(2), int64] */;
    %2103 = dyn.strided_slice(%2089, %2101, %2102, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), int64] */;
    %2104 = reshape(%2103, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %2105 = (%2104, %2063);
    %2106 = adv_index(%2105) /* ty=Tensor[(?), int64] */;
    %2107 = (%2106, %2080);
    %2108 = adv_index(%2107) /* ty=Tensor[(?), int64] */;
    %2109 = expand_dims(%2108, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %2110 = (%2057, %2063);
    %2111 = adv_index(%2110) /* ty=Tensor[(?), float32] */;
    %2112 = (%2111, %2080);
    %2113 = adv_index(%2112) /* ty=Tensor[(?), float32] */;
    %2114 = min(%2113) /* ty=float32 */;
    %2115 = subtract(%2113, %2114) /* ty=Tensor[(?), float32] */;
    %2116 = add(%2115, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2117 = cast(%2109, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %2118 = expand_dims(%2116, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %2119 = (%2117, %2118, %2082);
    %2120 = concatenate(%2119, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %2121 = shape_of(%2116, dtype="int32") /* ty=Tensor[(1), int32] */;
    %2122 = squeeze(%2121) /* ty=int32 */;
    %2123 = arange(0 /* ty=int32 */, %2122, 1 /* ty=int32 */, start=meta[relay.Constant][71], stop=meta[relay.Call][1], step=meta[relay.Constant][72], dtype="int32") /* ty=Tensor[(?), int32] */;
    %2124 = expand_dims(%2120, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %2125 = expand_dims(%2123, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %2126 = vision.non_max_suppression(%2124, %2121, %2125, -1 /* ty=int32 */, 0.5f /* ty=float32 */) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %2127 = %2126.0;
    %2128 = cast_like(0 /* ty=int32 */, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %2129 = squeeze(%2127, axis=[0]) /* ty=Tensor[(?), int32] */;
    %2130 = shape_of(%2129, dtype="int32") /* ty=Tensor[(1), int32] */;
    %2131 = cast_like(%2130, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %2132 = slice_like(%2131, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, axes=None) /* ty=Tensor[(1), int32] */;
    %2133 = less(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %2128) /* ty=Tensor[(1), bool] */;
    %2134 = add(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %2132) /* ty=Tensor[(1), int32] */;
    %2135 = where(%2133, %2134, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %2136 = greater_equal(%2135, %2132) /* ty=Tensor[(1), bool] */;
    %2137 = %2126.1;
    %2138 = where(%2136, %2132, %2135) /* ty=Tensor[(1), int32] */;
    %2139 = squeeze(%2137, axis=[1]) /* ty=Tensor[(1), int32] */;
    %2140 = dyn.strided_slice(%2129, %2138, %2139, meta[relay.Constant][74] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size", axes=None) /* ty=Tensor[(?), int32] */;
    cast(%2140, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %2142 = strided_slice(%2141, begin=[0], end=[100], strides=[1], axes=None) /* ty=Tensor[(?), int64] */;
  %2143 = (%2082, %2142);
  %2144 = (%2113, %2142);
  %2145 = (%2108, %2142);
  %2146 = adv_index(%2143) /* ty=Tensor[(?, 4), float32] */;
  %2147 = take(%2146, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2148 = take(%2146, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2149 = take(%2146, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2150 = take(%2146, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2151 = subtract(%2147, %2148) /* ty=Tensor[(?), float32] */;
  %2152 = subtract(%2149, %2150) /* ty=Tensor[(?), float32] */;
  %2153 = multiply(%2151, %2152) /* ty=Tensor[(?), float32] */;
  %2154 = (%2153,);
  %2155 = concatenate(%2154) /* ty=Tensor[(?), float32] */;
  %2156 = sqrt(%2155) /* ty=Tensor[(?), float32] */;
  %2157 = divide(%2156, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2158 = log2(%2157) /* ty=Tensor[(?), float32] */;
  %2159 = add(%2158, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2160 = add(%2159, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2161 = floor(%2160) /* ty=Tensor[(?), float32] */;
  %2162 = clip(%2161, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %2163 = cast(%2162, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2164 = subtract(%2163, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %2165 = shape_of(%2164, dtype="int32") /* ty=Tensor[(1), int32] */;
  %2166 = take(%2165, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2167 = expand_dims(%2166, axis=0) /* ty=Tensor[(1), int32] */;
  %2168 = expand_dims(256 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2169 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2170 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2171 = cast(%2167, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2172 = cast(%2168, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2173 = cast(%2169, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2174 = cast(%2170, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2175 = (%2171, %2172, %2173, %2174);
  %2176 = concatenate(%2175) /* ty=Tensor[(4), int64] */;
  %2177 = dyn.full(0 /* ty=int32 */, %2176, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %2178 = equal(%2164, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2179 = argwhere(%2178) /* ty=Tensor[(?, 1), int32] */;
  %2180 = split(%2179, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2181 = %2180.0;
  %2182 = squeeze(%2181, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2183 = reshape(%2182, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2184 = repeat(%2183, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2185 = repeat(%2184, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2186 = cast_like(0 /* ty=int32 */, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2187 = shape_of(%2146, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2188 = cast_like(%2187, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2189 = slice_like(%2188, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, axes=None) /* ty=Tensor[(2), int32] */;
  %2190 = less(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %2186) /* ty=Tensor[(2), bool] */;
  %2191 = add(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %2189) /* ty=Tensor[(2), int32] */;
  %2192 = where(%2190, %2191, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2193 = greater_equal(%2192, %2189) /* ty=Tensor[(2), bool] */;
  %2194 = shape_of(%2146, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2195 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2196 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2197 = scatter(%2194, %2195, %2196) /* ty=Tensor[(2), int32] */;
  %2198 = where(%2193, %2189, %2192) /* ty=Tensor[(2), int32] */;
  %2199 = cast(%2197, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2200 = dyn.strided_slice(%2146, %2198, %2199, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None, axes=None) /* ty=Tensor[(?, ?), float32] */;
  %2201 = full_like(%2200, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %2202 = (%2201,);
  %2203 = (%2146,);
  %2204 = concatenate(%2202) /* ty=Tensor[(?, ?), float32] */;
  %2205 = concatenate(%2203) /* ty=Tensor[(?, 4), float32] */;
  %2206 = (%2204, %2205);
  %2207 = equal(%2164, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2208 = argwhere(%2207) /* ty=Tensor[(?, 1), int32] */;
  %2209 = split(%2208, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2210 = %2209.0;
  %2211 = concatenate(%2206, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %2212 = squeeze(%2210, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2213 = (%2211, %2212);
  %2214 = adv_index(%2213) /* ty=Tensor[(?, ?), float32] */;
  %2215 = vision.roi_align(%1784, %2214, pooled_size=[14, 14], spatial_scale=0.25f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2216 = reshape(%2177, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2217 = repeat(%2185, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2218 = layout_transform(%2215, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2219 = equal(%2164, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2220 = argwhere(%2219) /* ty=Tensor[(?, 1), int32] */;
  %2221 = split(%2220, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2222 = %2221.0;
  %2223 = squeeze(%2222, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2224 = reshape(%2223, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2225 = repeat(%2224, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2226 = repeat(%2225, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2227 = equal(%2164, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2228 = argwhere(%2227) /* ty=Tensor[(?, 1), int32] */;
  %2229 = split(%2228, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2230 = %2229.0;
  %2231 = squeeze(%2230, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2232 = (%2211, %2231);
  %2233 = adv_index(%2232) /* ty=Tensor[(?, ?), float32] */;
  %2234 = vision.roi_align(%1792, %2233, pooled_size=[14, 14], spatial_scale=0.125f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2235 = scatter(%2216, %2217, %2218) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2236 = repeat(%2226, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2237 = layout_transform(%2234, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2238 = equal(%2164, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2239 = argwhere(%2238) /* ty=Tensor[(?, 1), int32] */;
  %2240 = split(%2239, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2241 = %2240.0;
  %2242 = squeeze(%2241, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2243 = reshape(%2242, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2244 = repeat(%2243, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2245 = repeat(%2244, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2246 = equal(%2164, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2247 = argwhere(%2246) /* ty=Tensor[(?, 1), int32] */;
  %2248 = split(%2247, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2249 = %2248.0;
  %2250 = squeeze(%2249, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2251 = (%2211, %2250);
  %2252 = adv_index(%2251) /* ty=Tensor[(?, ?), float32] */;
  %2253 = vision.roi_align(%1800, %2252, pooled_size=[14, 14], spatial_scale=0.0625f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2254 = scatter(%2235, %2236, %2237) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2255 = repeat(%2245, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2256 = layout_transform(%2253, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2257 = equal(%2164, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2258 = argwhere(%2257) /* ty=Tensor[(?, 1), int32] */;
  %2259 = split(%2258, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2260 = %2259.0;
  %2261 = squeeze(%2260, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2262 = reshape(%2261, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2263 = repeat(%2262, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2264 = repeat(%2263, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2265 = equal(%2164, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2266 = argwhere(%2265) /* ty=Tensor[(?, 1), int32] */;
  %2267 = split(%2266, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2268 = %2267.0;
  %2269 = squeeze(%2268, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2270 = (%2211, %2269);
  %2271 = adv_index(%2270) /* ty=Tensor[(?, ?), float32] */;
  %2272 = vision.roi_align(%1808, %2271, pooled_size=[14, 14], spatial_scale=0.03125f, sample_ratio=2, layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2273 = scatter(%2254, %2255, %2256) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2274 = repeat(%2264, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2275 = layout_transform(%2272, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2276 = scatter(%2273, %2274, %2275) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2277 = layout_transform(%2276, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2278 = cast(%model.roi_heads.mask_head.mask_fcn1.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %2279 = cast(%2277, dtype="float16") /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2280 = layout_transform(%2278, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %2281 = cast(%model.roi_heads.mask_head.mask_fcn1.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %2282 = expand_dims(%2281, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %2283 = expand_dims(%2282, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %2284 = nn.conv2d(%2279, %2280, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2285 = layout_transform(%2283, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %2286 = add(%2284, %2285) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2287 = cast(%model.roi_heads.mask_head.mask_fcn2.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %2288 = nn.relu(%2286) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2289 = layout_transform(%2287, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %2290 = cast(%model.roi_heads.mask_head.mask_fcn2.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %2291 = expand_dims(%2290, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %2292 = expand_dims(%2291, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %2293 = nn.conv2d(%2288, %2289, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2294 = layout_transform(%2292, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %2295 = add(%2293, %2294) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2296 = cast(%model.roi_heads.mask_head.mask_fcn3.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %2297 = nn.relu(%2295) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2298 = layout_transform(%2296, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %2299 = cast(%model.roi_heads.mask_head.mask_fcn3.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %2300 = expand_dims(%2299, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %2301 = expand_dims(%2300, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %2302 = nn.conv2d(%2297, %2298, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2303 = layout_transform(%2301, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %2304 = add(%2302, %2303) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2305 = cast(%model.roi_heads.mask_head.mask_fcn4.weight, dtype="float16") /* ty=Tensor[(256, 256, 3, 3), float16] */;
  %2306 = nn.relu(%2304) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2307 = layout_transform(%2305, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float16] */;
  %2308 = cast(%model.roi_heads.mask_head.mask_fcn4.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %2309 = expand_dims(%2308, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %2310 = expand_dims(%2309, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %2311 = nn.conv2d(%2306, %2307, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2312 = layout_transform(%2310, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float16] */;
  %2313 = add(%2311, %2312) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2314 = nn.relu(%2313) /* ty=Tensor[(?, 14, 14, 256), float16] */;
  %2315 = layout_transform(%2314, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float16] */;
  %2316 = cast(%model.roi_heads.mask_predictor.conv5_mask.weight, dtype="float16") /* ty=Tensor[(256, 256, 2, 2), float16] */;
  %2317 = cast(%model.roi_heads.mask_predictor.conv5_mask.bias, dtype="float16") /* ty=Tensor[(256), float16] */;
  %2318 = expand_dims(%2317, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float16] */;
  %2319 = nn.conv2d_transpose(%2315, %2316, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], kernel_layout="IOHW", out_dtype="float16") /* ty=Tensor[(?, 256, 28, 28), float16] */;
  %2320 = expand_dims(%2318, axis=0) /* ty=Tensor[(1, 256, 1, 1), float16] */;
  %2321 = add(%2319, %2320) /* ty=Tensor[(?, 256, 28, 28), float16] */;
  %2322 = nn.relu(%2321) /* ty=Tensor[(?, 256, 28, 28), float16] */;
  %2323 = cast(%model.roi_heads.mask_predictor.mask_fcn_logits.weight, dtype="float16") /* ty=Tensor[(91, 256, 1, 1), float16] */;
  %2324 = layout_transform(%2322, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 28, 28, 256), float16] */;
  %2325 = layout_transform(%2323, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 91), float16] */;
  %2326 = cast(%model.roi_heads.mask_predictor.mask_fcn_logits.bias, dtype="float16") /* ty=Tensor[(91), float16] */;
  %2327 = expand_dims(%2326, axis=1, num_newaxis=2) /* ty=Tensor[(91, 1, 1), float16] */;
  %2328 = expand_dims(%2327, axis=0) /* ty=Tensor[(1, 91, 1, 1), float16] */;
  %2329 = nn.conv2d(%2324, %2325, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO", out_dtype="float16") /* ty=Tensor[(?, 28, 28, 91), float16] */;
  %2330 = layout_transform(%2328, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 91), float16] */;
  %2331 = add(%2329, %2330) /* ty=Tensor[(?, 28, 28, 91), float16] */;
  %2332 = sigmoid(%2331) /* ty=Tensor[(?, 28, 28, 91), float16] */;
  %2333 = layout_transform(%2331, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float16] */;
  %2334 = shape_of(%2333, dtype="int32") /* ty=Tensor[(4), int32] */;
  %2335 = take(%2334, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2336 = cast(%2335, dtype="int64") /* ty=int64 */;
  %2337 = adv_index(%2145) /* ty=Tensor[(?), int64] */;
  %2338 = (%2337,);
  %2339 = layout_transform(%2332, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float16] */;
  %2340 = arange(0 /* ty=int64 */, %2336, 1 /* ty=int64 */, start=meta[relay.Constant][77], stop=meta[relay.Call][2], step=meta[relay.Constant][78], dtype="int64") /* ty=Tensor[(?), int64] */;
  %2341 = concatenate(%2338) /* ty=Tensor[(?), int64] */;
  %2342 = (%2339, %2340, %2341);
  %2343 = %2342.0;
  %2344 = cast(%2343, dtype="float32") /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %2345 = %2342.1;
  %2346 = %2342.2;
  %2347 = (%2344, %2345, %2346);
  %2348 = adv_index(%2347) /* ty=Tensor[(?, 28, 28), float32] */;
  %2349 = adv_index(%2144) /* ty=Tensor[(?), float32] */;
  %2350 = expand_dims(%2348, axis=1) /* ty=Tensor[(?, 1, 28, 28), float32] */;
  (%2146, %2349, %2337, %2350)
}


