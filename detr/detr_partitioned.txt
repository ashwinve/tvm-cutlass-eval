type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%input: Tensor[(8, 3, 750, 800), float32]) -> (Tensor[(8, 100, 92), float16], Tensor[(8, 100, 4), float16]) {
  %0 = cast(%input, dtype="float16") /* ty=Tensor[(8, 3, 750, 800), float16] */;
  %1 = split(%0, indices_or_sections=8) /* ty=(Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16], Tensor[(1, 3, 750, 800), float16]) */;
  %2 = %1.0;
  %3 = squeeze(%2, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %4 = take(%3, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %5 = zeros_like(%4) /* ty=Tensor[(750, 800), float16] */;
  %6 = %1.1;
  %7 = squeeze(%6, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %8 = take(%7, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %9 = zeros_like(%8) /* ty=Tensor[(750, 800), float16] */;
  %10 = %1.2;
  %11 = squeeze(%10, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %12 = take(%11, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %13 = zeros_like(%12) /* ty=Tensor[(750, 800), float16] */;
  %14 = %1.3;
  %15 = squeeze(%14, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %16 = take(%15, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %17 = zeros_like(%16) /* ty=Tensor[(750, 800), float16] */;
  %18 = %1.4;
  %19 = squeeze(%18, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %20 = take(%19, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %21 = zeros_like(%20) /* ty=Tensor[(750, 800), float16] */;
  %22 = %1.5;
  %23 = squeeze(%22, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %24 = take(%23, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %25 = zeros_like(%24) /* ty=Tensor[(750, 800), float16] */;
  %26 = %1.6;
  %27 = squeeze(%26, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %28 = take(%27, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %29 = zeros_like(%28) /* ty=Tensor[(750, 800), float16] */;
  %30 = %1.7;
  %31 = squeeze(%30, axis=[0]) /* ty=Tensor[(3, 750, 800), float16] */;
  %32 = take(%31, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(750, 800), float16] */;
  %33 = zeros_like(%32) /* ty=Tensor[(750, 800), float16] */;
  %34 = cast(%5, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %35 = cast(%9, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %36 = cast(%13, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %37 = cast(%17, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %38 = cast(%21, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %39 = cast(%25, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %40 = cast(%29, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %41 = cast(%33, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %42 = (%34, %35, %36, %37, %38, %39, %40, %41);
  %43 = stack(%42) /* ty=Tensor[(8, 750, 800), int32] */;
  %44 = expand_dims(%43, axis=0) /* ty=Tensor[(1, 8, 750, 800), int32] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(1, 8, 750, 800), float32] */;
  %46 = image.resize2d(%45, size=[24, 25], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="", cubic_alpha=-0.75f) /* ty=Tensor[(1, 8, 24, 25), float32] */;
  %47 = take(%46, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(8, 24, 25), float32] */;
  %48 = reshape(%47, newshape=[0, -1, 1]) /* ty=Tensor[(8, 600, 1), float32] */;
  %49 = squeeze(%48, axis=[2]) /* ty=Tensor[(8, 600), float32] */;
  %50 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %51 = (%3, %7, %11, %15, %19, %23, %27, %31);
  %52 = stack(%51) /* ty=Tensor[(8, 3, 750, 800), float16] */;
  %53 = layout_transform(%52, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(8, 750, 800, 3), float16] */;
  %54 = @tvmgen_default_cutlass_main_1(%53, meta[relay.Constant][2] /* ty=Tensor[(64, 7, 7, 3), float16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 375, 400, 64), float16] */;
  %55 = nn.max_pool2d(%54, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %56 = @tvmgen_default_cutlass_main_4(%55, meta[relay.Constant][4] /* ty=Tensor[(64, 1, 1, 64), float16] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %57 = @tvmgen_default_cutlass_main_7(%56, meta[relay.Constant][6] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][7] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %58 = @tvmgen_default_cutlass_main_10(%57, meta[relay.Constant][8] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %59 = @tvmgen_default_cutlass_main_13(%55, meta[relay.Constant][10] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %60 = add(%58, %59) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %61 = nn.relu(%60) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %62 = @tvmgen_default_cutlass_main_16(%61, meta[relay.Constant][12] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][13] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %63 = @tvmgen_default_cutlass_main_19(%62, meta[relay.Constant][14] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %64 = @tvmgen_default_cutlass_main_22(%63, meta[relay.Constant][16] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %65 = add(%64, %61) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %66 = nn.relu(%65) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %67 = @tvmgen_default_cutlass_main_25(%66, meta[relay.Constant][18] /* ty=Tensor[(64, 1, 1, 256), float16] */, meta[relay.Constant][19] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %68 = @tvmgen_default_cutlass_main_28(%67, meta[relay.Constant][20] /* ty=Tensor[(64, 3, 3, 64), float16] */, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 1, 64), float16] */) /* ty=Tensor[(8, 188, 200, 64), float16] */;
  %69 = @tvmgen_default_cutlass_main_31(%68, meta[relay.Constant][22] /* ty=Tensor[(256, 1, 1, 64), float16] */, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %70 = add(%69, %66) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %71 = nn.relu(%70) /* ty=Tensor[(8, 188, 200, 256), float16] */;
  %72 = @tvmgen_default_cutlass_main_34(%71, meta[relay.Constant][24] /* ty=Tensor[(128, 1, 1, 256), float16] */, meta[relay.Constant][25] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 188, 200, 128), float16] */;
  %73 = @tvmgen_default_cutlass_main_37(%72, meta[relay.Constant][26] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %74 = @tvmgen_default_cutlass_main_40(%73, meta[relay.Constant][28] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %75 = @tvmgen_default_cutlass_main_43(%71, meta[relay.Constant][30] /* ty=Tensor[(512, 1, 1, 256), float16] */, meta[relay.Constant][31] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %76 = add(%74, %75) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %77 = nn.relu(%76) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %78 = @tvmgen_default_cutlass_main_46(%77, meta[relay.Constant][32] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %79 = @tvmgen_default_cutlass_main_49(%78, meta[relay.Constant][34] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %80 = @tvmgen_default_cutlass_main_52(%79, meta[relay.Constant][36] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][37] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %81 = add(%80, %77) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %82 = nn.relu(%81) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %83 = @tvmgen_default_cutlass_main_55(%82, meta[relay.Constant][38] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %84 = @tvmgen_default_cutlass_main_58(%83, meta[relay.Constant][40] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %85 = @tvmgen_default_cutlass_main_61(%84, meta[relay.Constant][42] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][43] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %86 = add(%85, %82) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %87 = nn.relu(%86) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %88 = @tvmgen_default_cutlass_main_64(%87, meta[relay.Constant][44] /* ty=Tensor[(128, 1, 1, 512), float16] */, meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %89 = @tvmgen_default_cutlass_main_67(%88, meta[relay.Constant][46] /* ty=Tensor[(128, 3, 3, 128), float16] */, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 94, 100, 128), float16] */;
  %90 = @tvmgen_default_cutlass_main_70(%89, meta[relay.Constant][48] /* ty=Tensor[(512, 1, 1, 128), float16] */, meta[relay.Constant][49] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %91 = add(%90, %87) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %92 = nn.relu(%91) /* ty=Tensor[(8, 94, 100, 512), float16] */;
  %93 = @tvmgen_default_cutlass_main_73(%92, meta[relay.Constant][50] /* ty=Tensor[(256, 1, 1, 512), float16] */, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 94, 100, 256), float16] */;
  %94 = @tvmgen_default_cutlass_main_76(%93, meta[relay.Constant][52] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %95 = @tvmgen_default_cutlass_main_79(%94, meta[relay.Constant][54] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][55] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %96 = @tvmgen_default_cutlass_main_82(%92, meta[relay.Constant][56] /* ty=Tensor[(1024, 1, 1, 512), float16] */, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %97 = add(%95, %96) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %98 = nn.relu(%97) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %99 = @tvmgen_default_cutlass_main_85(%98, meta[relay.Constant][58] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %100 = @tvmgen_default_cutlass_main_88(%99, meta[relay.Constant][60] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][61] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %101 = @tvmgen_default_cutlass_main_91(%100, meta[relay.Constant][62] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %102 = add(%101, %98) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %103 = nn.relu(%102) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %104 = @tvmgen_default_cutlass_main_94(%103, meta[relay.Constant][64] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %105 = @tvmgen_default_cutlass_main_97(%104, meta[relay.Constant][66] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][67] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %106 = @tvmgen_default_cutlass_main_100(%105, meta[relay.Constant][68] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %107 = add(%106, %103) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %108 = nn.relu(%107) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %109 = @tvmgen_default_cutlass_main_103(%108, meta[relay.Constant][70] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %110 = @tvmgen_default_cutlass_main_106(%109, meta[relay.Constant][72] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][73] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %111 = @tvmgen_default_cutlass_main_109(%110, meta[relay.Constant][74] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %112 = add(%111, %108) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %113 = nn.relu(%112) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %114 = @tvmgen_default_cutlass_main_112(%113, meta[relay.Constant][76] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %115 = @tvmgen_default_cutlass_main_115(%114, meta[relay.Constant][78] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][79] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %116 = @tvmgen_default_cutlass_main_118(%115, meta[relay.Constant][80] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %117 = add(%116, %113) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %118 = nn.relu(%117) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %119 = @tvmgen_default_cutlass_main_121(%118, meta[relay.Constant][82] /* ty=Tensor[(256, 1, 1, 1024), float16] */, meta[relay.Constant][83] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %120 = @tvmgen_default_cutlass_main_124(%119, meta[relay.Constant][84] /* ty=Tensor[(256, 3, 3, 256), float16] */, meta[relay.Constant][85] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 47, 50, 256), float16] */;
  %121 = @tvmgen_default_cutlass_main_127(%120, meta[relay.Constant][86] /* ty=Tensor[(1024, 1, 1, 256), float16] */, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 1, 1024), float16] */) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %122 = add(%121, %118) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %123 = nn.relu(%122) /* ty=Tensor[(8, 47, 50, 1024), float16] */;
  %124 = @tvmgen_default_cutlass_main_130(%123, meta[relay.Constant][88] /* ty=Tensor[(512, 1, 1, 1024), float16] */, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 47, 50, 512), float16] */;
  %125 = @tvmgen_default_cutlass_main_133(%124, meta[relay.Constant][90] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][91] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 24, 25, 512), float16] */;
  %126 = @tvmgen_default_cutlass_main_136(%125, meta[relay.Constant][92] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %127 = @tvmgen_default_cutlass_main_139(%123, meta[relay.Constant][94] /* ty=Tensor[(2048, 1, 1, 1024), float16] */, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %128 = add(%126, %127) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %129 = nn.relu(%128) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %130 = @tvmgen_default_cutlass_main_142(%129, meta[relay.Constant][96] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][97] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 24, 25, 512), float16] */;
  %131 = @tvmgen_default_cutlass_main_145(%130, meta[relay.Constant][98] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 24, 25, 512), float16] */;
  %132 = @tvmgen_default_cutlass_main_148(%131, meta[relay.Constant][100] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][101] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %133 = add(%132, %129) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %134 = nn.relu(%133) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %135 = @tvmgen_default_cutlass_main_151(%134, meta[relay.Constant][102] /* ty=Tensor[(512, 1, 1, 2048), float16] */, meta[relay.Constant][103] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 24, 25, 512), float16] */;
  %136 = @tvmgen_default_cutlass_main_154(%135, meta[relay.Constant][104] /* ty=Tensor[(512, 3, 3, 512), float16] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 24, 25, 512), float16] */;
  %137 = @tvmgen_default_cutlass_main_157(%136, meta[relay.Constant][106] /* ty=Tensor[(2048, 1, 1, 512), float16] */, meta[relay.Constant][107] /* ty=Tensor[(1, 1, 1, 2048), float16] */) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %138 = add(%137, %134) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %139 = nn.relu(%138) /* ty=Tensor[(8, 24, 25, 2048), float16] */;
  %140 = @tvmgen_default_cutlass_main_160(%139, meta[relay.Constant][108] /* ty=Tensor[(256, 1, 1, 2048), float16] */, meta[relay.Constant][109] /* ty=Tensor[(1, 1, 1, 256), float16] */) /* ty=Tensor[(8, 24, 25, 256), float16] */;
  %141 = layout_transform(%140, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(8, 256, 24, 25), float16] */;
  %142 = reshape(%141, newshape=[0, 0, -1, 1]) /* ty=Tensor[(8, 256, 600, 1), float16] */;
  %143 = squeeze(%142, axis=[3]) /* ty=Tensor[(8, 256, 600), float16] */;
  %144 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %145 = transpose(%143, axes=[2, 0, 1]) /* ty=Tensor[(600, 8, 256), float16] */;
  %146 = cast(%47, dtype="bool") /* ty=Tensor[(8, 24, 25), bool] */;
  %147 = logical_not(%146) /* ty=Tensor[(8, 24, 25), bool] */;
  %148 = cumsum(%147, axis=1, dtype="float32", exclusive=None) /* ty=Tensor[(8, 24, 25), float32] */;
  %149 = strided_slice(%148, begin=[0, -1, 0], end=[8, 24, 25], strides=[1, 1, 1], axes=None) /* ty=Tensor[(8, 1, 25), float32] */;
  %150 = add(%149, 1e-06f /* ty=float32 */) /* ty=Tensor[(8, 1, 25), float32] */;
  %151 = divide(%148, %150) /* ty=Tensor[(8, 24, 25), float32] */;
  %152 = multiply(%151, 6.28319f /* ty=float32 */) /* ty=Tensor[(8, 24, 25), float32] */;
  %153 = expand_dims(%152, axis=3) /* ty=Tensor[(8, 24, 25, 1), float32] */;
  %154 = divide(%153, meta[relay.Constant][110] /* ty=Tensor[(128), float32] */) /* ty=Tensor[(8, 24, 25, 128), float32] */;
  %155 = strided_slice(%154, begin=[0, 0, 0, 0], end=[8, 24, 25, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %156 = strided_slice(%154, begin=[0, 0, 0, 1], end=[8, 24, 25, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %157 = sin(%155) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %158 = cos(%156) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %159 = (%157, %158);
  %160 = stack(%159, axis=4) /* ty=Tensor[(8, 24, 25, 64, 2), float32] */;
  %161 = reshape(%160, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(8, 24, 25, 128, 1), float32] */;
  %162 = cumsum(%147, axis=2, dtype="float32", exclusive=None) /* ty=Tensor[(8, 24, 25), float32] */;
  %163 = strided_slice(%162, begin=[0, 0, -1], end=[8, 24, 25], strides=[1, 1, 1], axes=None) /* ty=Tensor[(8, 24, 1), float32] */;
  %164 = add(%163, 1e-06f /* ty=float32 */) /* ty=Tensor[(8, 24, 1), float32] */;
  %165 = divide(%162, %164) /* ty=Tensor[(8, 24, 25), float32] */;
  %166 = multiply(%165, 6.28319f /* ty=float32 */) /* ty=Tensor[(8, 24, 25), float32] */;
  %167 = expand_dims(%166, axis=3) /* ty=Tensor[(8, 24, 25, 1), float32] */;
  %168 = divide(%167, meta[relay.Constant][110] /* ty=Tensor[(128), float32] */) /* ty=Tensor[(8, 24, 25, 128), float32] */;
  %169 = strided_slice(%168, begin=[0, 0, 0, 0], end=[8, 24, 25, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %170 = strided_slice(%168, begin=[0, 0, 0, 1], end=[8, 24, 25, 128], strides=[1, 1, 1, 2], axes=None) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %171 = sin(%169) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %172 = cos(%170) /* ty=Tensor[(8, 24, 25, 64), float32] */;
  %173 = (%171, %172);
  %174 = stack(%173, axis=4) /* ty=Tensor[(8, 24, 25, 64, 2), float32] */;
  %175 = reshape(%174, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(8, 24, 25, 128, 1), float32] */;
  %176 = squeeze(%161, axis=[4]) /* ty=Tensor[(8, 24, 25, 128), float32] */;
  %177 = squeeze(%175, axis=[4]) /* ty=Tensor[(8, 24, 25, 128), float32] */;
  %178 = (%176, %177);
  %179 = concatenate(%178, axis=3) /* ty=Tensor[(8, 24, 25, 256), float32] */;
  %180 = transpose(%179, axes=[0, 3, 1, 2]) /* ty=Tensor[(8, 256, 24, 25), float32] */;
  %181 = reshape(%180, newshape=[0, 0, -1, 1]) /* ty=Tensor[(8, 256, 600, 1), float32] */;
  %182 = squeeze(%181, axis=[3]) /* ty=Tensor[(8, 256, 600), float32] */;
  %183 = cast(%145, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %184 = transpose(%182, axes=[2, 0, 1]) /* ty=Tensor[(600, 8, 256), float32] */;
  %185 = add(%183, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %186 = reshape(%185, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %187 = cast(%186, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %188 = @tvmgen_default_cutlass_main_163(%187, meta[relay.Constant][111] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %189 = reshape(%188, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %190 = add(%189, meta[relay.Constant][112] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %191 = multiply(%190, meta[relay.Constant][113] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %192 = reshape(%191, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %193 = reshape(%185, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %194 = cast(%193, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %195 = @tvmgen_default_cutlass_main_166(%194, meta[relay.Constant][114] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %196 = reshape(%195, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %197 = add(%196, meta[relay.Constant][115] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %198 = reshape(%197, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %199 = transpose(%198, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %200 = transpose(%199, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %201 = transpose(%192, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %202 = transpose(%200, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %203 = @tvmgen_default_cutlass_main_165(%201, %202) /* ty=Tensor[(64, 600, 600), float16] */;
  %204 = reshape(%203, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %205 = expand_dims(%144, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %206 = cast(%204, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %207 = where(%205, -inff /* ty=float32 */, %206) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %208 = reshape(%207, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %209 = nn.softmax(%208) /* ty=Tensor[(64, 600, 600), float32] */;
  %210 = reshape(%145, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %211 = @tvmgen_default_cutlass_main_170(%210, meta[relay.Constant][116] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %212 = reshape(%211, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %213 = add(%212, meta[relay.Constant][117] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %214 = reshape(%213, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %215 = transpose(%214, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %216 = cast(%209, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %217 = transpose(%215, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %218 = @tvmgen_default_cutlass_main_169(%216, %217) /* ty=Tensor[(64, 600, 32), float16] */;
  %219 = transpose(%218, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %220 = reshape(%219, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %221 = reshape(%220, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %222 = @tvmgen_default_cutlass_main_173(%221, meta[relay.Constant][118] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %223 = reshape(%222, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %224 = add(%223, meta[relay.Constant][119] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %225 = add(%145, %224) /* ty=Tensor[(600, 8, 256), float16] */;
  %226 = mean(%225, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %227 = variance(%225, %226, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %228 = add(%227, meta[relay.Constant][120] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %229 = subtract(%225, %226) /* ty=Tensor[(600, 8, 256), float16] */;
  %230 = sqrt(%228) /* ty=Tensor[(600, 8, 1), float16] */;
  %231 = divide(%229, %230) /* ty=Tensor[(600, 8, 256), float16] */;
  %232 = multiply(%231, meta[relay.Constant][121] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %233 = add(%232, meta[relay.Constant][122] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %234 = reshape(%233, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %235 = @tvmgen_default_cutlass_main_175(%234, meta[relay.Constant][123] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %236 = reshape(%235, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %237 = add(%236, meta[relay.Constant][124] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %238 = nn.relu(%237) /* ty=Tensor[(600, 8, 2048), float16] */;
  %239 = reshape(%238, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %240 = @tvmgen_default_cutlass_main_177(%239, meta[relay.Constant][125] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %241 = reshape(%240, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %242 = add(%241, meta[relay.Constant][126] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %243 = add(%233, %242) /* ty=Tensor[(600, 8, 256), float16] */;
  %244 = mean(%243, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %245 = variance(%243, %244, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %246 = add(%245, meta[relay.Constant][127] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %247 = subtract(%243, %244) /* ty=Tensor[(600, 8, 256), float16] */;
  %248 = sqrt(%246) /* ty=Tensor[(600, 8, 1), float16] */;
  %249 = divide(%247, %248) /* ty=Tensor[(600, 8, 256), float16] */;
  %250 = multiply(%249, meta[relay.Constant][128] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %251 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %252 = add(%250, meta[relay.Constant][129] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %254 = add(%253, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %255 = reshape(%254, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %256 = cast(%255, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %257 = @tvmgen_default_cutlass_main_179(%256, meta[relay.Constant][130] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %258 = reshape(%257, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %259 = add(%258, meta[relay.Constant][131] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %260 = multiply(%259, meta[relay.Constant][132] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %261 = reshape(%260, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %262 = reshape(%254, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %263 = cast(%262, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %264 = @tvmgen_default_cutlass_main_182(%263, meta[relay.Constant][133] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %265 = reshape(%264, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %266 = add(%265, meta[relay.Constant][134] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %267 = reshape(%266, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %268 = transpose(%267, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %269 = transpose(%268, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %270 = transpose(%261, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %271 = transpose(%269, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %272 = @tvmgen_default_cutlass_main_181(%270, %271) /* ty=Tensor[(64, 600, 600), float16] */;
  %273 = reshape(%272, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %274 = expand_dims(%251, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %275 = cast(%273, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %276 = where(%274, -inff /* ty=float32 */, %275) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %277 = reshape(%276, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %278 = nn.softmax(%277) /* ty=Tensor[(64, 600, 600), float32] */;
  %279 = reshape(%252, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %280 = @tvmgen_default_cutlass_main_186(%279, meta[relay.Constant][135] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %281 = reshape(%280, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %282 = add(%281, meta[relay.Constant][136] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %283 = reshape(%282, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %284 = transpose(%283, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %285 = cast(%278, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %286 = transpose(%284, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %287 = @tvmgen_default_cutlass_main_185(%285, %286) /* ty=Tensor[(64, 600, 32), float16] */;
  %288 = transpose(%287, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %289 = reshape(%288, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %290 = reshape(%289, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %291 = @tvmgen_default_cutlass_main_189(%290, meta[relay.Constant][137] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %292 = reshape(%291, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %293 = add(%292, meta[relay.Constant][138] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %294 = add(%252, %293) /* ty=Tensor[(600, 8, 256), float16] */;
  %295 = mean(%294, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %296 = variance(%294, %295, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %297 = add(%296, meta[relay.Constant][139] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %298 = subtract(%294, %295) /* ty=Tensor[(600, 8, 256), float16] */;
  %299 = sqrt(%297) /* ty=Tensor[(600, 8, 1), float16] */;
  %300 = divide(%298, %299) /* ty=Tensor[(600, 8, 256), float16] */;
  %301 = multiply(%300, meta[relay.Constant][140] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %302 = add(%301, meta[relay.Constant][141] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %303 = reshape(%302, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %304 = @tvmgen_default_cutlass_main_191(%303, meta[relay.Constant][142] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %305 = reshape(%304, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %306 = add(%305, meta[relay.Constant][143] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %307 = nn.relu(%306) /* ty=Tensor[(600, 8, 2048), float16] */;
  %308 = reshape(%307, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %309 = @tvmgen_default_cutlass_main_193(%308, meta[relay.Constant][144] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %310 = reshape(%309, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %311 = add(%310, meta[relay.Constant][145] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %312 = add(%302, %311) /* ty=Tensor[(600, 8, 256), float16] */;
  %313 = mean(%312, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %314 = variance(%312, %313, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %315 = add(%314, meta[relay.Constant][146] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %316 = subtract(%312, %313) /* ty=Tensor[(600, 8, 256), float16] */;
  %317 = sqrt(%315) /* ty=Tensor[(600, 8, 1), float16] */;
  %318 = divide(%316, %317) /* ty=Tensor[(600, 8, 256), float16] */;
  %319 = multiply(%318, meta[relay.Constant][147] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %320 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %321 = add(%319, meta[relay.Constant][148] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %323 = add(%322, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %324 = reshape(%323, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %325 = cast(%324, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %326 = @tvmgen_default_cutlass_main_195(%325, meta[relay.Constant][149] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %327 = reshape(%326, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %328 = add(%327, meta[relay.Constant][150] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %329 = multiply(%328, meta[relay.Constant][151] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %330 = reshape(%329, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %331 = reshape(%323, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %332 = cast(%331, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %333 = @tvmgen_default_cutlass_main_198(%332, meta[relay.Constant][152] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %334 = reshape(%333, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %335 = add(%334, meta[relay.Constant][153] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %336 = reshape(%335, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %337 = transpose(%336, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %338 = transpose(%337, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %339 = transpose(%330, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %340 = transpose(%338, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %341 = @tvmgen_default_cutlass_main_197(%339, %340) /* ty=Tensor[(64, 600, 600), float16] */;
  %342 = reshape(%341, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %343 = expand_dims(%320, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %344 = cast(%342, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %345 = where(%343, -inff /* ty=float32 */, %344) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %346 = reshape(%345, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %347 = nn.softmax(%346) /* ty=Tensor[(64, 600, 600), float32] */;
  %348 = reshape(%321, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %349 = @tvmgen_default_cutlass_main_202(%348, meta[relay.Constant][154] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %350 = reshape(%349, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %351 = add(%350, meta[relay.Constant][155] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %352 = reshape(%351, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %353 = transpose(%352, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %354 = cast(%347, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %355 = transpose(%353, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %356 = @tvmgen_default_cutlass_main_201(%354, %355) /* ty=Tensor[(64, 600, 32), float16] */;
  %357 = transpose(%356, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %358 = reshape(%357, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %359 = reshape(%358, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %360 = @tvmgen_default_cutlass_main_205(%359, meta[relay.Constant][156] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %361 = reshape(%360, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %362 = add(%361, meta[relay.Constant][157] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %363 = add(%321, %362) /* ty=Tensor[(600, 8, 256), float16] */;
  %364 = mean(%363, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %365 = variance(%363, %364, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %366 = add(%365, meta[relay.Constant][158] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %367 = subtract(%363, %364) /* ty=Tensor[(600, 8, 256), float16] */;
  %368 = sqrt(%366) /* ty=Tensor[(600, 8, 1), float16] */;
  %369 = divide(%367, %368) /* ty=Tensor[(600, 8, 256), float16] */;
  %370 = multiply(%369, meta[relay.Constant][159] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %371 = add(%370, meta[relay.Constant][160] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %372 = reshape(%371, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %373 = @tvmgen_default_cutlass_main_207(%372, meta[relay.Constant][161] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %374 = reshape(%373, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %375 = add(%374, meta[relay.Constant][162] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %376 = nn.relu(%375) /* ty=Tensor[(600, 8, 2048), float16] */;
  %377 = reshape(%376, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %378 = @tvmgen_default_cutlass_main_209(%377, meta[relay.Constant][163] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %379 = reshape(%378, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %380 = add(%379, meta[relay.Constant][164] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %381 = add(%371, %380) /* ty=Tensor[(600, 8, 256), float16] */;
  %382 = mean(%381, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %383 = variance(%381, %382, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %384 = add(%383, meta[relay.Constant][165] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %385 = subtract(%381, %382) /* ty=Tensor[(600, 8, 256), float16] */;
  %386 = sqrt(%384) /* ty=Tensor[(600, 8, 1), float16] */;
  %387 = divide(%385, %386) /* ty=Tensor[(600, 8, 256), float16] */;
  %388 = multiply(%387, meta[relay.Constant][166] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %389 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %390 = add(%388, meta[relay.Constant][167] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %392 = add(%391, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %393 = reshape(%392, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %394 = cast(%393, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %395 = @tvmgen_default_cutlass_main_211(%394, meta[relay.Constant][168] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %396 = reshape(%395, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %397 = add(%396, meta[relay.Constant][169] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %398 = multiply(%397, meta[relay.Constant][170] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %399 = reshape(%398, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %400 = reshape(%392, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %401 = cast(%400, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %402 = @tvmgen_default_cutlass_main_214(%401, meta[relay.Constant][171] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %403 = reshape(%402, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %404 = add(%403, meta[relay.Constant][172] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %405 = reshape(%404, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %406 = transpose(%405, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %407 = transpose(%406, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %408 = transpose(%399, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %409 = transpose(%407, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %410 = @tvmgen_default_cutlass_main_213(%408, %409) /* ty=Tensor[(64, 600, 600), float16] */;
  %411 = reshape(%410, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %412 = expand_dims(%389, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %413 = cast(%411, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %414 = where(%412, -inff /* ty=float32 */, %413) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %415 = reshape(%414, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %416 = nn.softmax(%415) /* ty=Tensor[(64, 600, 600), float32] */;
  %417 = reshape(%390, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %418 = @tvmgen_default_cutlass_main_218(%417, meta[relay.Constant][173] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %419 = reshape(%418, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %420 = add(%419, meta[relay.Constant][174] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %421 = reshape(%420, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %422 = transpose(%421, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %423 = cast(%416, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %424 = transpose(%422, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %425 = @tvmgen_default_cutlass_main_217(%423, %424) /* ty=Tensor[(64, 600, 32), float16] */;
  %426 = transpose(%425, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %427 = reshape(%426, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %428 = reshape(%427, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %429 = @tvmgen_default_cutlass_main_221(%428, meta[relay.Constant][175] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %430 = reshape(%429, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %431 = add(%430, meta[relay.Constant][176] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %432 = add(%390, %431) /* ty=Tensor[(600, 8, 256), float16] */;
  %433 = mean(%432, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %434 = variance(%432, %433, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %435 = add(%434, meta[relay.Constant][177] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %436 = subtract(%432, %433) /* ty=Tensor[(600, 8, 256), float16] */;
  %437 = sqrt(%435) /* ty=Tensor[(600, 8, 1), float16] */;
  %438 = divide(%436, %437) /* ty=Tensor[(600, 8, 256), float16] */;
  %439 = multiply(%438, meta[relay.Constant][178] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %440 = add(%439, meta[relay.Constant][179] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %441 = reshape(%440, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %442 = @tvmgen_default_cutlass_main_223(%441, meta[relay.Constant][180] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %443 = reshape(%442, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %444 = add(%443, meta[relay.Constant][181] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %445 = nn.relu(%444) /* ty=Tensor[(600, 8, 2048), float16] */;
  %446 = reshape(%445, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %447 = @tvmgen_default_cutlass_main_225(%446, meta[relay.Constant][182] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %448 = reshape(%447, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %449 = add(%448, meta[relay.Constant][183] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %450 = add(%440, %449) /* ty=Tensor[(600, 8, 256), float16] */;
  %451 = mean(%450, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %452 = variance(%450, %451, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %453 = add(%452, meta[relay.Constant][184] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %454 = subtract(%450, %451) /* ty=Tensor[(600, 8, 256), float16] */;
  %455 = sqrt(%453) /* ty=Tensor[(600, 8, 1), float16] */;
  %456 = divide(%454, %455) /* ty=Tensor[(600, 8, 256), float16] */;
  %457 = multiply(%456, meta[relay.Constant][185] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %458 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %459 = add(%457, meta[relay.Constant][186] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %461 = add(%460, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %462 = reshape(%461, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %463 = cast(%462, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %464 = @tvmgen_default_cutlass_main_227(%463, meta[relay.Constant][187] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %465 = reshape(%464, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %466 = add(%465, meta[relay.Constant][188] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %467 = multiply(%466, meta[relay.Constant][189] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %468 = reshape(%467, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %469 = reshape(%461, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %470 = cast(%469, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %471 = @tvmgen_default_cutlass_main_230(%470, meta[relay.Constant][190] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %472 = reshape(%471, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %473 = add(%472, meta[relay.Constant][191] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %474 = reshape(%473, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %475 = transpose(%474, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %476 = transpose(%475, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %477 = transpose(%468, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %478 = transpose(%476, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %479 = @tvmgen_default_cutlass_main_229(%477, %478) /* ty=Tensor[(64, 600, 600), float16] */;
  %480 = reshape(%479, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %481 = expand_dims(%458, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %482 = cast(%480, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %483 = where(%481, -inff /* ty=float32 */, %482) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %484 = reshape(%483, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %485 = nn.softmax(%484) /* ty=Tensor[(64, 600, 600), float32] */;
  %486 = reshape(%459, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %487 = @tvmgen_default_cutlass_main_234(%486, meta[relay.Constant][192] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %488 = reshape(%487, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %489 = add(%488, meta[relay.Constant][193] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %490 = reshape(%489, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %491 = transpose(%490, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %492 = cast(%485, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %493 = transpose(%491, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %494 = @tvmgen_default_cutlass_main_233(%492, %493) /* ty=Tensor[(64, 600, 32), float16] */;
  %495 = transpose(%494, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %496 = reshape(%495, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %497 = reshape(%496, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %498 = @tvmgen_default_cutlass_main_237(%497, meta[relay.Constant][194] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %499 = reshape(%498, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %500 = add(%499, meta[relay.Constant][195] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %501 = add(%459, %500) /* ty=Tensor[(600, 8, 256), float16] */;
  %502 = mean(%501, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %503 = variance(%501, %502, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %504 = add(%503, meta[relay.Constant][196] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %505 = subtract(%501, %502) /* ty=Tensor[(600, 8, 256), float16] */;
  %506 = sqrt(%504) /* ty=Tensor[(600, 8, 1), float16] */;
  %507 = divide(%505, %506) /* ty=Tensor[(600, 8, 256), float16] */;
  %508 = multiply(%507, meta[relay.Constant][197] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %509 = add(%508, meta[relay.Constant][198] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %510 = reshape(%509, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %511 = @tvmgen_default_cutlass_main_239(%510, meta[relay.Constant][199] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %512 = reshape(%511, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %513 = add(%512, meta[relay.Constant][200] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %514 = nn.relu(%513) /* ty=Tensor[(600, 8, 2048), float16] */;
  %515 = reshape(%514, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %516 = @tvmgen_default_cutlass_main_241(%515, meta[relay.Constant][201] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %517 = reshape(%516, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %518 = add(%517, meta[relay.Constant][202] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %519 = add(%509, %518) /* ty=Tensor[(600, 8, 256), float16] */;
  %520 = mean(%519, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %521 = variance(%519, %520, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %522 = add(%521, meta[relay.Constant][203] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %523 = subtract(%519, %520) /* ty=Tensor[(600, 8, 256), float16] */;
  %524 = sqrt(%522) /* ty=Tensor[(600, 8, 1), float16] */;
  %525 = divide(%523, %524) /* ty=Tensor[(600, 8, 256), float16] */;
  %526 = multiply(%525, meta[relay.Constant][204] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %527 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %528 = add(%526, meta[relay.Constant][205] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %530 = add(%529, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %531 = reshape(%530, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %532 = cast(%531, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %533 = @tvmgen_default_cutlass_main_243(%532, meta[relay.Constant][206] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %534 = reshape(%533, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %535 = add(%534, meta[relay.Constant][207] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %536 = multiply(%535, meta[relay.Constant][208] /* ty=float16 */) /* ty=Tensor[(600, 8, 256), float16] */;
  %537 = reshape(%536, newshape=[600, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %538 = reshape(%530, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %539 = cast(%538, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %540 = @tvmgen_default_cutlass_main_246(%539, meta[relay.Constant][209] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %541 = reshape(%540, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %542 = add(%541, meta[relay.Constant][210] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %543 = reshape(%542, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %544 = transpose(%543, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %545 = transpose(%544, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %546 = transpose(%537, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %547 = transpose(%545, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %548 = @tvmgen_default_cutlass_main_245(%546, %547) /* ty=Tensor[(64, 600, 600), float16] */;
  %549 = reshape(%548, newshape=[8, 8, 600, 600]) /* ty=Tensor[(8, 8, 600, 600), float16] */;
  %550 = expand_dims(%527, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %551 = cast(%549, dtype="float32") /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %552 = where(%550, -inff /* ty=float32 */, %551) /* ty=Tensor[(8, 8, 600, 600), float32] */;
  %553 = reshape(%552, newshape=[64, 600, 600]) /* ty=Tensor[(64, 600, 600), float32] */;
  %554 = nn.softmax(%553) /* ty=Tensor[(64, 600, 600), float32] */;
  %555 = reshape(%528, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %556 = @tvmgen_default_cutlass_main_250(%555, meta[relay.Constant][211] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %557 = reshape(%556, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %558 = add(%557, meta[relay.Constant][212] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %559 = reshape(%558, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %560 = transpose(%559, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %561 = cast(%554, dtype="float16") /* ty=Tensor[(64, 600, 600), float16] */;
  %562 = transpose(%560, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %563 = @tvmgen_default_cutlass_main_249(%561, %562) /* ty=Tensor[(64, 600, 32), float16] */;
  %564 = transpose(%563, axes=[1, 0, 2]) /* ty=Tensor[(600, 64, 32), float16] */;
  %565 = reshape(%564, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %566 = reshape(%565, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %567 = @tvmgen_default_cutlass_main_253(%566, meta[relay.Constant][213] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %568 = reshape(%567, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %569 = add(%568, meta[relay.Constant][214] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %570 = add(%528, %569) /* ty=Tensor[(600, 8, 256), float16] */;
  %571 = mean(%570, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %572 = variance(%570, %571, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %573 = add(%572, meta[relay.Constant][215] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %574 = subtract(%570, %571) /* ty=Tensor[(600, 8, 256), float16] */;
  %575 = sqrt(%573) /* ty=Tensor[(600, 8, 1), float16] */;
  %576 = divide(%574, %575) /* ty=Tensor[(600, 8, 256), float16] */;
  %577 = multiply(%576, meta[relay.Constant][216] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %578 = add(%577, meta[relay.Constant][217] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %579 = reshape(%578, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %580 = @tvmgen_default_cutlass_main_255(%579, meta[relay.Constant][218] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(4800, 2048), float16] */;
  %581 = reshape(%580, newshape=[600, 8, 2048]) /* ty=Tensor[(600, 8, 2048), float16] */;
  %582 = add(%581, meta[relay.Constant][219] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(600, 8, 2048), float16] */;
  %583 = nn.relu(%582) /* ty=Tensor[(600, 8, 2048), float16] */;
  %584 = reshape(%583, newshape=[-1, 2048]) /* ty=Tensor[(4800, 2048), float16] */;
  %585 = @tvmgen_default_cutlass_main_257(%584, meta[relay.Constant][220] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %586 = reshape(%585, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %587 = add(%586, meta[relay.Constant][221] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %588 = add(%578, %587) /* ty=Tensor[(600, 8, 256), float16] */;
  %589 = mean(%588, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %590 = variance(%588, %589, axis=[-1], keepdims=True) /* ty=Tensor[(600, 8, 1), float16] */;
  %591 = add(%590, meta[relay.Constant][222] /* ty=float16 */) /* ty=Tensor[(600, 8, 1), float16] */;
  %592 = subtract(%588, %589) /* ty=Tensor[(600, 8, 256), float16] */;
  %593 = sqrt(%591) /* ty=Tensor[(600, 8, 1), float16] */;
  %594 = divide(%592, %593) /* ty=Tensor[(600, 8, 256), float16] */;
  %595 = multiply(%594, meta[relay.Constant][223] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %596 = add(%595, meta[relay.Constant][224] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(600, 8, 256), float32] */;
  %598 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %599 = reshape(%598, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %600 = cast(%599, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %601 = @tvmgen_default_cutlass_main_259(%600, meta[relay.Constant][225] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %602 = reshape(%601, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %603 = add(%602, meta[relay.Constant][226] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %604 = reshape(%603, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %605 = transpose(%604, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %606 = transpose(%605, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %607 = transpose(%606, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %608 = @tvmgen_default_cutlass_main_0(meta[relay.Constant][1] /* ty=Tensor[(64, 100, 32), float16] */, %607) /* ty=Tensor[(64, 100, 600), float16] */;
  %609 = reshape(%608, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %610 = expand_dims(%50, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %611 = cast(%609, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %612 = where(%610, -inff /* ty=float32 */, %611) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %613 = reshape(%612, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %614 = nn.softmax(%613) /* ty=Tensor[(64, 100, 600), float32] */;
  %615 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %616 = @tvmgen_default_cutlass_main_263(%615, meta[relay.Constant][227] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %617 = reshape(%616, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %618 = add(%617, meta[relay.Constant][228] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %619 = reshape(%618, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %620 = transpose(%619, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %621 = cast(%614, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %622 = transpose(%620, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %623 = @tvmgen_default_cutlass_main_262(%621, %622) /* ty=Tensor[(64, 100, 32), float16] */;
  %624 = transpose(%623, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %625 = reshape(%624, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %626 = reshape(%625, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %627 = @tvmgen_default_cutlass_main_266(%626, meta[relay.Constant][229] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %628 = reshape(%627, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %629 = add(%628, meta[relay.Constant][230] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %630 = add(meta[relay.Constant][0] /* ty=Tensor[(100, 8, 256), float16] */, %629) /* ty=Tensor[(100, 8, 256), float16] */;
  %631 = mean(%630, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %632 = variance(%630, %631, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %633 = add(%632, meta[relay.Constant][231] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %634 = subtract(%630, %631) /* ty=Tensor[(100, 8, 256), float16] */;
  %635 = sqrt(%633) /* ty=Tensor[(100, 8, 1), float16] */;
  %636 = divide(%634, %635) /* ty=Tensor[(100, 8, 256), float16] */;
  %637 = multiply(%636, meta[relay.Constant][232] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %638 = add(%637, meta[relay.Constant][233] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %639 = reshape(%638, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %640 = @tvmgen_default_cutlass_main_268(%639, meta[relay.Constant][234] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %641 = reshape(%640, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %642 = add(%641, meta[relay.Constant][235] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %643 = nn.relu(%642) /* ty=Tensor[(100, 8, 2048), float16] */;
  %644 = reshape(%643, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %645 = @tvmgen_default_cutlass_main_270(%644, meta[relay.Constant][236] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %646 = reshape(%645, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %647 = add(%646, meta[relay.Constant][237] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %648 = add(%638, %647) /* ty=Tensor[(100, 8, 256), float16] */;
  %649 = mean(%648, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %650 = variance(%648, %649, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %651 = add(%650, meta[relay.Constant][238] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %652 = subtract(%648, %649) /* ty=Tensor[(100, 8, 256), float16] */;
  %653 = sqrt(%651) /* ty=Tensor[(100, 8, 1), float16] */;
  %654 = divide(%652, %653) /* ty=Tensor[(100, 8, 256), float16] */;
  %655 = multiply(%654, meta[relay.Constant][239] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %656 = add(%655, meta[relay.Constant][240] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %657 = mean(%656, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %658 = variance(%656, %657, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %659 = add(%658, meta[relay.Constant][241] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %660 = subtract(%656, %657) /* ty=Tensor[(100, 8, 256), float16] */;
  %661 = sqrt(%659) /* ty=Tensor[(100, 8, 1), float16] */;
  %662 = divide(%660, %661) /* ty=Tensor[(100, 8, 256), float16] */;
  %663 = multiply(%662, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %664 = add(%656, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %665 = reshape(%664, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %666 = @tvmgen_default_cutlass_main_272(%665, meta[relay.Constant][245] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %667 = reshape(%666, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %668 = add(%667, meta[relay.Constant][246] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %669 = multiply(%668, meta[relay.Constant][247] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %670 = reshape(%669, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %671 = reshape(%664, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %672 = @tvmgen_default_cutlass_main_275(%671, meta[relay.Constant][248] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %673 = reshape(%672, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %674 = add(%673, meta[relay.Constant][249] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %675 = reshape(%674, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %676 = transpose(%675, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %677 = transpose(%676, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %678 = transpose(%670, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %679 = transpose(%677, axes=[0, 2, 1]) /* ty=Tensor[(64, 100, 32), float16] */;
  %680 = @tvmgen_default_cutlass_main_274(%678, %679) /* ty=Tensor[(64, 100, 100), float16] */;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(64, 100, 100), float32] */;
  %682 = nn.softmax(%681) /* ty=Tensor[(64, 100, 100), float32] */;
  %683 = reshape(%656, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %684 = @tvmgen_default_cutlass_main_279(%683, meta[relay.Constant][250] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %685 = reshape(%684, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %686 = add(%685, meta[relay.Constant][251] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %687 = reshape(%686, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %688 = transpose(%687, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %689 = cast(%682, dtype="float16") /* ty=Tensor[(64, 100, 100), float16] */;
  %690 = transpose(%688, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %691 = @tvmgen_default_cutlass_main_278(%689, %690) /* ty=Tensor[(64, 100, 32), float16] */;
  %692 = transpose(%691, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %693 = reshape(%692, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %694 = reshape(%693, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %695 = @tvmgen_default_cutlass_main_282(%694, meta[relay.Constant][252] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %696 = reshape(%695, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %697 = add(%696, meta[relay.Constant][253] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %698 = add(%656, %697) /* ty=Tensor[(100, 8, 256), float16] */;
  %699 = mean(%698, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %700 = variance(%698, %699, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %701 = add(%700, meta[relay.Constant][254] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %702 = subtract(%698, %699) /* ty=Tensor[(100, 8, 256), float16] */;
  %703 = sqrt(%701) /* ty=Tensor[(100, 8, 1), float16] */;
  %704 = divide(%702, %703) /* ty=Tensor[(100, 8, 256), float16] */;
  %705 = multiply(%704, meta[relay.Constant][255] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %706 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %707 = add(%705, meta[relay.Constant][256] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %708 = add(%707, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %709 = reshape(%708, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %710 = @tvmgen_default_cutlass_main_284(%709, meta[relay.Constant][257] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %711 = reshape(%710, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %712 = add(%711, meta[relay.Constant][258] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %713 = multiply(%712, meta[relay.Constant][259] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %714 = reshape(%713, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %715 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %716 = reshape(%715, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %717 = cast(%716, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %718 = @tvmgen_default_cutlass_main_287(%717, meta[relay.Constant][260] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %719 = reshape(%718, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %720 = add(%719, meta[relay.Constant][261] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %721 = reshape(%720, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %722 = transpose(%721, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %723 = transpose(%722, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %724 = transpose(%714, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %725 = transpose(%723, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %726 = @tvmgen_default_cutlass_main_286(%724, %725) /* ty=Tensor[(64, 100, 600), float16] */;
  %727 = reshape(%726, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %728 = expand_dims(%706, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %729 = cast(%727, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %730 = where(%728, -inff /* ty=float32 */, %729) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %731 = reshape(%730, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %732 = nn.softmax(%731) /* ty=Tensor[(64, 100, 600), float32] */;
  %733 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %734 = @tvmgen_default_cutlass_main_291(%733, meta[relay.Constant][262] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %735 = reshape(%734, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %736 = add(%735, meta[relay.Constant][263] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %737 = reshape(%736, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %738 = transpose(%737, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %739 = cast(%732, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %740 = transpose(%738, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %741 = @tvmgen_default_cutlass_main_290(%739, %740) /* ty=Tensor[(64, 100, 32), float16] */;
  %742 = transpose(%741, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %743 = reshape(%742, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %744 = reshape(%743, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %745 = @tvmgen_default_cutlass_main_294(%744, meta[relay.Constant][264] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %746 = reshape(%745, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %747 = add(%746, meta[relay.Constant][265] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %748 = add(%707, %747) /* ty=Tensor[(100, 8, 256), float16] */;
  %749 = mean(%748, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %750 = variance(%748, %749, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %751 = add(%750, meta[relay.Constant][266] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %752 = subtract(%748, %749) /* ty=Tensor[(100, 8, 256), float16] */;
  %753 = sqrt(%751) /* ty=Tensor[(100, 8, 1), float16] */;
  %754 = divide(%752, %753) /* ty=Tensor[(100, 8, 256), float16] */;
  %755 = multiply(%754, meta[relay.Constant][267] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %756 = add(%755, meta[relay.Constant][268] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %757 = reshape(%756, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %758 = @tvmgen_default_cutlass_main_296(%757, meta[relay.Constant][269] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %759 = reshape(%758, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %760 = add(%759, meta[relay.Constant][270] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %761 = nn.relu(%760) /* ty=Tensor[(100, 8, 2048), float16] */;
  %762 = reshape(%761, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %763 = @tvmgen_default_cutlass_main_298(%762, meta[relay.Constant][271] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %764 = reshape(%763, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %765 = add(%764, meta[relay.Constant][272] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %766 = add(%756, %765) /* ty=Tensor[(100, 8, 256), float16] */;
  %767 = mean(%766, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %768 = variance(%766, %767, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %769 = add(%768, meta[relay.Constant][273] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %770 = subtract(%766, %767) /* ty=Tensor[(100, 8, 256), float16] */;
  %771 = sqrt(%769) /* ty=Tensor[(100, 8, 1), float16] */;
  %772 = divide(%770, %771) /* ty=Tensor[(100, 8, 256), float16] */;
  %773 = multiply(%772, meta[relay.Constant][274] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %774 = add(%773, meta[relay.Constant][275] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %775 = mean(%774, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %776 = variance(%774, %775, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %777 = add(%776, meta[relay.Constant][276] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %778 = subtract(%774, %775) /* ty=Tensor[(100, 8, 256), float16] */;
  %779 = sqrt(%777) /* ty=Tensor[(100, 8, 1), float16] */;
  %780 = divide(%778, %779) /* ty=Tensor[(100, 8, 256), float16] */;
  %781 = multiply(%780, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %782 = add(%774, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %783 = reshape(%782, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %784 = @tvmgen_default_cutlass_main_300(%783, meta[relay.Constant][277] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %785 = reshape(%784, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %786 = add(%785, meta[relay.Constant][278] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %787 = multiply(%786, meta[relay.Constant][279] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %788 = reshape(%787, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %789 = reshape(%782, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %790 = @tvmgen_default_cutlass_main_303(%789, meta[relay.Constant][280] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %791 = reshape(%790, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %792 = add(%791, meta[relay.Constant][281] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %793 = reshape(%792, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %794 = transpose(%793, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %795 = transpose(%794, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %796 = transpose(%788, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %797 = transpose(%795, axes=[0, 2, 1]) /* ty=Tensor[(64, 100, 32), float16] */;
  %798 = @tvmgen_default_cutlass_main_302(%796, %797) /* ty=Tensor[(64, 100, 100), float16] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(64, 100, 100), float32] */;
  %800 = nn.softmax(%799) /* ty=Tensor[(64, 100, 100), float32] */;
  %801 = reshape(%774, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %802 = @tvmgen_default_cutlass_main_307(%801, meta[relay.Constant][282] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %803 = reshape(%802, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %804 = add(%803, meta[relay.Constant][283] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %805 = reshape(%804, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %806 = transpose(%805, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %807 = cast(%800, dtype="float16") /* ty=Tensor[(64, 100, 100), float16] */;
  %808 = transpose(%806, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %809 = @tvmgen_default_cutlass_main_306(%807, %808) /* ty=Tensor[(64, 100, 32), float16] */;
  %810 = transpose(%809, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %811 = reshape(%810, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %812 = reshape(%811, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %813 = @tvmgen_default_cutlass_main_310(%812, meta[relay.Constant][284] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %814 = reshape(%813, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %815 = add(%814, meta[relay.Constant][285] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %816 = add(%774, %815) /* ty=Tensor[(100, 8, 256), float16] */;
  %817 = mean(%816, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %818 = variance(%816, %817, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %819 = add(%818, meta[relay.Constant][286] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %820 = subtract(%816, %817) /* ty=Tensor[(100, 8, 256), float16] */;
  %821 = sqrt(%819) /* ty=Tensor[(100, 8, 1), float16] */;
  %822 = divide(%820, %821) /* ty=Tensor[(100, 8, 256), float16] */;
  %823 = multiply(%822, meta[relay.Constant][287] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %824 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %825 = add(%823, meta[relay.Constant][288] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %826 = add(%825, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %827 = reshape(%826, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %828 = @tvmgen_default_cutlass_main_312(%827, meta[relay.Constant][289] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %829 = reshape(%828, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %830 = add(%829, meta[relay.Constant][290] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %831 = multiply(%830, meta[relay.Constant][291] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %832 = reshape(%831, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %833 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %834 = reshape(%833, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %835 = cast(%834, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %836 = @tvmgen_default_cutlass_main_315(%835, meta[relay.Constant][292] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %837 = reshape(%836, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %838 = add(%837, meta[relay.Constant][293] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %839 = reshape(%838, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %840 = transpose(%839, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %841 = transpose(%840, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %842 = transpose(%832, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %843 = transpose(%841, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %844 = @tvmgen_default_cutlass_main_314(%842, %843) /* ty=Tensor[(64, 100, 600), float16] */;
  %845 = reshape(%844, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %846 = expand_dims(%824, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %847 = cast(%845, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %848 = where(%846, -inff /* ty=float32 */, %847) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %849 = reshape(%848, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %850 = nn.softmax(%849) /* ty=Tensor[(64, 100, 600), float32] */;
  %851 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %852 = @tvmgen_default_cutlass_main_319(%851, meta[relay.Constant][294] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %853 = reshape(%852, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %854 = add(%853, meta[relay.Constant][295] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %855 = reshape(%854, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %856 = transpose(%855, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %857 = cast(%850, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %858 = transpose(%856, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %859 = @tvmgen_default_cutlass_main_318(%857, %858) /* ty=Tensor[(64, 100, 32), float16] */;
  %860 = transpose(%859, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %861 = reshape(%860, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %862 = reshape(%861, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %863 = @tvmgen_default_cutlass_main_322(%862, meta[relay.Constant][296] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %864 = reshape(%863, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %865 = add(%864, meta[relay.Constant][297] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %866 = add(%825, %865) /* ty=Tensor[(100, 8, 256), float16] */;
  %867 = mean(%866, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %868 = variance(%866, %867, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %869 = add(%868, meta[relay.Constant][298] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %870 = subtract(%866, %867) /* ty=Tensor[(100, 8, 256), float16] */;
  %871 = sqrt(%869) /* ty=Tensor[(100, 8, 1), float16] */;
  %872 = divide(%870, %871) /* ty=Tensor[(100, 8, 256), float16] */;
  %873 = multiply(%872, meta[relay.Constant][299] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %874 = add(%873, meta[relay.Constant][300] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %875 = reshape(%874, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %876 = @tvmgen_default_cutlass_main_324(%875, meta[relay.Constant][301] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %877 = reshape(%876, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %878 = add(%877, meta[relay.Constant][302] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %879 = nn.relu(%878) /* ty=Tensor[(100, 8, 2048), float16] */;
  %880 = reshape(%879, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %881 = @tvmgen_default_cutlass_main_326(%880, meta[relay.Constant][303] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %882 = reshape(%881, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %883 = add(%882, meta[relay.Constant][304] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %884 = add(%874, %883) /* ty=Tensor[(100, 8, 256), float16] */;
  %885 = mean(%884, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %886 = variance(%884, %885, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %887 = add(%886, meta[relay.Constant][305] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %888 = subtract(%884, %885) /* ty=Tensor[(100, 8, 256), float16] */;
  %889 = sqrt(%887) /* ty=Tensor[(100, 8, 1), float16] */;
  %890 = divide(%888, %889) /* ty=Tensor[(100, 8, 256), float16] */;
  %891 = multiply(%890, meta[relay.Constant][306] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %892 = add(%891, meta[relay.Constant][307] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %893 = mean(%892, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %894 = variance(%892, %893, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %895 = add(%894, meta[relay.Constant][308] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %896 = subtract(%892, %893) /* ty=Tensor[(100, 8, 256), float16] */;
  %897 = sqrt(%895) /* ty=Tensor[(100, 8, 1), float16] */;
  %898 = divide(%896, %897) /* ty=Tensor[(100, 8, 256), float16] */;
  %899 = multiply(%898, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %900 = add(%892, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %901 = reshape(%900, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %902 = @tvmgen_default_cutlass_main_328(%901, meta[relay.Constant][309] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %903 = reshape(%902, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %904 = add(%903, meta[relay.Constant][310] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %905 = multiply(%904, meta[relay.Constant][311] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %906 = reshape(%905, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %907 = reshape(%900, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %908 = @tvmgen_default_cutlass_main_331(%907, meta[relay.Constant][312] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %909 = reshape(%908, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %910 = add(%909, meta[relay.Constant][313] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %911 = reshape(%910, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %912 = transpose(%911, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %913 = transpose(%912, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %914 = transpose(%906, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %915 = transpose(%913, axes=[0, 2, 1]) /* ty=Tensor[(64, 100, 32), float16] */;
  %916 = @tvmgen_default_cutlass_main_330(%914, %915) /* ty=Tensor[(64, 100, 100), float16] */;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(64, 100, 100), float32] */;
  %918 = nn.softmax(%917) /* ty=Tensor[(64, 100, 100), float32] */;
  %919 = reshape(%892, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %920 = @tvmgen_default_cutlass_main_335(%919, meta[relay.Constant][314] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %921 = reshape(%920, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %922 = add(%921, meta[relay.Constant][315] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %923 = reshape(%922, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %924 = transpose(%923, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %925 = cast(%918, dtype="float16") /* ty=Tensor[(64, 100, 100), float16] */;
  %926 = transpose(%924, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %927 = @tvmgen_default_cutlass_main_334(%925, %926) /* ty=Tensor[(64, 100, 32), float16] */;
  %928 = transpose(%927, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %929 = reshape(%928, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %930 = reshape(%929, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %931 = @tvmgen_default_cutlass_main_338(%930, meta[relay.Constant][316] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %932 = reshape(%931, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %933 = add(%932, meta[relay.Constant][317] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %934 = add(%892, %933) /* ty=Tensor[(100, 8, 256), float16] */;
  %935 = mean(%934, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %936 = variance(%934, %935, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %937 = add(%936, meta[relay.Constant][318] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %938 = subtract(%934, %935) /* ty=Tensor[(100, 8, 256), float16] */;
  %939 = sqrt(%937) /* ty=Tensor[(100, 8, 1), float16] */;
  %940 = divide(%938, %939) /* ty=Tensor[(100, 8, 256), float16] */;
  %941 = multiply(%940, meta[relay.Constant][319] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %942 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %943 = add(%941, meta[relay.Constant][320] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %944 = add(%943, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %945 = reshape(%944, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %946 = @tvmgen_default_cutlass_main_340(%945, meta[relay.Constant][321] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %947 = reshape(%946, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %948 = add(%947, meta[relay.Constant][322] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %949 = multiply(%948, meta[relay.Constant][323] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %950 = reshape(%949, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %951 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %952 = reshape(%951, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %953 = cast(%952, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %954 = @tvmgen_default_cutlass_main_343(%953, meta[relay.Constant][324] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %955 = reshape(%954, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %956 = add(%955, meta[relay.Constant][325] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %957 = reshape(%956, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %958 = transpose(%957, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %959 = transpose(%958, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %960 = transpose(%950, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %961 = transpose(%959, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %962 = @tvmgen_default_cutlass_main_342(%960, %961) /* ty=Tensor[(64, 100, 600), float16] */;
  %963 = reshape(%962, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %964 = expand_dims(%942, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %965 = cast(%963, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %966 = where(%964, -inff /* ty=float32 */, %965) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %967 = reshape(%966, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %968 = nn.softmax(%967) /* ty=Tensor[(64, 100, 600), float32] */;
  %969 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %970 = @tvmgen_default_cutlass_main_347(%969, meta[relay.Constant][326] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %971 = reshape(%970, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %972 = add(%971, meta[relay.Constant][327] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %973 = reshape(%972, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %974 = transpose(%973, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %975 = cast(%968, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %976 = transpose(%974, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %977 = @tvmgen_default_cutlass_main_346(%975, %976) /* ty=Tensor[(64, 100, 32), float16] */;
  %978 = transpose(%977, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %979 = reshape(%978, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %980 = reshape(%979, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %981 = @tvmgen_default_cutlass_main_350(%980, meta[relay.Constant][328] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %982 = reshape(%981, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %983 = add(%982, meta[relay.Constant][329] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %984 = add(%943, %983) /* ty=Tensor[(100, 8, 256), float16] */;
  %985 = mean(%984, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %986 = variance(%984, %985, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %987 = add(%986, meta[relay.Constant][330] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %988 = subtract(%984, %985) /* ty=Tensor[(100, 8, 256), float16] */;
  %989 = sqrt(%987) /* ty=Tensor[(100, 8, 1), float16] */;
  %990 = divide(%988, %989) /* ty=Tensor[(100, 8, 256), float16] */;
  %991 = multiply(%990, meta[relay.Constant][331] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %992 = add(%991, meta[relay.Constant][332] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %993 = reshape(%992, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %994 = @tvmgen_default_cutlass_main_352(%993, meta[relay.Constant][333] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %995 = reshape(%994, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %996 = add(%995, meta[relay.Constant][334] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %997 = nn.relu(%996) /* ty=Tensor[(100, 8, 2048), float16] */;
  %998 = reshape(%997, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %999 = @tvmgen_default_cutlass_main_354(%998, meta[relay.Constant][335] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1000 = reshape(%999, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1001 = add(%1000, meta[relay.Constant][336] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1002 = add(%992, %1001) /* ty=Tensor[(100, 8, 256), float16] */;
  %1003 = mean(%1002, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1004 = variance(%1002, %1003, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1005 = add(%1004, meta[relay.Constant][337] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1006 = subtract(%1002, %1003) /* ty=Tensor[(100, 8, 256), float16] */;
  %1007 = sqrt(%1005) /* ty=Tensor[(100, 8, 1), float16] */;
  %1008 = divide(%1006, %1007) /* ty=Tensor[(100, 8, 256), float16] */;
  %1009 = multiply(%1008, meta[relay.Constant][338] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1010 = add(%1009, meta[relay.Constant][339] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1011 = mean(%1010, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1012 = variance(%1010, %1011, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1013 = add(%1012, meta[relay.Constant][340] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1014 = subtract(%1010, %1011) /* ty=Tensor[(100, 8, 256), float16] */;
  %1015 = sqrt(%1013) /* ty=Tensor[(100, 8, 1), float16] */;
  %1016 = divide(%1014, %1015) /* ty=Tensor[(100, 8, 256), float16] */;
  %1017 = multiply(%1016, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1018 = add(%1010, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1019 = reshape(%1018, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1020 = @tvmgen_default_cutlass_main_356(%1019, meta[relay.Constant][341] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1021 = reshape(%1020, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1022 = add(%1021, meta[relay.Constant][342] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1023 = multiply(%1022, meta[relay.Constant][343] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1024 = reshape(%1023, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1025 = reshape(%1018, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1026 = @tvmgen_default_cutlass_main_359(%1025, meta[relay.Constant][344] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1027 = reshape(%1026, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1028 = add(%1027, meta[relay.Constant][345] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1029 = reshape(%1028, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1030 = transpose(%1029, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1031 = transpose(%1030, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %1032 = transpose(%1024, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1033 = transpose(%1031, axes=[0, 2, 1]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1034 = @tvmgen_default_cutlass_main_358(%1032, %1033) /* ty=Tensor[(64, 100, 100), float16] */;
  %1035 = cast(%1034, dtype="float32") /* ty=Tensor[(64, 100, 100), float32] */;
  %1036 = nn.softmax(%1035) /* ty=Tensor[(64, 100, 100), float32] */;
  %1037 = reshape(%1010, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1038 = @tvmgen_default_cutlass_main_363(%1037, meta[relay.Constant][346] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1039 = reshape(%1038, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1040 = add(%1039, meta[relay.Constant][347] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1041 = reshape(%1040, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1042 = transpose(%1041, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1043 = cast(%1036, dtype="float16") /* ty=Tensor[(64, 100, 100), float16] */;
  %1044 = transpose(%1042, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %1045 = @tvmgen_default_cutlass_main_362(%1043, %1044) /* ty=Tensor[(64, 100, 32), float16] */;
  %1046 = transpose(%1045, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1047 = reshape(%1046, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1048 = reshape(%1047, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1049 = @tvmgen_default_cutlass_main_366(%1048, meta[relay.Constant][348] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1050 = reshape(%1049, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1051 = add(%1050, meta[relay.Constant][349] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1052 = add(%1010, %1051) /* ty=Tensor[(100, 8, 256), float16] */;
  %1053 = mean(%1052, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1054 = variance(%1052, %1053, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1055 = add(%1054, meta[relay.Constant][350] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1056 = subtract(%1052, %1053) /* ty=Tensor[(100, 8, 256), float16] */;
  %1057 = sqrt(%1055) /* ty=Tensor[(100, 8, 1), float16] */;
  %1058 = divide(%1056, %1057) /* ty=Tensor[(100, 8, 256), float16] */;
  %1059 = multiply(%1058, meta[relay.Constant][351] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1060 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %1061 = add(%1059, meta[relay.Constant][352] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1062 = add(%1061, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1063 = reshape(%1062, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1064 = @tvmgen_default_cutlass_main_368(%1063, meta[relay.Constant][353] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1065 = reshape(%1064, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1066 = add(%1065, meta[relay.Constant][354] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1067 = multiply(%1066, meta[relay.Constant][355] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1068 = reshape(%1067, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1069 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %1070 = reshape(%1069, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %1071 = cast(%1070, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %1072 = @tvmgen_default_cutlass_main_371(%1071, meta[relay.Constant][356] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1073 = reshape(%1072, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %1074 = add(%1073, meta[relay.Constant][357] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %1075 = reshape(%1074, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %1076 = transpose(%1075, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1077 = transpose(%1076, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %1078 = transpose(%1068, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1079 = transpose(%1077, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1080 = @tvmgen_default_cutlass_main_370(%1078, %1079) /* ty=Tensor[(64, 100, 600), float16] */;
  %1081 = reshape(%1080, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %1082 = expand_dims(%1060, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %1083 = cast(%1081, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %1084 = where(%1082, -inff /* ty=float32 */, %1083) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %1085 = reshape(%1084, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %1086 = nn.softmax(%1085) /* ty=Tensor[(64, 100, 600), float32] */;
  %1087 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1088 = @tvmgen_default_cutlass_main_375(%1087, meta[relay.Constant][358] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1089 = reshape(%1088, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %1090 = add(%1089, meta[relay.Constant][359] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %1091 = reshape(%1090, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %1092 = transpose(%1091, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1093 = cast(%1086, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %1094 = transpose(%1092, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %1095 = @tvmgen_default_cutlass_main_374(%1093, %1094) /* ty=Tensor[(64, 100, 32), float16] */;
  %1096 = transpose(%1095, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1097 = reshape(%1096, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1098 = reshape(%1097, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1099 = @tvmgen_default_cutlass_main_378(%1098, meta[relay.Constant][360] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1100 = reshape(%1099, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1101 = add(%1100, meta[relay.Constant][361] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1102 = add(%1061, %1101) /* ty=Tensor[(100, 8, 256), float16] */;
  %1103 = mean(%1102, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1104 = variance(%1102, %1103, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1105 = add(%1104, meta[relay.Constant][362] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1106 = subtract(%1102, %1103) /* ty=Tensor[(100, 8, 256), float16] */;
  %1107 = sqrt(%1105) /* ty=Tensor[(100, 8, 1), float16] */;
  %1108 = divide(%1106, %1107) /* ty=Tensor[(100, 8, 256), float16] */;
  %1109 = multiply(%1108, meta[relay.Constant][363] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1110 = add(%1109, meta[relay.Constant][364] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1111 = reshape(%1110, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1112 = @tvmgen_default_cutlass_main_380(%1111, meta[relay.Constant][365] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %1113 = reshape(%1112, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1114 = add(%1113, meta[relay.Constant][366] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1115 = nn.relu(%1114) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1116 = reshape(%1115, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %1117 = @tvmgen_default_cutlass_main_382(%1116, meta[relay.Constant][367] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1118 = reshape(%1117, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1119 = add(%1118, meta[relay.Constant][368] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1120 = add(%1110, %1119) /* ty=Tensor[(100, 8, 256), float16] */;
  %1121 = mean(%1120, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1122 = variance(%1120, %1121, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1123 = add(%1122, meta[relay.Constant][369] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1124 = subtract(%1120, %1121) /* ty=Tensor[(100, 8, 256), float16] */;
  %1125 = sqrt(%1123) /* ty=Tensor[(100, 8, 1), float16] */;
  %1126 = divide(%1124, %1125) /* ty=Tensor[(100, 8, 256), float16] */;
  %1127 = multiply(%1126, meta[relay.Constant][370] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1128 = add(%1127, meta[relay.Constant][371] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1129 = mean(%1128, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1130 = variance(%1128, %1129, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1131 = add(%1130, meta[relay.Constant][372] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1132 = subtract(%1128, %1129) /* ty=Tensor[(100, 8, 256), float16] */;
  %1133 = sqrt(%1131) /* ty=Tensor[(100, 8, 1), float16] */;
  %1134 = divide(%1132, %1133) /* ty=Tensor[(100, 8, 256), float16] */;
  %1135 = multiply(%1134, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1136 = add(%1128, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1137 = reshape(%1136, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1138 = @tvmgen_default_cutlass_main_384(%1137, meta[relay.Constant][373] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1139 = reshape(%1138, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1140 = add(%1139, meta[relay.Constant][374] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1141 = multiply(%1140, meta[relay.Constant][375] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1142 = reshape(%1141, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1143 = reshape(%1136, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1144 = @tvmgen_default_cutlass_main_387(%1143, meta[relay.Constant][376] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1145 = reshape(%1144, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1146 = add(%1145, meta[relay.Constant][377] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1147 = reshape(%1146, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1148 = transpose(%1147, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1149 = transpose(%1148, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %1150 = transpose(%1142, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1151 = transpose(%1149, axes=[0, 2, 1]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1152 = @tvmgen_default_cutlass_main_386(%1150, %1151) /* ty=Tensor[(64, 100, 100), float16] */;
  %1153 = cast(%1152, dtype="float32") /* ty=Tensor[(64, 100, 100), float32] */;
  %1154 = nn.softmax(%1153) /* ty=Tensor[(64, 100, 100), float32] */;
  %1155 = reshape(%1128, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1156 = @tvmgen_default_cutlass_main_391(%1155, meta[relay.Constant][378] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1157 = reshape(%1156, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1158 = add(%1157, meta[relay.Constant][379] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1159 = reshape(%1158, newshape=[-1, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1160 = transpose(%1159, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1161 = cast(%1154, dtype="float16") /* ty=Tensor[(64, 100, 100), float16] */;
  %1162 = transpose(%1160, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 100), float16] */;
  %1163 = @tvmgen_default_cutlass_main_390(%1161, %1162) /* ty=Tensor[(64, 100, 32), float16] */;
  %1164 = transpose(%1163, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1165 = reshape(%1164, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1166 = reshape(%1165, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1167 = @tvmgen_default_cutlass_main_394(%1166, meta[relay.Constant][380] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1168 = reshape(%1167, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1169 = add(%1168, meta[relay.Constant][381] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1170 = add(%1128, %1169) /* ty=Tensor[(100, 8, 256), float16] */;
  %1171 = mean(%1170, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1172 = variance(%1170, %1171, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1173 = add(%1172, meta[relay.Constant][382] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1174 = subtract(%1170, %1171) /* ty=Tensor[(100, 8, 256), float16] */;
  %1175 = sqrt(%1173) /* ty=Tensor[(100, 8, 1), float16] */;
  %1176 = divide(%1174, %1175) /* ty=Tensor[(100, 8, 256), float16] */;
  %1177 = multiply(%1176, meta[relay.Constant][383] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1178 = expand_dims(%49, axis=1) /* ty=Tensor[(8, 1, 600), float32] */;
  %1179 = add(%1177, meta[relay.Constant][384] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1180 = add(%1179, meta[relay.Constant][244] /* ty=Tensor[(100, 8, 256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1181 = reshape(%1180, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1182 = @tvmgen_default_cutlass_main_396(%1181, meta[relay.Constant][385] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1183 = reshape(%1182, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1184 = add(%1183, meta[relay.Constant][386] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1185 = multiply(%1184, meta[relay.Constant][387] /* ty=float16 */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1186 = reshape(%1185, newshape=[100, 64, 32]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1187 = add(%597, %184) /* ty=Tensor[(600, 8, 256), float32] */;
  %1188 = reshape(%1187, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float32] */;
  %1189 = cast(%1188, dtype="float16") /* ty=Tensor[(4800, 256), float16] */;
  %1190 = @tvmgen_default_cutlass_main_399(%1189, meta[relay.Constant][388] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1191 = reshape(%1190, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %1192 = add(%1191, meta[relay.Constant][389] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %1193 = reshape(%1192, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %1194 = transpose(%1193, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1195 = transpose(%1194, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %1196 = transpose(%1186, axes=[1, 0, 2]) /* ty=Tensor[(64, 100, 32), float16] */;
  %1197 = transpose(%1195, axes=[0, 2, 1]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1198 = @tvmgen_default_cutlass_main_398(%1196, %1197) /* ty=Tensor[(64, 100, 600), float16] */;
  %1199 = reshape(%1198, newshape=[8, 8, 100, 600]) /* ty=Tensor[(8, 8, 100, 600), float16] */;
  %1200 = expand_dims(%1178, axis=2) /* ty=Tensor[(8, 1, 1, 600), float32] */;
  %1201 = cast(%1199, dtype="float32") /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %1202 = where(%1200, -inff /* ty=float32 */, %1201) /* ty=Tensor[(8, 8, 100, 600), float32] */;
  %1203 = reshape(%1202, newshape=[64, 100, 600]) /* ty=Tensor[(64, 100, 600), float32] */;
  %1204 = nn.softmax(%1203) /* ty=Tensor[(64, 100, 600), float32] */;
  %1205 = reshape(%596, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1206 = @tvmgen_default_cutlass_main_403(%1205, meta[relay.Constant][390] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1207 = reshape(%1206, newshape=[600, 8, 256]) /* ty=Tensor[(600, 8, 256), float16] */;
  %1208 = add(%1207, meta[relay.Constant][391] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(600, 8, 256), float16] */;
  %1209 = reshape(%1208, newshape=[-1, 64, 32]) /* ty=Tensor[(600, 64, 32), float16] */;
  %1210 = transpose(%1209, axes=[1, 0, 2]) /* ty=Tensor[(64, 600, 32), float16] */;
  %1211 = cast(%1204, dtype="float16") /* ty=Tensor[(64, 100, 600), float16] */;
  %1212 = transpose(%1210, axes=[0, 2, 1]) /* ty=Tensor[(64, 32, 600), float16] */;
  %1213 = @tvmgen_default_cutlass_main_402(%1211, %1212) /* ty=Tensor[(64, 100, 32), float16] */;
  %1214 = transpose(%1213, axes=[1, 0, 2]) /* ty=Tensor[(100, 64, 32), float16] */;
  %1215 = reshape(%1214, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1216 = reshape(%1215, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1217 = @tvmgen_default_cutlass_main_406(%1216, meta[relay.Constant][392] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1218 = reshape(%1217, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1219 = add(%1218, meta[relay.Constant][393] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1220 = add(%1179, %1219) /* ty=Tensor[(100, 8, 256), float16] */;
  %1221 = mean(%1220, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1222 = variance(%1220, %1221, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1223 = add(%1222, meta[relay.Constant][394] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1224 = subtract(%1220, %1221) /* ty=Tensor[(100, 8, 256), float16] */;
  %1225 = sqrt(%1223) /* ty=Tensor[(100, 8, 1), float16] */;
  %1226 = divide(%1224, %1225) /* ty=Tensor[(100, 8, 256), float16] */;
  %1227 = multiply(%1226, meta[relay.Constant][395] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1228 = add(%1227, meta[relay.Constant][396] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1229 = reshape(%1228, newshape=[-1, 256]) /* ty=Tensor[(800, 256), float16] */;
  %1230 = @tvmgen_default_cutlass_main_408(%1229, meta[relay.Constant][397] /* ty=Tensor[(2048, 256), float16] */) /* ty=Tensor[(800, 2048), float16] */;
  %1231 = reshape(%1230, newshape=[100, 8, 2048]) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1232 = add(%1231, meta[relay.Constant][398] /* ty=Tensor[(2048), float16] */) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1233 = nn.relu(%1232) /* ty=Tensor[(100, 8, 2048), float16] */;
  %1234 = reshape(%1233, newshape=[-1, 2048]) /* ty=Tensor[(800, 2048), float16] */;
  %1235 = @tvmgen_default_cutlass_main_410(%1234, meta[relay.Constant][399] /* ty=Tensor[(256, 2048), float16] */) /* ty=Tensor[(800, 256), float16] */;
  %1236 = reshape(%1235, newshape=[100, 8, 256]) /* ty=Tensor[(100, 8, 256), float16] */;
  %1237 = add(%1236, meta[relay.Constant][400] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1238 = add(%1228, %1237) /* ty=Tensor[(100, 8, 256), float16] */;
  %1239 = mean(%1238, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1240 = variance(%1238, %1239, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1241 = add(%1240, meta[relay.Constant][401] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1242 = subtract(%1238, %1239) /* ty=Tensor[(100, 8, 256), float16] */;
  %1243 = sqrt(%1241) /* ty=Tensor[(100, 8, 1), float16] */;
  %1244 = divide(%1242, %1243) /* ty=Tensor[(100, 8, 256), float16] */;
  %1245 = multiply(%1244, meta[relay.Constant][402] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1246 = add(%1245, meta[relay.Constant][403] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1247 = mean(%1246, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1248 = variance(%1246, %1247, axis=[-1], keepdims=True) /* ty=Tensor[(100, 8, 1), float16] */;
  %1249 = add(%1248, meta[relay.Constant][404] /* ty=float16 */) /* ty=Tensor[(100, 8, 1), float16] */;
  %1250 = subtract(%1246, %1247) /* ty=Tensor[(100, 8, 256), float16] */;
  %1251 = sqrt(%1249) /* ty=Tensor[(100, 8, 1), float16] */;
  %1252 = divide(%1250, %1251) /* ty=Tensor[(100, 8, 256), float16] */;
  %1253 = multiply(%1252, meta[relay.Constant][242] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1254 = add(%663, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1255 = add(%781, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1256 = add(%899, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1257 = add(%1017, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1258 = add(%1135, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1259 = add(%1253, meta[relay.Constant][243] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(100, 8, 256), float16] */;
  %1260 = (%1254, %1255, %1256, %1257, %1258, %1259);
  %1261 = stack(%1260) /* ty=Tensor[(6, 100, 8, 256), float16] */;
  %1262 = transpose(%1261, axes=[0, 2, 1, 3]) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1263 = reshape(%1262, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1264 = @tvmgen_default_cutlass_main_412(%1263, meta[relay.Constant][405] /* ty=Tensor[(92, 256), float16] */) /* ty=Tensor[(4800, 92), float16] */;
  %1265 = reshape(%1264, newshape=[6, 8, 100, 92]) /* ty=Tensor[(6, 8, 100, 92), float16] */;
  %1266 = add(%1265, meta[relay.Constant][406] /* ty=Tensor[(92), float16] */) /* ty=Tensor[(6, 8, 100, 92), float16] */;
  %1267 = reshape(%1262, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1268 = @tvmgen_default_cutlass_main_414(%1267, meta[relay.Constant][407] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1269 = reshape(%1268, newshape=[6, 8, 100, 256]) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1270 = add(%1269, meta[relay.Constant][408] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1271 = nn.relu(%1270) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1272 = reshape(%1271, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1273 = @tvmgen_default_cutlass_main_416(%1272, meta[relay.Constant][409] /* ty=Tensor[(256, 256), float16] */) /* ty=Tensor[(4800, 256), float16] */;
  %1274 = reshape(%1273, newshape=[6, 8, 100, 256]) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1275 = add(%1274, meta[relay.Constant][410] /* ty=Tensor[(256), float16] */) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1276 = nn.relu(%1275) /* ty=Tensor[(6, 8, 100, 256), float16] */;
  %1277 = reshape(%1276, newshape=[-1, 256]) /* ty=Tensor[(4800, 256), float16] */;
  %1278 = @tvmgen_default_cutlass_main_418(%1277, meta[relay.Constant][411] /* ty=Tensor[(4, 256), float16] */) /* ty=Tensor[(4800, 4), float16] */;
  %1279 = reshape(%1278, newshape=[6, 8, 100, 4]) /* ty=Tensor[(6, 8, 100, 4), float16] */;
  %1280 = add(%1279, meta[relay.Constant][412] /* ty=Tensor[(4), float16] */) /* ty=Tensor[(6, 8, 100, 4), float16] */;
  %1281 = sigmoid(%1280) /* ty=Tensor[(6, 8, 100, 4), float16] */;
  %1282 = take(%1266, -1 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(8, 100, 92), float16] */;
  %1283 = take(%1281, -1 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(8, 100, 4), float16] */;
  (%1282, %1283)
}

def @tvmgen_default_cutlass_main_0(%cutlass_0_i0: Tensor[(64, 100, 32), float16], %cutlass_0_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_0", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1284 = fn (%FunctionVar_21_0: Tensor[(64, 100, 32), float16], %FunctionVar_21_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_21_0, %FunctionVar_21_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1284(%cutlass_0_i0, %cutlass_0_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_1(%cutlass_1_i0: Tensor[(8, 750, 800, 3), float16], %cutlass_1_i1: Tensor[(64, 7, 7, 3), float16], %cutlass_1_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_1", Primitive=1) -> Tensor[(8, 375, 400, 64), float16] {
  %1287 = fn (%FunctionVar_32_0: Tensor[(8, 750, 800, 3), float16], %FunctionVar_32_1: Tensor[(64, 7, 7, 3), float16], %FunctionVar_32_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 375, 400, 64), float16] {
    %1285 = nn.conv2d(%FunctionVar_32_0, %FunctionVar_32_1, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 375, 400, 64), float16] */;
    %1286 = add(%1285, %FunctionVar_32_2) /* ty=Tensor[(8, 375, 400, 64), float16] */;
    nn.relu(%1286) /* ty=Tensor[(8, 375, 400, 64), float16] */
  };
  %1287(%cutlass_1_i0, %cutlass_1_i1, %cutlass_1_i2) /* ty=Tensor[(8, 375, 400, 64), float16] */
}

def @tvmgen_default_cutlass_main_10(%cutlass_10_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_10_i1: Tensor[(256, 1, 1, 64), float16], %cutlass_10_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_10", Primitive=1) -> Tensor[(8, 188, 200, 256), float16] {
  %1289 = fn (%FunctionVar_20_0: Tensor[(8, 188, 200, 64), float16], %FunctionVar_20_1: Tensor[(256, 1, 1, 64), float16], %FunctionVar_20_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 188, 200, 256), float16] {
    %1288 = nn.conv2d(%FunctionVar_20_0, %FunctionVar_20_1, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 256), float16] */;
    add(%1288, %FunctionVar_20_2) /* ty=Tensor[(8, 188, 200, 256), float16] */
  };
  %1289(%cutlass_10_i0, %cutlass_10_i1, %cutlass_10_i2) /* ty=Tensor[(8, 188, 200, 256), float16] */
}

def @tvmgen_default_cutlass_main_100(%cutlass_100_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_100_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_100_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_100", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1291 = fn (%FunctionVar_8_0: Tensor[(8, 47, 50, 256), float16], %FunctionVar_8_1: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_8_2: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1290 = nn.conv2d(%FunctionVar_8_0, %FunctionVar_8_1, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1290, %FunctionVar_8_2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1291(%cutlass_100_i0, %cutlass_100_i1, %cutlass_100_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_103(%cutlass_103_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_103_i1: Tensor[(256, 1, 1, 1024), float16], %cutlass_103_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_103", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1294 = fn (%FunctionVar_11_0: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_11_1: Tensor[(256, 1, 1, 1024), float16], %FunctionVar_11_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1292 = nn.conv2d(%FunctionVar_11_0, %FunctionVar_11_1, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1293 = add(%1292, %FunctionVar_11_2) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1293) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1294(%cutlass_103_i0, %cutlass_103_i1, %cutlass_103_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_106(%cutlass_106_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_106_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_106_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_106", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1297 = fn (%FunctionVar_10_0: Tensor[(8, 47, 50, 256), float16], %FunctionVar_10_1: Tensor[(256, 3, 3, 256), float16], %FunctionVar_10_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1295 = nn.conv2d(%FunctionVar_10_0, %FunctionVar_10_1, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1296 = add(%1295, %FunctionVar_10_2) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1296) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1297(%cutlass_106_i0, %cutlass_106_i1, %cutlass_106_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_109(%cutlass_109_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_109_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_109_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_109", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1299 = fn (%FunctionVar_7_0: Tensor[(8, 47, 50, 256), float16], %FunctionVar_7_1: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_7_2: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1298 = nn.conv2d(%FunctionVar_7_0, %FunctionVar_7_1, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1298, %FunctionVar_7_2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1299(%cutlass_109_i0, %cutlass_109_i1, %cutlass_109_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_112(%cutlass_112_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_112_i1: Tensor[(256, 1, 1, 1024), float16], %cutlass_112_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_112", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1302 = fn (%FunctionVar_9_0: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_9_1: Tensor[(256, 1, 1, 1024), float16], %FunctionVar_9_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1300 = nn.conv2d(%FunctionVar_9_0, %FunctionVar_9_1, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1301 = add(%1300, %FunctionVar_9_2) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1301) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1302(%cutlass_112_i0, %cutlass_112_i1, %cutlass_112_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_115(%cutlass_115_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_115_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_115_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_115", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1305 = fn (%FunctionVar_8_01: Tensor[(8, 47, 50, 256), float16], %FunctionVar_8_11: Tensor[(256, 3, 3, 256), float16], %FunctionVar_8_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1303 = nn.conv2d(%FunctionVar_8_01, %FunctionVar_8_11, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1304 = add(%1303, %FunctionVar_8_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1304) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1305(%cutlass_115_i0, %cutlass_115_i1, %cutlass_115_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_118(%cutlass_118_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_118_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_118_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_118", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1307 = fn (%FunctionVar_6_0: Tensor[(8, 47, 50, 256), float16], %FunctionVar_6_1: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_6_2: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1306 = nn.conv2d(%FunctionVar_6_0, %FunctionVar_6_1, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1306, %FunctionVar_6_2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1307(%cutlass_118_i0, %cutlass_118_i1, %cutlass_118_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_121(%cutlass_121_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_121_i1: Tensor[(256, 1, 1, 1024), float16], %cutlass_121_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_121", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1310 = fn (%FunctionVar_7_01: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_7_11: Tensor[(256, 1, 1, 1024), float16], %FunctionVar_7_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1308 = nn.conv2d(%FunctionVar_7_01, %FunctionVar_7_11, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1309 = add(%1308, %FunctionVar_7_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1309) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1310(%cutlass_121_i0, %cutlass_121_i1, %cutlass_121_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_124(%cutlass_124_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_124_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_124_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_124", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1313 = fn (%FunctionVar_6_01: Tensor[(8, 47, 50, 256), float16], %FunctionVar_6_11: Tensor[(256, 3, 3, 256), float16], %FunctionVar_6_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1311 = nn.conv2d(%FunctionVar_6_01, %FunctionVar_6_11, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1312 = add(%1311, %FunctionVar_6_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1312) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1313(%cutlass_124_i0, %cutlass_124_i1, %cutlass_124_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_127(%cutlass_127_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_127_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_127_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_127", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1315 = fn (%FunctionVar_5_0: Tensor[(8, 47, 50, 256), float16], %FunctionVar_5_1: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_5_2: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1314 = nn.conv2d(%FunctionVar_5_0, %FunctionVar_5_1, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1314, %FunctionVar_5_2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1315(%cutlass_127_i0, %cutlass_127_i1, %cutlass_127_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_13(%cutlass_13_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_13_i1: Tensor[(256, 1, 1, 64), float16], %cutlass_13_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_13", Primitive=1) -> Tensor[(8, 188, 200, 256), float16] {
  %1317 = fn (%FunctionVar_19_0: Tensor[(8, 188, 200, 64), float16], %FunctionVar_19_1: Tensor[(256, 1, 1, 64), float16], %FunctionVar_19_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 188, 200, 256), float16] {
    %1316 = nn.conv2d(%FunctionVar_19_0, %FunctionVar_19_1, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 256), float16] */;
    add(%1316, %FunctionVar_19_2) /* ty=Tensor[(8, 188, 200, 256), float16] */
  };
  %1317(%cutlass_13_i0, %cutlass_13_i1, %cutlass_13_i2) /* ty=Tensor[(8, 188, 200, 256), float16] */
}

def @tvmgen_default_cutlass_main_130(%cutlass_130_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_130_i1: Tensor[(512, 1, 1, 1024), float16], %cutlass_130_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_130", Primitive=1) -> Tensor[(8, 47, 50, 512), float16] {
  %1320 = fn (%FunctionVar_5_01: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_5_11: Tensor[(512, 1, 1, 1024), float16], %FunctionVar_5_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 512), float16] {
    %1318 = nn.conv2d(%FunctionVar_5_01, %FunctionVar_5_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 512), float16] */;
    %1319 = add(%1318, %FunctionVar_5_21) /* ty=Tensor[(8, 47, 50, 512), float16] */;
    nn.relu(%1319) /* ty=Tensor[(8, 47, 50, 512), float16] */
  };
  %1320(%cutlass_130_i0, %cutlass_130_i1, %cutlass_130_i2) /* ty=Tensor[(8, 47, 50, 512), float16] */
}

def @tvmgen_default_cutlass_main_133(%cutlass_133_i0: Tensor[(8, 47, 50, 512), float16], %cutlass_133_i1: Tensor[(512, 3, 3, 512), float16], %cutlass_133_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_133", Primitive=1) -> Tensor[(8, 24, 25, 512), float16] {
  %1323 = fn (%FunctionVar_4_0: Tensor[(8, 47, 50, 512), float16], %FunctionVar_4_1: Tensor[(512, 3, 3, 512), float16], %FunctionVar_4_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 24, 25, 512), float16] {
    %1321 = nn.conv2d(%FunctionVar_4_0, %FunctionVar_4_1, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 512), float16] */;
    %1322 = add(%1321, %FunctionVar_4_2) /* ty=Tensor[(8, 24, 25, 512), float16] */;
    nn.relu(%1322) /* ty=Tensor[(8, 24, 25, 512), float16] */
  };
  %1323(%cutlass_133_i0, %cutlass_133_i1, %cutlass_133_i2) /* ty=Tensor[(8, 24, 25, 512), float16] */
}

def @tvmgen_default_cutlass_main_136(%cutlass_136_i0: Tensor[(8, 24, 25, 512), float16], %cutlass_136_i1: Tensor[(2048, 1, 1, 512), float16], %cutlass_136_i2: Tensor[(1, 1, 1, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_136", Primitive=1) -> Tensor[(8, 24, 25, 2048), float16] {
  %1325 = fn (%FunctionVar_4_01: Tensor[(8, 24, 25, 512), float16], %FunctionVar_4_11: Tensor[(2048, 1, 1, 512), float16], %FunctionVar_4_21: Tensor[(1, 1, 1, 2048), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 24, 25, 2048), float16] {
    %1324 = nn.conv2d(%FunctionVar_4_01, %FunctionVar_4_11, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 2048), float16] */;
    add(%1324, %FunctionVar_4_21) /* ty=Tensor[(8, 24, 25, 2048), float16] */
  };
  %1325(%cutlass_136_i0, %cutlass_136_i1, %cutlass_136_i2) /* ty=Tensor[(8, 24, 25, 2048), float16] */
}

def @tvmgen_default_cutlass_main_139(%cutlass_139_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_139_i1: Tensor[(2048, 1, 1, 1024), float16], %cutlass_139_i2: Tensor[(1, 1, 1, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_139", Primitive=1) -> Tensor[(8, 24, 25, 2048), float16] {
  %1327 = fn (%FunctionVar_3_0: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_3_1: Tensor[(2048, 1, 1, 1024), float16], %FunctionVar_3_2: Tensor[(1, 1, 1, 2048), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 24, 25, 2048), float16] {
    %1326 = nn.conv2d(%FunctionVar_3_0, %FunctionVar_3_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 2048), float16] */;
    add(%1326, %FunctionVar_3_2) /* ty=Tensor[(8, 24, 25, 2048), float16] */
  };
  %1327(%cutlass_139_i0, %cutlass_139_i1, %cutlass_139_i2) /* ty=Tensor[(8, 24, 25, 2048), float16] */
}

def @tvmgen_default_cutlass_main_142(%cutlass_142_i0: Tensor[(8, 24, 25, 2048), float16], %cutlass_142_i1: Tensor[(512, 1, 1, 2048), float16], %cutlass_142_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_142", Primitive=1) -> Tensor[(8, 24, 25, 512), float16] {
  %1330 = fn (%FunctionVar_3_01: Tensor[(8, 24, 25, 2048), float16], %FunctionVar_3_11: Tensor[(512, 1, 1, 2048), float16], %FunctionVar_3_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 24, 25, 512), float16] {
    %1328 = nn.conv2d(%FunctionVar_3_01, %FunctionVar_3_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 512), float16] */;
    %1329 = add(%1328, %FunctionVar_3_21) /* ty=Tensor[(8, 24, 25, 512), float16] */;
    nn.relu(%1329) /* ty=Tensor[(8, 24, 25, 512), float16] */
  };
  %1330(%cutlass_142_i0, %cutlass_142_i1, %cutlass_142_i2) /* ty=Tensor[(8, 24, 25, 512), float16] */
}

def @tvmgen_default_cutlass_main_145(%cutlass_145_i0: Tensor[(8, 24, 25, 512), float16], %cutlass_145_i1: Tensor[(512, 3, 3, 512), float16], %cutlass_145_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_145", Primitive=1) -> Tensor[(8, 24, 25, 512), float16] {
  %1333 = fn (%FunctionVar_2_0: Tensor[(8, 24, 25, 512), float16], %FunctionVar_2_1: Tensor[(512, 3, 3, 512), float16], %FunctionVar_2_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 24, 25, 512), float16] {
    %1331 = nn.conv2d(%FunctionVar_2_0, %FunctionVar_2_1, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 512), float16] */;
    %1332 = add(%1331, %FunctionVar_2_2) /* ty=Tensor[(8, 24, 25, 512), float16] */;
    nn.relu(%1332) /* ty=Tensor[(8, 24, 25, 512), float16] */
  };
  %1333(%cutlass_145_i0, %cutlass_145_i1, %cutlass_145_i2) /* ty=Tensor[(8, 24, 25, 512), float16] */
}

def @tvmgen_default_cutlass_main_148(%cutlass_148_i0: Tensor[(8, 24, 25, 512), float16], %cutlass_148_i1: Tensor[(2048, 1, 1, 512), float16], %cutlass_148_i2: Tensor[(1, 1, 1, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_148", Primitive=1) -> Tensor[(8, 24, 25, 2048), float16] {
  %1335 = fn (%FunctionVar_2_01: Tensor[(8, 24, 25, 512), float16], %FunctionVar_2_11: Tensor[(2048, 1, 1, 512), float16], %FunctionVar_2_21: Tensor[(1, 1, 1, 2048), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 24, 25, 2048), float16] {
    %1334 = nn.conv2d(%FunctionVar_2_01, %FunctionVar_2_11, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 2048), float16] */;
    add(%1334, %FunctionVar_2_21) /* ty=Tensor[(8, 24, 25, 2048), float16] */
  };
  %1335(%cutlass_148_i0, %cutlass_148_i1, %cutlass_148_i2) /* ty=Tensor[(8, 24, 25, 2048), float16] */
}

def @tvmgen_default_cutlass_main_151(%cutlass_151_i0: Tensor[(8, 24, 25, 2048), float16], %cutlass_151_i1: Tensor[(512, 1, 1, 2048), float16], %cutlass_151_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_151", Primitive=1) -> Tensor[(8, 24, 25, 512), float16] {
  %1338 = fn (%FunctionVar_1_0: Tensor[(8, 24, 25, 2048), float16], %FunctionVar_1_1: Tensor[(512, 1, 1, 2048), float16], %FunctionVar_1_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 24, 25, 512), float16] {
    %1336 = nn.conv2d(%FunctionVar_1_0, %FunctionVar_1_1, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 512), float16] */;
    %1337 = add(%1336, %FunctionVar_1_2) /* ty=Tensor[(8, 24, 25, 512), float16] */;
    nn.relu(%1337) /* ty=Tensor[(8, 24, 25, 512), float16] */
  };
  %1338(%cutlass_151_i0, %cutlass_151_i1, %cutlass_151_i2) /* ty=Tensor[(8, 24, 25, 512), float16] */
}

def @tvmgen_default_cutlass_main_154(%cutlass_154_i0: Tensor[(8, 24, 25, 512), float16], %cutlass_154_i1: Tensor[(512, 3, 3, 512), float16], %cutlass_154_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_154", Primitive=1) -> Tensor[(8, 24, 25, 512), float16] {
  %1341 = fn (%FunctionVar_0_0: Tensor[(8, 24, 25, 512), float16], %FunctionVar_0_1: Tensor[(512, 3, 3, 512), float16], %FunctionVar_0_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 24, 25, 512), float16] {
    %1339 = nn.conv2d(%FunctionVar_0_0, %FunctionVar_0_1, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 512), float16] */;
    %1340 = add(%1339, %FunctionVar_0_2) /* ty=Tensor[(8, 24, 25, 512), float16] */;
    nn.relu(%1340) /* ty=Tensor[(8, 24, 25, 512), float16] */
  };
  %1341(%cutlass_154_i0, %cutlass_154_i1, %cutlass_154_i2) /* ty=Tensor[(8, 24, 25, 512), float16] */
}

def @tvmgen_default_cutlass_main_157(%cutlass_157_i0: Tensor[(8, 24, 25, 512), float16], %cutlass_157_i1: Tensor[(2048, 1, 1, 512), float16], %cutlass_157_i2: Tensor[(1, 1, 1, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_157", Primitive=1) -> Tensor[(8, 24, 25, 2048), float16] {
  %1343 = fn (%FunctionVar_1_01: Tensor[(8, 24, 25, 512), float16], %FunctionVar_1_11: Tensor[(2048, 1, 1, 512), float16], %FunctionVar_1_21: Tensor[(1, 1, 1, 2048), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 24, 25, 2048), float16] {
    %1342 = nn.conv2d(%FunctionVar_1_01, %FunctionVar_1_11, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 2048), float16] */;
    add(%1342, %FunctionVar_1_21) /* ty=Tensor[(8, 24, 25, 2048), float16] */
  };
  %1343(%cutlass_157_i0, %cutlass_157_i1, %cutlass_157_i2) /* ty=Tensor[(8, 24, 25, 2048), float16] */
}

def @tvmgen_default_cutlass_main_16(%cutlass_16_i0: Tensor[(8, 188, 200, 256), float16], %cutlass_16_i1: Tensor[(64, 1, 1, 256), float16], %cutlass_16_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_16", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1346 = fn (%FunctionVar_29_0: Tensor[(8, 188, 200, 256), float16], %FunctionVar_29_1: Tensor[(64, 1, 1, 256), float16], %FunctionVar_29_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1344 = nn.conv2d(%FunctionVar_29_0, %FunctionVar_29_1, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1345 = add(%1344, %FunctionVar_29_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1345) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1346(%cutlass_16_i0, %cutlass_16_i1, %cutlass_16_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_160(%cutlass_160_i0: Tensor[(8, 24, 25, 2048), float16], %cutlass_160_i1: Tensor[(256, 1, 1, 2048), float16], %cutlass_160_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_160", Primitive=1) -> Tensor[(8, 24, 25, 256), float16] {
  %1348 = fn (%FunctionVar_0_01: Tensor[(8, 24, 25, 2048), float16], %FunctionVar_0_11: Tensor[(256, 1, 1, 2048), float16], %FunctionVar_0_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 24, 25, 256), float16] {
    %1347 = nn.conv2d(%FunctionVar_0_01, %FunctionVar_0_11, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 24, 25, 256), float16] */;
    add(%1347, %FunctionVar_0_21) /* ty=Tensor[(8, 24, 25, 256), float16] */
  };
  %1348(%cutlass_160_i0, %cutlass_160_i1, %cutlass_160_i2) /* ty=Tensor[(8, 24, 25, 256), float16] */
}

def @tvmgen_default_cutlass_main_163(%cutlass_163_i0: Tensor[(4800, 256), float16], %cutlass_163_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_163", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1349 = fn (%FunctionVar_94_0: Tensor[(4800, 256), float16], %FunctionVar_94_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_94_0, %FunctionVar_94_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1349(%cutlass_163_i0, %cutlass_163_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_165(%cutlass_165_i0: Tensor[(64, 600, 32), float16], %cutlass_165_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_165", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1350 = fn (%FunctionVar_33_0: Tensor[(64, 600, 32), float16], %FunctionVar_33_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_33_0, %FunctionVar_33_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1350(%cutlass_165_i0, %cutlass_165_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_166(%cutlass_166_i0: Tensor[(4800, 256), float16], %cutlass_166_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_166", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1351 = fn (%FunctionVar_93_0: Tensor[(4800, 256), float16], %FunctionVar_93_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_93_0, %FunctionVar_93_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1351(%cutlass_166_i0, %cutlass_166_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_169(%cutlass_169_i0: Tensor[(64, 600, 600), float16], %cutlass_169_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_169", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1352 = fn (%FunctionVar_32_01: Tensor[(64, 600, 600), float16], %FunctionVar_32_11: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_32_01, %FunctionVar_32_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1352(%cutlass_169_i0, %cutlass_169_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_170(%cutlass_170_i0: Tensor[(4800, 256), float16], %cutlass_170_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_170", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1353 = fn (%FunctionVar_92_0: Tensor[(4800, 256), float16], %FunctionVar_92_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_92_0, %FunctionVar_92_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1353(%cutlass_170_i0, %cutlass_170_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_173(%cutlass_173_i0: Tensor[(4800, 256), float16], %cutlass_173_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_173", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1354 = fn (%FunctionVar_91_0: Tensor[(4800, 256), float16], %FunctionVar_91_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_91_0, %FunctionVar_91_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1354(%cutlass_173_i0, %cutlass_173_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_175(%cutlass_175_i0: Tensor[(4800, 256), float16], %cutlass_175_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_175", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1355 = fn (%FunctionVar_90_0: Tensor[(4800, 256), float16], %FunctionVar_90_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_90_0, %FunctionVar_90_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1355(%cutlass_175_i0, %cutlass_175_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_177(%cutlass_177_i0: Tensor[(4800, 2048), float16], %cutlass_177_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_177", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1356 = fn (%FunctionVar_89_0: Tensor[(4800, 2048), float16], %FunctionVar_89_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_89_0, %FunctionVar_89_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1356(%cutlass_177_i0, %cutlass_177_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_179(%cutlass_179_i0: Tensor[(4800, 256), float16], %cutlass_179_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_179", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1357 = fn (%FunctionVar_88_0: Tensor[(4800, 256), float16], %FunctionVar_88_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_88_0, %FunctionVar_88_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1357(%cutlass_179_i0, %cutlass_179_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_181(%cutlass_181_i0: Tensor[(64, 600, 32), float16], %cutlass_181_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_181", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1358 = fn (%FunctionVar_31_0: Tensor[(64, 600, 32), float16], %FunctionVar_31_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_31_0, %FunctionVar_31_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1358(%cutlass_181_i0, %cutlass_181_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_182(%cutlass_182_i0: Tensor[(4800, 256), float16], %cutlass_182_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_182", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1359 = fn (%FunctionVar_87_0: Tensor[(4800, 256), float16], %FunctionVar_87_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_87_0, %FunctionVar_87_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1359(%cutlass_182_i0, %cutlass_182_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_185(%cutlass_185_i0: Tensor[(64, 600, 600), float16], %cutlass_185_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_185", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1360 = fn (%FunctionVar_30_0: Tensor[(64, 600, 600), float16], %FunctionVar_30_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_30_0, %FunctionVar_30_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1360(%cutlass_185_i0, %cutlass_185_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_186(%cutlass_186_i0: Tensor[(4800, 256), float16], %cutlass_186_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_186", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1361 = fn (%FunctionVar_86_0: Tensor[(4800, 256), float16], %FunctionVar_86_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_86_0, %FunctionVar_86_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1361(%cutlass_186_i0, %cutlass_186_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_189(%cutlass_189_i0: Tensor[(4800, 256), float16], %cutlass_189_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_189", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1362 = fn (%FunctionVar_85_0: Tensor[(4800, 256), float16], %FunctionVar_85_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_85_0, %FunctionVar_85_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1362(%cutlass_189_i0, %cutlass_189_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_19(%cutlass_19_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_19_i1: Tensor[(64, 3, 3, 64), float16], %cutlass_19_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_19", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1365 = fn (%FunctionVar_28_0: Tensor[(8, 188, 200, 64), float16], %FunctionVar_28_1: Tensor[(64, 3, 3, 64), float16], %FunctionVar_28_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1363 = nn.conv2d(%FunctionVar_28_0, %FunctionVar_28_1, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1364 = add(%1363, %FunctionVar_28_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1364) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1365(%cutlass_19_i0, %cutlass_19_i1, %cutlass_19_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_191(%cutlass_191_i0: Tensor[(4800, 256), float16], %cutlass_191_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_191", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1366 = fn (%FunctionVar_84_0: Tensor[(4800, 256), float16], %FunctionVar_84_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_84_0, %FunctionVar_84_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1366(%cutlass_191_i0, %cutlass_191_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_193(%cutlass_193_i0: Tensor[(4800, 2048), float16], %cutlass_193_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_193", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1367 = fn (%FunctionVar_83_0: Tensor[(4800, 2048), float16], %FunctionVar_83_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_83_0, %FunctionVar_83_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1367(%cutlass_193_i0, %cutlass_193_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_195(%cutlass_195_i0: Tensor[(4800, 256), float16], %cutlass_195_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_195", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1368 = fn (%FunctionVar_82_0: Tensor[(4800, 256), float16], %FunctionVar_82_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_82_0, %FunctionVar_82_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1368(%cutlass_195_i0, %cutlass_195_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_197(%cutlass_197_i0: Tensor[(64, 600, 32), float16], %cutlass_197_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_197", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1369 = fn (%FunctionVar_29_01: Tensor[(64, 600, 32), float16], %FunctionVar_29_11: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_29_01, %FunctionVar_29_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1369(%cutlass_197_i0, %cutlass_197_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_198(%cutlass_198_i0: Tensor[(4800, 256), float16], %cutlass_198_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_198", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1370 = fn (%FunctionVar_81_0: Tensor[(4800, 256), float16], %FunctionVar_81_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_81_0, %FunctionVar_81_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1370(%cutlass_198_i0, %cutlass_198_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_201(%cutlass_201_i0: Tensor[(64, 600, 600), float16], %cutlass_201_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_201", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1371 = fn (%FunctionVar_28_01: Tensor[(64, 600, 600), float16], %FunctionVar_28_11: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_28_01, %FunctionVar_28_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1371(%cutlass_201_i0, %cutlass_201_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_202(%cutlass_202_i0: Tensor[(4800, 256), float16], %cutlass_202_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_202", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1372 = fn (%FunctionVar_80_0: Tensor[(4800, 256), float16], %FunctionVar_80_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_80_0, %FunctionVar_80_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1372(%cutlass_202_i0, %cutlass_202_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_205(%cutlass_205_i0: Tensor[(4800, 256), float16], %cutlass_205_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_205", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1373 = fn (%FunctionVar_79_0: Tensor[(4800, 256), float16], %FunctionVar_79_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_79_0, %FunctionVar_79_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1373(%cutlass_205_i0, %cutlass_205_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_207(%cutlass_207_i0: Tensor[(4800, 256), float16], %cutlass_207_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_207", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1374 = fn (%FunctionVar_78_0: Tensor[(4800, 256), float16], %FunctionVar_78_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_78_0, %FunctionVar_78_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1374(%cutlass_207_i0, %cutlass_207_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_209(%cutlass_209_i0: Tensor[(4800, 2048), float16], %cutlass_209_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_209", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1375 = fn (%FunctionVar_77_0: Tensor[(4800, 2048), float16], %FunctionVar_77_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_77_0, %FunctionVar_77_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1375(%cutlass_209_i0, %cutlass_209_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_211(%cutlass_211_i0: Tensor[(4800, 256), float16], %cutlass_211_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_211", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1376 = fn (%FunctionVar_76_0: Tensor[(4800, 256), float16], %FunctionVar_76_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_76_0, %FunctionVar_76_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1376(%cutlass_211_i0, %cutlass_211_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_213(%cutlass_213_i0: Tensor[(64, 600, 32), float16], %cutlass_213_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_213", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1377 = fn (%FunctionVar_27_0: Tensor[(64, 600, 32), float16], %FunctionVar_27_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_27_0, %FunctionVar_27_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1377(%cutlass_213_i0, %cutlass_213_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_214(%cutlass_214_i0: Tensor[(4800, 256), float16], %cutlass_214_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_214", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1378 = fn (%FunctionVar_75_0: Tensor[(4800, 256), float16], %FunctionVar_75_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_75_0, %FunctionVar_75_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1378(%cutlass_214_i0, %cutlass_214_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_217(%cutlass_217_i0: Tensor[(64, 600, 600), float16], %cutlass_217_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_217", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1379 = fn (%FunctionVar_26_0: Tensor[(64, 600, 600), float16], %FunctionVar_26_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_26_0, %FunctionVar_26_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1379(%cutlass_217_i0, %cutlass_217_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_218(%cutlass_218_i0: Tensor[(4800, 256), float16], %cutlass_218_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_218", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1380 = fn (%FunctionVar_74_0: Tensor[(4800, 256), float16], %FunctionVar_74_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_74_0, %FunctionVar_74_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1380(%cutlass_218_i0, %cutlass_218_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_22(%cutlass_22_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_22_i1: Tensor[(256, 1, 1, 64), float16], %cutlass_22_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_22", Primitive=1) -> Tensor[(8, 188, 200, 256), float16] {
  %1382 = fn (%FunctionVar_18_0: Tensor[(8, 188, 200, 64), float16], %FunctionVar_18_1: Tensor[(256, 1, 1, 64), float16], %FunctionVar_18_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 188, 200, 256), float16] {
    %1381 = nn.conv2d(%FunctionVar_18_0, %FunctionVar_18_1, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 256), float16] */;
    add(%1381, %FunctionVar_18_2) /* ty=Tensor[(8, 188, 200, 256), float16] */
  };
  %1382(%cutlass_22_i0, %cutlass_22_i1, %cutlass_22_i2) /* ty=Tensor[(8, 188, 200, 256), float16] */
}

def @tvmgen_default_cutlass_main_221(%cutlass_221_i0: Tensor[(4800, 256), float16], %cutlass_221_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_221", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1383 = fn (%FunctionVar_73_0: Tensor[(4800, 256), float16], %FunctionVar_73_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_73_0, %FunctionVar_73_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1383(%cutlass_221_i0, %cutlass_221_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_223(%cutlass_223_i0: Tensor[(4800, 256), float16], %cutlass_223_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_223", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1384 = fn (%FunctionVar_72_0: Tensor[(4800, 256), float16], %FunctionVar_72_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_72_0, %FunctionVar_72_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1384(%cutlass_223_i0, %cutlass_223_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_225(%cutlass_225_i0: Tensor[(4800, 2048), float16], %cutlass_225_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_225", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1385 = fn (%FunctionVar_71_0: Tensor[(4800, 2048), float16], %FunctionVar_71_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_71_0, %FunctionVar_71_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1385(%cutlass_225_i0, %cutlass_225_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_227(%cutlass_227_i0: Tensor[(4800, 256), float16], %cutlass_227_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_227", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1386 = fn (%FunctionVar_70_0: Tensor[(4800, 256), float16], %FunctionVar_70_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_70_0, %FunctionVar_70_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1386(%cutlass_227_i0, %cutlass_227_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_229(%cutlass_229_i0: Tensor[(64, 600, 32), float16], %cutlass_229_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_229", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1387 = fn (%FunctionVar_25_0: Tensor[(64, 600, 32), float16], %FunctionVar_25_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_25_0, %FunctionVar_25_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1387(%cutlass_229_i0, %cutlass_229_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_230(%cutlass_230_i0: Tensor[(4800, 256), float16], %cutlass_230_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_230", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1388 = fn (%FunctionVar_69_0: Tensor[(4800, 256), float16], %FunctionVar_69_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_69_0, %FunctionVar_69_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1388(%cutlass_230_i0, %cutlass_230_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_233(%cutlass_233_i0: Tensor[(64, 600, 600), float16], %cutlass_233_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_233", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1389 = fn (%FunctionVar_24_0: Tensor[(64, 600, 600), float16], %FunctionVar_24_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_24_0, %FunctionVar_24_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1389(%cutlass_233_i0, %cutlass_233_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_234(%cutlass_234_i0: Tensor[(4800, 256), float16], %cutlass_234_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_234", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1390 = fn (%FunctionVar_68_0: Tensor[(4800, 256), float16], %FunctionVar_68_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_68_0, %FunctionVar_68_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1390(%cutlass_234_i0, %cutlass_234_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_237(%cutlass_237_i0: Tensor[(4800, 256), float16], %cutlass_237_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_237", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1391 = fn (%FunctionVar_67_0: Tensor[(4800, 256), float16], %FunctionVar_67_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_67_0, %FunctionVar_67_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1391(%cutlass_237_i0, %cutlass_237_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_239(%cutlass_239_i0: Tensor[(4800, 256), float16], %cutlass_239_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_239", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1392 = fn (%FunctionVar_66_0: Tensor[(4800, 256), float16], %FunctionVar_66_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_66_0, %FunctionVar_66_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1392(%cutlass_239_i0, %cutlass_239_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_241(%cutlass_241_i0: Tensor[(4800, 2048), float16], %cutlass_241_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_241", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1393 = fn (%FunctionVar_65_0: Tensor[(4800, 2048), float16], %FunctionVar_65_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_65_0, %FunctionVar_65_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1393(%cutlass_241_i0, %cutlass_241_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_243(%cutlass_243_i0: Tensor[(4800, 256), float16], %cutlass_243_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_243", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1394 = fn (%FunctionVar_64_0: Tensor[(4800, 256), float16], %FunctionVar_64_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_64_0, %FunctionVar_64_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1394(%cutlass_243_i0, %cutlass_243_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_245(%cutlass_245_i0: Tensor[(64, 600, 32), float16], %cutlass_245_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_245", Primitive=1) -> Tensor[(64, 600, 600), float16] {
  %1395 = fn (%FunctionVar_23_0: Tensor[(64, 600, 32), float16], %FunctionVar_23_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 600), float16] {
    nn.batch_matmul(%FunctionVar_23_0, %FunctionVar_23_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 600), float16] */
  };
  %1395(%cutlass_245_i0, %cutlass_245_i1) /* ty=Tensor[(64, 600, 600), float16] */
}

def @tvmgen_default_cutlass_main_246(%cutlass_246_i0: Tensor[(4800, 256), float16], %cutlass_246_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_246", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1396 = fn (%FunctionVar_63_0: Tensor[(4800, 256), float16], %FunctionVar_63_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_63_0, %FunctionVar_63_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1396(%cutlass_246_i0, %cutlass_246_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_249(%cutlass_249_i0: Tensor[(64, 600, 600), float16], %cutlass_249_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_249", Primitive=1) -> Tensor[(64, 600, 32), float16] {
  %1397 = fn (%FunctionVar_22_0: Tensor[(64, 600, 600), float16], %FunctionVar_22_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 600, 32), float16] {
    nn.batch_matmul(%FunctionVar_22_0, %FunctionVar_22_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 600, 32), float16] */
  };
  %1397(%cutlass_249_i0, %cutlass_249_i1) /* ty=Tensor[(64, 600, 32), float16] */
}

def @tvmgen_default_cutlass_main_25(%cutlass_25_i0: Tensor[(8, 188, 200, 256), float16], %cutlass_25_i1: Tensor[(64, 1, 1, 256), float16], %cutlass_25_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_25", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1400 = fn (%FunctionVar_27_01: Tensor[(8, 188, 200, 256), float16], %FunctionVar_27_11: Tensor[(64, 1, 1, 256), float16], %FunctionVar_27_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1398 = nn.conv2d(%FunctionVar_27_01, %FunctionVar_27_11, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1399 = add(%1398, %FunctionVar_27_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1399) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1400(%cutlass_25_i0, %cutlass_25_i1, %cutlass_25_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_250(%cutlass_250_i0: Tensor[(4800, 256), float16], %cutlass_250_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_250", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1401 = fn (%FunctionVar_62_0: Tensor[(4800, 256), float16], %FunctionVar_62_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_62_0, %FunctionVar_62_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1401(%cutlass_250_i0, %cutlass_250_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_253(%cutlass_253_i0: Tensor[(4800, 256), float16], %cutlass_253_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_253", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1402 = fn (%FunctionVar_61_0: Tensor[(4800, 256), float16], %FunctionVar_61_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_61_0, %FunctionVar_61_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1402(%cutlass_253_i0, %cutlass_253_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_255(%cutlass_255_i0: Tensor[(4800, 256), float16], %cutlass_255_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_255", Primitive=1) -> Tensor[(4800, 2048), float16] {
  %1403 = fn (%FunctionVar_60_0: Tensor[(4800, 256), float16], %FunctionVar_60_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 2048), float16] {
    nn.dense(%FunctionVar_60_0, %FunctionVar_60_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 2048), float16] */
  };
  %1403(%cutlass_255_i0, %cutlass_255_i1) /* ty=Tensor[(4800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_257(%cutlass_257_i0: Tensor[(4800, 2048), float16], %cutlass_257_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_257", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1404 = fn (%FunctionVar_59_0: Tensor[(4800, 2048), float16], %FunctionVar_59_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_59_0, %FunctionVar_59_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1404(%cutlass_257_i0, %cutlass_257_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_259(%cutlass_259_i0: Tensor[(4800, 256), float16], %cutlass_259_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_259", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1405 = fn (%FunctionVar_58_0: Tensor[(4800, 256), float16], %FunctionVar_58_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_58_0, %FunctionVar_58_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1405(%cutlass_259_i0, %cutlass_259_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_262(%cutlass_262_i0: Tensor[(64, 100, 600), float16], %cutlass_262_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_262", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1406 = fn (%FunctionVar_20_01: Tensor[(64, 100, 600), float16], %FunctionVar_20_11: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_20_01, %FunctionVar_20_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1406(%cutlass_262_i0, %cutlass_262_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_263(%cutlass_263_i0: Tensor[(4800, 256), float16], %cutlass_263_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_263", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1407 = fn (%FunctionVar_57_0: Tensor[(4800, 256), float16], %FunctionVar_57_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_57_0, %FunctionVar_57_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1407(%cutlass_263_i0, %cutlass_263_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_266(%cutlass_266_i0: Tensor[(800, 256), float16], %cutlass_266_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_266", Primitive=1) -> Tensor[(800, 256), float16] {
  %1408 = fn (%FunctionVar_56_0: Tensor[(800, 256), float16], %FunctionVar_56_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_56_0, %FunctionVar_56_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1408(%cutlass_266_i0, %cutlass_266_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_268(%cutlass_268_i0: Tensor[(800, 256), float16], %cutlass_268_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_268", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1409 = fn (%FunctionVar_55_0: Tensor[(800, 256), float16], %FunctionVar_55_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_55_0, %FunctionVar_55_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1409(%cutlass_268_i0, %cutlass_268_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_270(%cutlass_270_i0: Tensor[(800, 2048), float16], %cutlass_270_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_270", Primitive=1) -> Tensor[(800, 256), float16] {
  %1410 = fn (%FunctionVar_54_0: Tensor[(800, 2048), float16], %FunctionVar_54_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_54_0, %FunctionVar_54_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1410(%cutlass_270_i0, %cutlass_270_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_272(%cutlass_272_i0: Tensor[(800, 256), float16], %cutlass_272_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_272", Primitive=1) -> Tensor[(800, 256), float16] {
  %1411 = fn (%FunctionVar_53_0: Tensor[(800, 256), float16], %FunctionVar_53_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_53_0, %FunctionVar_53_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1411(%cutlass_272_i0, %cutlass_272_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_274(%cutlass_274_i0: Tensor[(64, 100, 32), float16], %cutlass_274_i1: Tensor[(64, 100, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_274", Primitive=1) -> Tensor[(64, 100, 100), float16] {
  %1412 = fn (%FunctionVar_19_01: Tensor[(64, 100, 32), float16], %FunctionVar_19_11: Tensor[(64, 100, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 100), float16] {
    nn.batch_matmul(%FunctionVar_19_01, %FunctionVar_19_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 100), float16] */
  };
  %1412(%cutlass_274_i0, %cutlass_274_i1) /* ty=Tensor[(64, 100, 100), float16] */
}

def @tvmgen_default_cutlass_main_275(%cutlass_275_i0: Tensor[(800, 256), float16], %cutlass_275_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_275", Primitive=1) -> Tensor[(800, 256), float16] {
  %1413 = fn (%FunctionVar_52_0: Tensor[(800, 256), float16], %FunctionVar_52_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_52_0, %FunctionVar_52_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1413(%cutlass_275_i0, %cutlass_275_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_278(%cutlass_278_i0: Tensor[(64, 100, 100), float16], %cutlass_278_i1: Tensor[(64, 32, 100), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_278", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1414 = fn (%FunctionVar_18_01: Tensor[(64, 100, 100), float16], %FunctionVar_18_11: Tensor[(64, 32, 100), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_18_01, %FunctionVar_18_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1414(%cutlass_278_i0, %cutlass_278_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_279(%cutlass_279_i0: Tensor[(800, 256), float16], %cutlass_279_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_279", Primitive=1) -> Tensor[(800, 256), float16] {
  %1415 = fn (%FunctionVar_51_0: Tensor[(800, 256), float16], %FunctionVar_51_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_51_0, %FunctionVar_51_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1415(%cutlass_279_i0, %cutlass_279_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_28(%cutlass_28_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_28_i1: Tensor[(64, 3, 3, 64), float16], %cutlass_28_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_28", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1418 = fn (%FunctionVar_26_01: Tensor[(8, 188, 200, 64), float16], %FunctionVar_26_11: Tensor[(64, 3, 3, 64), float16], %FunctionVar_26_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1416 = nn.conv2d(%FunctionVar_26_01, %FunctionVar_26_11, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1417 = add(%1416, %FunctionVar_26_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1417) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1418(%cutlass_28_i0, %cutlass_28_i1, %cutlass_28_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_282(%cutlass_282_i0: Tensor[(800, 256), float16], %cutlass_282_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_282", Primitive=1) -> Tensor[(800, 256), float16] {
  %1419 = fn (%FunctionVar_50_0: Tensor[(800, 256), float16], %FunctionVar_50_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_50_0, %FunctionVar_50_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1419(%cutlass_282_i0, %cutlass_282_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_284(%cutlass_284_i0: Tensor[(800, 256), float16], %cutlass_284_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_284", Primitive=1) -> Tensor[(800, 256), float16] {
  %1420 = fn (%FunctionVar_49_0: Tensor[(800, 256), float16], %FunctionVar_49_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_49_0, %FunctionVar_49_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1420(%cutlass_284_i0, %cutlass_284_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_286(%cutlass_286_i0: Tensor[(64, 100, 32), float16], %cutlass_286_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_286", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1421 = fn (%FunctionVar_17_0: Tensor[(64, 100, 32), float16], %FunctionVar_17_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_17_0, %FunctionVar_17_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1421(%cutlass_286_i0, %cutlass_286_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_287(%cutlass_287_i0: Tensor[(4800, 256), float16], %cutlass_287_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_287", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1422 = fn (%FunctionVar_48_0: Tensor[(4800, 256), float16], %FunctionVar_48_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_48_0, %FunctionVar_48_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1422(%cutlass_287_i0, %cutlass_287_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_290(%cutlass_290_i0: Tensor[(64, 100, 600), float16], %cutlass_290_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_290", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1423 = fn (%FunctionVar_16_0: Tensor[(64, 100, 600), float16], %FunctionVar_16_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_16_0, %FunctionVar_16_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1423(%cutlass_290_i0, %cutlass_290_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_291(%cutlass_291_i0: Tensor[(4800, 256), float16], %cutlass_291_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_291", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1424 = fn (%FunctionVar_47_0: Tensor[(4800, 256), float16], %FunctionVar_47_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_47_0, %FunctionVar_47_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1424(%cutlass_291_i0, %cutlass_291_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_294(%cutlass_294_i0: Tensor[(800, 256), float16], %cutlass_294_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_294", Primitive=1) -> Tensor[(800, 256), float16] {
  %1425 = fn (%FunctionVar_46_0: Tensor[(800, 256), float16], %FunctionVar_46_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_46_0, %FunctionVar_46_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1425(%cutlass_294_i0, %cutlass_294_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_296(%cutlass_296_i0: Tensor[(800, 256), float16], %cutlass_296_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_296", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1426 = fn (%FunctionVar_45_0: Tensor[(800, 256), float16], %FunctionVar_45_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_45_0, %FunctionVar_45_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1426(%cutlass_296_i0, %cutlass_296_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_298(%cutlass_298_i0: Tensor[(800, 2048), float16], %cutlass_298_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_298", Primitive=1) -> Tensor[(800, 256), float16] {
  %1427 = fn (%FunctionVar_44_0: Tensor[(800, 2048), float16], %FunctionVar_44_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_44_0, %FunctionVar_44_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1427(%cutlass_298_i0, %cutlass_298_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_300(%cutlass_300_i0: Tensor[(800, 256), float16], %cutlass_300_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_300", Primitive=1) -> Tensor[(800, 256), float16] {
  %1428 = fn (%FunctionVar_43_0: Tensor[(800, 256), float16], %FunctionVar_43_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_43_0, %FunctionVar_43_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1428(%cutlass_300_i0, %cutlass_300_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_302(%cutlass_302_i0: Tensor[(64, 100, 32), float16], %cutlass_302_i1: Tensor[(64, 100, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_302", Primitive=1) -> Tensor[(64, 100, 100), float16] {
  %1429 = fn (%FunctionVar_15_0: Tensor[(64, 100, 32), float16], %FunctionVar_15_1: Tensor[(64, 100, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 100), float16] {
    nn.batch_matmul(%FunctionVar_15_0, %FunctionVar_15_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 100), float16] */
  };
  %1429(%cutlass_302_i0, %cutlass_302_i1) /* ty=Tensor[(64, 100, 100), float16] */
}

def @tvmgen_default_cutlass_main_303(%cutlass_303_i0: Tensor[(800, 256), float16], %cutlass_303_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_303", Primitive=1) -> Tensor[(800, 256), float16] {
  %1430 = fn (%FunctionVar_42_0: Tensor[(800, 256), float16], %FunctionVar_42_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_42_0, %FunctionVar_42_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1430(%cutlass_303_i0, %cutlass_303_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_306(%cutlass_306_i0: Tensor[(64, 100, 100), float16], %cutlass_306_i1: Tensor[(64, 32, 100), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_306", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1431 = fn (%FunctionVar_14_0: Tensor[(64, 100, 100), float16], %FunctionVar_14_1: Tensor[(64, 32, 100), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_14_0, %FunctionVar_14_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1431(%cutlass_306_i0, %cutlass_306_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_307(%cutlass_307_i0: Tensor[(800, 256), float16], %cutlass_307_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_307", Primitive=1) -> Tensor[(800, 256), float16] {
  %1432 = fn (%FunctionVar_41_0: Tensor[(800, 256), float16], %FunctionVar_41_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_41_0, %FunctionVar_41_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1432(%cutlass_307_i0, %cutlass_307_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_31(%cutlass_31_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_31_i1: Tensor[(256, 1, 1, 64), float16], %cutlass_31_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_31", Primitive=1) -> Tensor[(8, 188, 200, 256), float16] {
  %1434 = fn (%FunctionVar_17_01: Tensor[(8, 188, 200, 64), float16], %FunctionVar_17_11: Tensor[(256, 1, 1, 64), float16], %FunctionVar_17_2: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 188, 200, 256), float16] {
    %1433 = nn.conv2d(%FunctionVar_17_01, %FunctionVar_17_11, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 256), float16] */;
    add(%1433, %FunctionVar_17_2) /* ty=Tensor[(8, 188, 200, 256), float16] */
  };
  %1434(%cutlass_31_i0, %cutlass_31_i1, %cutlass_31_i2) /* ty=Tensor[(8, 188, 200, 256), float16] */
}

def @tvmgen_default_cutlass_main_310(%cutlass_310_i0: Tensor[(800, 256), float16], %cutlass_310_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_310", Primitive=1) -> Tensor[(800, 256), float16] {
  %1435 = fn (%FunctionVar_40_0: Tensor[(800, 256), float16], %FunctionVar_40_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_40_0, %FunctionVar_40_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1435(%cutlass_310_i0, %cutlass_310_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_312(%cutlass_312_i0: Tensor[(800, 256), float16], %cutlass_312_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_312", Primitive=1) -> Tensor[(800, 256), float16] {
  %1436 = fn (%FunctionVar_39_0: Tensor[(800, 256), float16], %FunctionVar_39_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_39_0, %FunctionVar_39_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1436(%cutlass_312_i0, %cutlass_312_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_314(%cutlass_314_i0: Tensor[(64, 100, 32), float16], %cutlass_314_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_314", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1437 = fn (%FunctionVar_13_0: Tensor[(64, 100, 32), float16], %FunctionVar_13_1: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_13_0, %FunctionVar_13_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1437(%cutlass_314_i0, %cutlass_314_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_315(%cutlass_315_i0: Tensor[(4800, 256), float16], %cutlass_315_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_315", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1438 = fn (%FunctionVar_38_0: Tensor[(4800, 256), float16], %FunctionVar_38_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_38_0, %FunctionVar_38_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1438(%cutlass_315_i0, %cutlass_315_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_318(%cutlass_318_i0: Tensor[(64, 100, 600), float16], %cutlass_318_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_318", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1439 = fn (%FunctionVar_12_0: Tensor[(64, 100, 600), float16], %FunctionVar_12_1: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_12_0, %FunctionVar_12_1, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1439(%cutlass_318_i0, %cutlass_318_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_319(%cutlass_319_i0: Tensor[(4800, 256), float16], %cutlass_319_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_319", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1440 = fn (%FunctionVar_37_0: Tensor[(4800, 256), float16], %FunctionVar_37_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_37_0, %FunctionVar_37_1, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1440(%cutlass_319_i0, %cutlass_319_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_322(%cutlass_322_i0: Tensor[(800, 256), float16], %cutlass_322_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_322", Primitive=1) -> Tensor[(800, 256), float16] {
  %1441 = fn (%FunctionVar_36_0: Tensor[(800, 256), float16], %FunctionVar_36_1: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_36_0, %FunctionVar_36_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1441(%cutlass_322_i0, %cutlass_322_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_324(%cutlass_324_i0: Tensor[(800, 256), float16], %cutlass_324_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_324", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1442 = fn (%FunctionVar_35_0: Tensor[(800, 256), float16], %FunctionVar_35_1: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_35_0, %FunctionVar_35_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1442(%cutlass_324_i0, %cutlass_324_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_326(%cutlass_326_i0: Tensor[(800, 2048), float16], %cutlass_326_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_326", Primitive=1) -> Tensor[(800, 256), float16] {
  %1443 = fn (%FunctionVar_34_0: Tensor[(800, 2048), float16], %FunctionVar_34_1: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_34_0, %FunctionVar_34_1, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1443(%cutlass_326_i0, %cutlass_326_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_328(%cutlass_328_i0: Tensor[(800, 256), float16], %cutlass_328_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_328", Primitive=1) -> Tensor[(800, 256), float16] {
  %1444 = fn (%FunctionVar_33_01: Tensor[(800, 256), float16], %FunctionVar_33_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_33_01, %FunctionVar_33_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1444(%cutlass_328_i0, %cutlass_328_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_330(%cutlass_330_i0: Tensor[(64, 100, 32), float16], %cutlass_330_i1: Tensor[(64, 100, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_330", Primitive=1) -> Tensor[(64, 100, 100), float16] {
  %1445 = fn (%FunctionVar_11_01: Tensor[(64, 100, 32), float16], %FunctionVar_11_11: Tensor[(64, 100, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 100), float16] {
    nn.batch_matmul(%FunctionVar_11_01, %FunctionVar_11_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 100), float16] */
  };
  %1445(%cutlass_330_i0, %cutlass_330_i1) /* ty=Tensor[(64, 100, 100), float16] */
}

def @tvmgen_default_cutlass_main_331(%cutlass_331_i0: Tensor[(800, 256), float16], %cutlass_331_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_331", Primitive=1) -> Tensor[(800, 256), float16] {
  %1446 = fn (%FunctionVar_32_02: Tensor[(800, 256), float16], %FunctionVar_32_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_32_02, %FunctionVar_32_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1446(%cutlass_331_i0, %cutlass_331_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_334(%cutlass_334_i0: Tensor[(64, 100, 100), float16], %cutlass_334_i1: Tensor[(64, 32, 100), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_334", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1447 = fn (%FunctionVar_10_01: Tensor[(64, 100, 100), float16], %FunctionVar_10_11: Tensor[(64, 32, 100), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_10_01, %FunctionVar_10_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1447(%cutlass_334_i0, %cutlass_334_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_335(%cutlass_335_i0: Tensor[(800, 256), float16], %cutlass_335_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_335", Primitive=1) -> Tensor[(800, 256), float16] {
  %1448 = fn (%FunctionVar_31_01: Tensor[(800, 256), float16], %FunctionVar_31_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_31_01, %FunctionVar_31_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1448(%cutlass_335_i0, %cutlass_335_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_338(%cutlass_338_i0: Tensor[(800, 256), float16], %cutlass_338_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_338", Primitive=1) -> Tensor[(800, 256), float16] {
  %1449 = fn (%FunctionVar_30_01: Tensor[(800, 256), float16], %FunctionVar_30_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_30_01, %FunctionVar_30_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1449(%cutlass_338_i0, %cutlass_338_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_34(%cutlass_34_i0: Tensor[(8, 188, 200, 256), float16], %cutlass_34_i1: Tensor[(128, 1, 1, 256), float16], %cutlass_34_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_34", Primitive=1) -> Tensor[(8, 188, 200, 128), float16] {
  %1452 = fn (%FunctionVar_25_01: Tensor[(8, 188, 200, 256), float16], %FunctionVar_25_11: Tensor[(128, 1, 1, 256), float16], %FunctionVar_25_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 128), float16] {
    %1450 = nn.conv2d(%FunctionVar_25_01, %FunctionVar_25_11, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 128), float16] */;
    %1451 = add(%1450, %FunctionVar_25_2) /* ty=Tensor[(8, 188, 200, 128), float16] */;
    nn.relu(%1451) /* ty=Tensor[(8, 188, 200, 128), float16] */
  };
  %1452(%cutlass_34_i0, %cutlass_34_i1, %cutlass_34_i2) /* ty=Tensor[(8, 188, 200, 128), float16] */
}

def @tvmgen_default_cutlass_main_340(%cutlass_340_i0: Tensor[(800, 256), float16], %cutlass_340_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_340", Primitive=1) -> Tensor[(800, 256), float16] {
  %1453 = fn (%FunctionVar_29_02: Tensor[(800, 256), float16], %FunctionVar_29_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_29_02, %FunctionVar_29_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1453(%cutlass_340_i0, %cutlass_340_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_342(%cutlass_342_i0: Tensor[(64, 100, 32), float16], %cutlass_342_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_342", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1454 = fn (%FunctionVar_9_01: Tensor[(64, 100, 32), float16], %FunctionVar_9_11: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_9_01, %FunctionVar_9_11, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1454(%cutlass_342_i0, %cutlass_342_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_343(%cutlass_343_i0: Tensor[(4800, 256), float16], %cutlass_343_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_343", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1455 = fn (%FunctionVar_28_02: Tensor[(4800, 256), float16], %FunctionVar_28_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_28_02, %FunctionVar_28_12, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1455(%cutlass_343_i0, %cutlass_343_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_346(%cutlass_346_i0: Tensor[(64, 100, 600), float16], %cutlass_346_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_346", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1456 = fn (%FunctionVar_8_02: Tensor[(64, 100, 600), float16], %FunctionVar_8_12: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_8_02, %FunctionVar_8_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1456(%cutlass_346_i0, %cutlass_346_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_347(%cutlass_347_i0: Tensor[(4800, 256), float16], %cutlass_347_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_347", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1457 = fn (%FunctionVar_27_02: Tensor[(4800, 256), float16], %FunctionVar_27_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_27_02, %FunctionVar_27_12, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1457(%cutlass_347_i0, %cutlass_347_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_350(%cutlass_350_i0: Tensor[(800, 256), float16], %cutlass_350_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_350", Primitive=1) -> Tensor[(800, 256), float16] {
  %1458 = fn (%FunctionVar_26_02: Tensor[(800, 256), float16], %FunctionVar_26_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_26_02, %FunctionVar_26_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1458(%cutlass_350_i0, %cutlass_350_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_352(%cutlass_352_i0: Tensor[(800, 256), float16], %cutlass_352_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_352", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1459 = fn (%FunctionVar_25_02: Tensor[(800, 256), float16], %FunctionVar_25_12: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_25_02, %FunctionVar_25_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1459(%cutlass_352_i0, %cutlass_352_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_354(%cutlass_354_i0: Tensor[(800, 2048), float16], %cutlass_354_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_354", Primitive=1) -> Tensor[(800, 256), float16] {
  %1460 = fn (%FunctionVar_24_01: Tensor[(800, 2048), float16], %FunctionVar_24_11: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_24_01, %FunctionVar_24_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1460(%cutlass_354_i0, %cutlass_354_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_356(%cutlass_356_i0: Tensor[(800, 256), float16], %cutlass_356_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_356", Primitive=1) -> Tensor[(800, 256), float16] {
  %1461 = fn (%FunctionVar_23_01: Tensor[(800, 256), float16], %FunctionVar_23_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_23_01, %FunctionVar_23_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1461(%cutlass_356_i0, %cutlass_356_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_358(%cutlass_358_i0: Tensor[(64, 100, 32), float16], %cutlass_358_i1: Tensor[(64, 100, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_358", Primitive=1) -> Tensor[(64, 100, 100), float16] {
  %1462 = fn (%FunctionVar_7_02: Tensor[(64, 100, 32), float16], %FunctionVar_7_12: Tensor[(64, 100, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 100), float16] {
    nn.batch_matmul(%FunctionVar_7_02, %FunctionVar_7_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 100), float16] */
  };
  %1462(%cutlass_358_i0, %cutlass_358_i1) /* ty=Tensor[(64, 100, 100), float16] */
}

def @tvmgen_default_cutlass_main_359(%cutlass_359_i0: Tensor[(800, 256), float16], %cutlass_359_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_359", Primitive=1) -> Tensor[(800, 256), float16] {
  %1463 = fn (%FunctionVar_22_01: Tensor[(800, 256), float16], %FunctionVar_22_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_22_01, %FunctionVar_22_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1463(%cutlass_359_i0, %cutlass_359_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_362(%cutlass_362_i0: Tensor[(64, 100, 100), float16], %cutlass_362_i1: Tensor[(64, 32, 100), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_362", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1464 = fn (%FunctionVar_6_02: Tensor[(64, 100, 100), float16], %FunctionVar_6_12: Tensor[(64, 32, 100), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_6_02, %FunctionVar_6_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1464(%cutlass_362_i0, %cutlass_362_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_363(%cutlass_363_i0: Tensor[(800, 256), float16], %cutlass_363_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_363", Primitive=1) -> Tensor[(800, 256), float16] {
  %1465 = fn (%FunctionVar_21_01: Tensor[(800, 256), float16], %FunctionVar_21_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_21_01, %FunctionVar_21_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1465(%cutlass_363_i0, %cutlass_363_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_366(%cutlass_366_i0: Tensor[(800, 256), float16], %cutlass_366_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_366", Primitive=1) -> Tensor[(800, 256), float16] {
  %1466 = fn (%FunctionVar_20_02: Tensor[(800, 256), float16], %FunctionVar_20_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_20_02, %FunctionVar_20_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1466(%cutlass_366_i0, %cutlass_366_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_368(%cutlass_368_i0: Tensor[(800, 256), float16], %cutlass_368_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_368", Primitive=1) -> Tensor[(800, 256), float16] {
  %1467 = fn (%FunctionVar_19_02: Tensor[(800, 256), float16], %FunctionVar_19_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_19_02, %FunctionVar_19_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1467(%cutlass_368_i0, %cutlass_368_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_37(%cutlass_37_i0: Tensor[(8, 188, 200, 128), float16], %cutlass_37_i1: Tensor[(128, 3, 3, 128), float16], %cutlass_37_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_37", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1470 = fn (%FunctionVar_24_02: Tensor[(8, 188, 200, 128), float16], %FunctionVar_24_12: Tensor[(128, 3, 3, 128), float16], %FunctionVar_24_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1468 = nn.conv2d(%FunctionVar_24_02, %FunctionVar_24_12, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1469 = add(%1468, %FunctionVar_24_2) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1469) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1470(%cutlass_37_i0, %cutlass_37_i1, %cutlass_37_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_370(%cutlass_370_i0: Tensor[(64, 100, 32), float16], %cutlass_370_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_370", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1471 = fn (%FunctionVar_5_02: Tensor[(64, 100, 32), float16], %FunctionVar_5_12: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_5_02, %FunctionVar_5_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1471(%cutlass_370_i0, %cutlass_370_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_371(%cutlass_371_i0: Tensor[(4800, 256), float16], %cutlass_371_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_371", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1472 = fn (%FunctionVar_18_02: Tensor[(4800, 256), float16], %FunctionVar_18_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_18_02, %FunctionVar_18_12, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1472(%cutlass_371_i0, %cutlass_371_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_374(%cutlass_374_i0: Tensor[(64, 100, 600), float16], %cutlass_374_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_374", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1473 = fn (%FunctionVar_4_02: Tensor[(64, 100, 600), float16], %FunctionVar_4_12: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_4_02, %FunctionVar_4_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1473(%cutlass_374_i0, %cutlass_374_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_375(%cutlass_375_i0: Tensor[(4800, 256), float16], %cutlass_375_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_375", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1474 = fn (%FunctionVar_17_02: Tensor[(4800, 256), float16], %FunctionVar_17_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_17_02, %FunctionVar_17_12, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1474(%cutlass_375_i0, %cutlass_375_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_378(%cutlass_378_i0: Tensor[(800, 256), float16], %cutlass_378_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_378", Primitive=1) -> Tensor[(800, 256), float16] {
  %1475 = fn (%FunctionVar_16_01: Tensor[(800, 256), float16], %FunctionVar_16_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_16_01, %FunctionVar_16_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1475(%cutlass_378_i0, %cutlass_378_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_380(%cutlass_380_i0: Tensor[(800, 256), float16], %cutlass_380_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_380", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1476 = fn (%FunctionVar_15_01: Tensor[(800, 256), float16], %FunctionVar_15_11: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_15_01, %FunctionVar_15_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1476(%cutlass_380_i0, %cutlass_380_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_382(%cutlass_382_i0: Tensor[(800, 2048), float16], %cutlass_382_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_382", Primitive=1) -> Tensor[(800, 256), float16] {
  %1477 = fn (%FunctionVar_14_01: Tensor[(800, 2048), float16], %FunctionVar_14_11: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_14_01, %FunctionVar_14_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1477(%cutlass_382_i0, %cutlass_382_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_384(%cutlass_384_i0: Tensor[(800, 256), float16], %cutlass_384_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_384", Primitive=1) -> Tensor[(800, 256), float16] {
  %1478 = fn (%FunctionVar_13_01: Tensor[(800, 256), float16], %FunctionVar_13_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_13_01, %FunctionVar_13_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1478(%cutlass_384_i0, %cutlass_384_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_386(%cutlass_386_i0: Tensor[(64, 100, 32), float16], %cutlass_386_i1: Tensor[(64, 100, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_386", Primitive=1) -> Tensor[(64, 100, 100), float16] {
  %1479 = fn (%FunctionVar_3_02: Tensor[(64, 100, 32), float16], %FunctionVar_3_12: Tensor[(64, 100, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 100), float16] {
    nn.batch_matmul(%FunctionVar_3_02, %FunctionVar_3_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 100), float16] */
  };
  %1479(%cutlass_386_i0, %cutlass_386_i1) /* ty=Tensor[(64, 100, 100), float16] */
}

def @tvmgen_default_cutlass_main_387(%cutlass_387_i0: Tensor[(800, 256), float16], %cutlass_387_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_387", Primitive=1) -> Tensor[(800, 256), float16] {
  %1480 = fn (%FunctionVar_12_01: Tensor[(800, 256), float16], %FunctionVar_12_11: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_12_01, %FunctionVar_12_11, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1480(%cutlass_387_i0, %cutlass_387_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_390(%cutlass_390_i0: Tensor[(64, 100, 100), float16], %cutlass_390_i1: Tensor[(64, 32, 100), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_390", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1481 = fn (%FunctionVar_2_02: Tensor[(64, 100, 100), float16], %FunctionVar_2_12: Tensor[(64, 32, 100), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_2_02, %FunctionVar_2_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1481(%cutlass_390_i0, %cutlass_390_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_391(%cutlass_391_i0: Tensor[(800, 256), float16], %cutlass_391_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_391", Primitive=1) -> Tensor[(800, 256), float16] {
  %1482 = fn (%FunctionVar_11_02: Tensor[(800, 256), float16], %FunctionVar_11_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_11_02, %FunctionVar_11_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1482(%cutlass_391_i0, %cutlass_391_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_394(%cutlass_394_i0: Tensor[(800, 256), float16], %cutlass_394_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_394", Primitive=1) -> Tensor[(800, 256), float16] {
  %1483 = fn (%FunctionVar_10_02: Tensor[(800, 256), float16], %FunctionVar_10_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_10_02, %FunctionVar_10_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1483(%cutlass_394_i0, %cutlass_394_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_396(%cutlass_396_i0: Tensor[(800, 256), float16], %cutlass_396_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_396", Primitive=1) -> Tensor[(800, 256), float16] {
  %1484 = fn (%FunctionVar_9_02: Tensor[(800, 256), float16], %FunctionVar_9_12: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_9_02, %FunctionVar_9_12, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1484(%cutlass_396_i0, %cutlass_396_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_398(%cutlass_398_i0: Tensor[(64, 100, 32), float16], %cutlass_398_i1: Tensor[(64, 600, 32), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_398", Primitive=1) -> Tensor[(64, 100, 600), float16] {
  %1485 = fn (%FunctionVar_1_02: Tensor[(64, 100, 32), float16], %FunctionVar_1_12: Tensor[(64, 600, 32), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 600), float16] {
    nn.batch_matmul(%FunctionVar_1_02, %FunctionVar_1_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 600), float16] */
  };
  %1485(%cutlass_398_i0, %cutlass_398_i1) /* ty=Tensor[(64, 100, 600), float16] */
}

def @tvmgen_default_cutlass_main_399(%cutlass_399_i0: Tensor[(4800, 256), float16], %cutlass_399_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_399", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1486 = fn (%FunctionVar_8_03: Tensor[(4800, 256), float16], %FunctionVar_8_13: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_8_03, %FunctionVar_8_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1486(%cutlass_399_i0, %cutlass_399_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_4(%cutlass_4_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_4_i1: Tensor[(64, 1, 1, 64), float16], %cutlass_4_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_4", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1489 = fn (%FunctionVar_31_02: Tensor[(8, 188, 200, 64), float16], %FunctionVar_31_12: Tensor[(64, 1, 1, 64), float16], %FunctionVar_31_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1487 = nn.conv2d(%FunctionVar_31_02, %FunctionVar_31_12, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1488 = add(%1487, %FunctionVar_31_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1488) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1489(%cutlass_4_i0, %cutlass_4_i1, %cutlass_4_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_40(%cutlass_40_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_40_i1: Tensor[(512, 1, 1, 128), float16], %cutlass_40_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_40", Primitive=1) -> Tensor[(8, 94, 100, 512), float16] {
  %1491 = fn (%FunctionVar_16_02: Tensor[(8, 94, 100, 128), float16], %FunctionVar_16_12: Tensor[(512, 1, 1, 128), float16], %FunctionVar_16_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 94, 100, 512), float16] {
    %1490 = nn.conv2d(%FunctionVar_16_02, %FunctionVar_16_12, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 512), float16] */;
    add(%1490, %FunctionVar_16_2) /* ty=Tensor[(8, 94, 100, 512), float16] */
  };
  %1491(%cutlass_40_i0, %cutlass_40_i1, %cutlass_40_i2) /* ty=Tensor[(8, 94, 100, 512), float16] */
}

def @tvmgen_default_cutlass_main_402(%cutlass_402_i0: Tensor[(64, 100, 600), float16], %cutlass_402_i1: Tensor[(64, 32, 600), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_402", Primitive=1) -> Tensor[(64, 100, 32), float16] {
  %1492 = fn (%FunctionVar_0_02: Tensor[(64, 100, 600), float16], %FunctionVar_0_12: Tensor[(64, 32, 600), float16], PartitionedFromPattern="nn.batch_matmul_", Composite="cutlass.batch_matmul") -> Tensor[(64, 100, 32), float16] {
    nn.batch_matmul(%FunctionVar_0_02, %FunctionVar_0_12, out_dtype="float16", transpose_b=True) /* ty=Tensor[(64, 100, 32), float16] */
  };
  %1492(%cutlass_402_i0, %cutlass_402_i1) /* ty=Tensor[(64, 100, 32), float16] */
}

def @tvmgen_default_cutlass_main_403(%cutlass_403_i0: Tensor[(4800, 256), float16], %cutlass_403_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_403", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1493 = fn (%FunctionVar_7_03: Tensor[(4800, 256), float16], %FunctionVar_7_13: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_7_03, %FunctionVar_7_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1493(%cutlass_403_i0, %cutlass_403_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_406(%cutlass_406_i0: Tensor[(800, 256), float16], %cutlass_406_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_406", Primitive=1) -> Tensor[(800, 256), float16] {
  %1494 = fn (%FunctionVar_6_03: Tensor[(800, 256), float16], %FunctionVar_6_13: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_6_03, %FunctionVar_6_13, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1494(%cutlass_406_i0, %cutlass_406_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_408(%cutlass_408_i0: Tensor[(800, 256), float16], %cutlass_408_i1: Tensor[(2048, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_408", Primitive=1) -> Tensor[(800, 2048), float16] {
  %1495 = fn (%FunctionVar_5_03: Tensor[(800, 256), float16], %FunctionVar_5_13: Tensor[(2048, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 2048), float16] {
    nn.dense(%FunctionVar_5_03, %FunctionVar_5_13, units=None, out_dtype="float16") /* ty=Tensor[(800, 2048), float16] */
  };
  %1495(%cutlass_408_i0, %cutlass_408_i1) /* ty=Tensor[(800, 2048), float16] */
}

def @tvmgen_default_cutlass_main_410(%cutlass_410_i0: Tensor[(800, 2048), float16], %cutlass_410_i1: Tensor[(256, 2048), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_410", Primitive=1) -> Tensor[(800, 256), float16] {
  %1496 = fn (%FunctionVar_4_03: Tensor[(800, 2048), float16], %FunctionVar_4_13: Tensor[(256, 2048), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(800, 256), float16] {
    nn.dense(%FunctionVar_4_03, %FunctionVar_4_13, units=None, out_dtype="float16") /* ty=Tensor[(800, 256), float16] */
  };
  %1496(%cutlass_410_i0, %cutlass_410_i1) /* ty=Tensor[(800, 256), float16] */
}

def @tvmgen_default_cutlass_main_412(%cutlass_412_i0: Tensor[(4800, 256), float16], %cutlass_412_i1: Tensor[(92, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_412", Primitive=1) -> Tensor[(4800, 92), float16] {
  %1497 = fn (%FunctionVar_3_03: Tensor[(4800, 256), float16], %FunctionVar_3_13: Tensor[(92, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 92), float16] {
    nn.dense(%FunctionVar_3_03, %FunctionVar_3_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 92), float16] */
  };
  %1497(%cutlass_412_i0, %cutlass_412_i1) /* ty=Tensor[(4800, 92), float16] */
}

def @tvmgen_default_cutlass_main_414(%cutlass_414_i0: Tensor[(4800, 256), float16], %cutlass_414_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_414", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1498 = fn (%FunctionVar_2_03: Tensor[(4800, 256), float16], %FunctionVar_2_13: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_2_03, %FunctionVar_2_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1498(%cutlass_414_i0, %cutlass_414_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_416(%cutlass_416_i0: Tensor[(4800, 256), float16], %cutlass_416_i1: Tensor[(256, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_416", Primitive=1) -> Tensor[(4800, 256), float16] {
  %1499 = fn (%FunctionVar_1_03: Tensor[(4800, 256), float16], %FunctionVar_1_13: Tensor[(256, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 256), float16] {
    nn.dense(%FunctionVar_1_03, %FunctionVar_1_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 256), float16] */
  };
  %1499(%cutlass_416_i0, %cutlass_416_i1) /* ty=Tensor[(4800, 256), float16] */
}

def @tvmgen_default_cutlass_main_418(%cutlass_418_i0: Tensor[(4800, 256), float16], %cutlass_418_i1: Tensor[(4, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_418", Primitive=1) -> Tensor[(4800, 4), float16] {
  %1500 = fn (%FunctionVar_0_03: Tensor[(4800, 256), float16], %FunctionVar_0_13: Tensor[(4, 256), float16], PartitionedFromPattern="nn.dense_", Composite="cutlass.dense") -> Tensor[(4800, 4), float16] {
    nn.dense(%FunctionVar_0_03, %FunctionVar_0_13, units=None, out_dtype="float16") /* ty=Tensor[(4800, 4), float16] */
  };
  %1500(%cutlass_418_i0, %cutlass_418_i1) /* ty=Tensor[(4800, 4), float16] */
}

def @tvmgen_default_cutlass_main_43(%cutlass_43_i0: Tensor[(8, 188, 200, 256), float16], %cutlass_43_i1: Tensor[(512, 1, 1, 256), float16], %cutlass_43_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_43", Primitive=1) -> Tensor[(8, 94, 100, 512), float16] {
  %1502 = fn (%FunctionVar_15_02: Tensor[(8, 188, 200, 256), float16], %FunctionVar_15_12: Tensor[(512, 1, 1, 256), float16], %FunctionVar_15_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 94, 100, 512), float16] {
    %1501 = nn.conv2d(%FunctionVar_15_02, %FunctionVar_15_12, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 512), float16] */;
    add(%1501, %FunctionVar_15_2) /* ty=Tensor[(8, 94, 100, 512), float16] */
  };
  %1502(%cutlass_43_i0, %cutlass_43_i1, %cutlass_43_i2) /* ty=Tensor[(8, 94, 100, 512), float16] */
}

def @tvmgen_default_cutlass_main_46(%cutlass_46_i0: Tensor[(8, 94, 100, 512), float16], %cutlass_46_i1: Tensor[(128, 1, 1, 512), float16], %cutlass_46_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_46", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1505 = fn (%FunctionVar_23_02: Tensor[(8, 94, 100, 512), float16], %FunctionVar_23_12: Tensor[(128, 1, 1, 512), float16], %FunctionVar_23_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1503 = nn.conv2d(%FunctionVar_23_02, %FunctionVar_23_12, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1504 = add(%1503, %FunctionVar_23_2) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1504) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1505(%cutlass_46_i0, %cutlass_46_i1, %cutlass_46_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_49(%cutlass_49_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_49_i1: Tensor[(128, 3, 3, 128), float16], %cutlass_49_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_49", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1508 = fn (%FunctionVar_22_02: Tensor[(8, 94, 100, 128), float16], %FunctionVar_22_12: Tensor[(128, 3, 3, 128), float16], %FunctionVar_22_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1506 = nn.conv2d(%FunctionVar_22_02, %FunctionVar_22_12, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1507 = add(%1506, %FunctionVar_22_2) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1507) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1508(%cutlass_49_i0, %cutlass_49_i1, %cutlass_49_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_52(%cutlass_52_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_52_i1: Tensor[(512, 1, 1, 128), float16], %cutlass_52_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_52", Primitive=1) -> Tensor[(8, 94, 100, 512), float16] {
  %1510 = fn (%FunctionVar_14_02: Tensor[(8, 94, 100, 128), float16], %FunctionVar_14_12: Tensor[(512, 1, 1, 128), float16], %FunctionVar_14_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 94, 100, 512), float16] {
    %1509 = nn.conv2d(%FunctionVar_14_02, %FunctionVar_14_12, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 512), float16] */;
    add(%1509, %FunctionVar_14_2) /* ty=Tensor[(8, 94, 100, 512), float16] */
  };
  %1510(%cutlass_52_i0, %cutlass_52_i1, %cutlass_52_i2) /* ty=Tensor[(8, 94, 100, 512), float16] */
}

def @tvmgen_default_cutlass_main_55(%cutlass_55_i0: Tensor[(8, 94, 100, 512), float16], %cutlass_55_i1: Tensor[(128, 1, 1, 512), float16], %cutlass_55_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_55", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1513 = fn (%FunctionVar_21_02: Tensor[(8, 94, 100, 512), float16], %FunctionVar_21_12: Tensor[(128, 1, 1, 512), float16], %FunctionVar_21_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1511 = nn.conv2d(%FunctionVar_21_02, %FunctionVar_21_12, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1512 = add(%1511, %FunctionVar_21_2) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1512) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1513(%cutlass_55_i0, %cutlass_55_i1, %cutlass_55_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_58(%cutlass_58_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_58_i1: Tensor[(128, 3, 3, 128), float16], %cutlass_58_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_58", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1516 = fn (%FunctionVar_20_03: Tensor[(8, 94, 100, 128), float16], %FunctionVar_20_13: Tensor[(128, 3, 3, 128), float16], %FunctionVar_20_21: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1514 = nn.conv2d(%FunctionVar_20_03, %FunctionVar_20_13, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1515 = add(%1514, %FunctionVar_20_21) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1515) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1516(%cutlass_58_i0, %cutlass_58_i1, %cutlass_58_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_61(%cutlass_61_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_61_i1: Tensor[(512, 1, 1, 128), float16], %cutlass_61_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_61", Primitive=1) -> Tensor[(8, 94, 100, 512), float16] {
  %1518 = fn (%FunctionVar_13_02: Tensor[(8, 94, 100, 128), float16], %FunctionVar_13_12: Tensor[(512, 1, 1, 128), float16], %FunctionVar_13_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 94, 100, 512), float16] {
    %1517 = nn.conv2d(%FunctionVar_13_02, %FunctionVar_13_12, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 512), float16] */;
    add(%1517, %FunctionVar_13_2) /* ty=Tensor[(8, 94, 100, 512), float16] */
  };
  %1518(%cutlass_61_i0, %cutlass_61_i1, %cutlass_61_i2) /* ty=Tensor[(8, 94, 100, 512), float16] */
}

def @tvmgen_default_cutlass_main_64(%cutlass_64_i0: Tensor[(8, 94, 100, 512), float16], %cutlass_64_i1: Tensor[(128, 1, 1, 512), float16], %cutlass_64_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_64", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1521 = fn (%FunctionVar_19_03: Tensor[(8, 94, 100, 512), float16], %FunctionVar_19_13: Tensor[(128, 1, 1, 512), float16], %FunctionVar_19_21: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1519 = nn.conv2d(%FunctionVar_19_03, %FunctionVar_19_13, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1520 = add(%1519, %FunctionVar_19_21) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1520) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1521(%cutlass_64_i0, %cutlass_64_i1, %cutlass_64_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_67(%cutlass_67_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_67_i1: Tensor[(128, 3, 3, 128), float16], %cutlass_67_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_67", Primitive=1) -> Tensor[(8, 94, 100, 128), float16] {
  %1524 = fn (%FunctionVar_18_03: Tensor[(8, 94, 100, 128), float16], %FunctionVar_18_13: Tensor[(128, 3, 3, 128), float16], %FunctionVar_18_21: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 128), float16] {
    %1522 = nn.conv2d(%FunctionVar_18_03, %FunctionVar_18_13, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 128), float16] */;
    %1523 = add(%1522, %FunctionVar_18_21) /* ty=Tensor[(8, 94, 100, 128), float16] */;
    nn.relu(%1523) /* ty=Tensor[(8, 94, 100, 128), float16] */
  };
  %1524(%cutlass_67_i0, %cutlass_67_i1, %cutlass_67_i2) /* ty=Tensor[(8, 94, 100, 128), float16] */
}

def @tvmgen_default_cutlass_main_7(%cutlass_7_i0: Tensor[(8, 188, 200, 64), float16], %cutlass_7_i1: Tensor[(64, 3, 3, 64), float16], %cutlass_7_i2: Tensor[(1, 1, 1, 64), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_7", Primitive=1) -> Tensor[(8, 188, 200, 64), float16] {
  %1527 = fn (%FunctionVar_30_02: Tensor[(8, 188, 200, 64), float16], %FunctionVar_30_12: Tensor[(64, 3, 3, 64), float16], %FunctionVar_30_2: Tensor[(1, 1, 1, 64), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 188, 200, 64), float16] {
    %1525 = nn.conv2d(%FunctionVar_30_02, %FunctionVar_30_12, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 188, 200, 64), float16] */;
    %1526 = add(%1525, %FunctionVar_30_2) /* ty=Tensor[(8, 188, 200, 64), float16] */;
    nn.relu(%1526) /* ty=Tensor[(8, 188, 200, 64), float16] */
  };
  %1527(%cutlass_7_i0, %cutlass_7_i1, %cutlass_7_i2) /* ty=Tensor[(8, 188, 200, 64), float16] */
}

def @tvmgen_default_cutlass_main_70(%cutlass_70_i0: Tensor[(8, 94, 100, 128), float16], %cutlass_70_i1: Tensor[(512, 1, 1, 128), float16], %cutlass_70_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_70", Primitive=1) -> Tensor[(8, 94, 100, 512), float16] {
  %1529 = fn (%FunctionVar_12_02: Tensor[(8, 94, 100, 128), float16], %FunctionVar_12_12: Tensor[(512, 1, 1, 128), float16], %FunctionVar_12_2: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 94, 100, 512), float16] {
    %1528 = nn.conv2d(%FunctionVar_12_02, %FunctionVar_12_12, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 512), float16] */;
    add(%1528, %FunctionVar_12_2) /* ty=Tensor[(8, 94, 100, 512), float16] */
  };
  %1529(%cutlass_70_i0, %cutlass_70_i1, %cutlass_70_i2) /* ty=Tensor[(8, 94, 100, 512), float16] */
}

def @tvmgen_default_cutlass_main_73(%cutlass_73_i0: Tensor[(8, 94, 100, 512), float16], %cutlass_73_i1: Tensor[(256, 1, 1, 512), float16], %cutlass_73_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_73", Primitive=1) -> Tensor[(8, 94, 100, 256), float16] {
  %1532 = fn (%FunctionVar_17_03: Tensor[(8, 94, 100, 512), float16], %FunctionVar_17_13: Tensor[(256, 1, 1, 512), float16], %FunctionVar_17_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 94, 100, 256), float16] {
    %1530 = nn.conv2d(%FunctionVar_17_03, %FunctionVar_17_13, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 94, 100, 256), float16] */;
    %1531 = add(%1530, %FunctionVar_17_21) /* ty=Tensor[(8, 94, 100, 256), float16] */;
    nn.relu(%1531) /* ty=Tensor[(8, 94, 100, 256), float16] */
  };
  %1532(%cutlass_73_i0, %cutlass_73_i1, %cutlass_73_i2) /* ty=Tensor[(8, 94, 100, 256), float16] */
}

def @tvmgen_default_cutlass_main_76(%cutlass_76_i0: Tensor[(8, 94, 100, 256), float16], %cutlass_76_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_76_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_76", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1535 = fn (%FunctionVar_16_03: Tensor[(8, 94, 100, 256), float16], %FunctionVar_16_13: Tensor[(256, 3, 3, 256), float16], %FunctionVar_16_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1533 = nn.conv2d(%FunctionVar_16_03, %FunctionVar_16_13, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1534 = add(%1533, %FunctionVar_16_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1534) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1535(%cutlass_76_i0, %cutlass_76_i1, %cutlass_76_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_79(%cutlass_79_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_79_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_79_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_79", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1537 = fn (%FunctionVar_11_03: Tensor[(8, 47, 50, 256), float16], %FunctionVar_11_13: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_11_21: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1536 = nn.conv2d(%FunctionVar_11_03, %FunctionVar_11_13, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1536, %FunctionVar_11_21) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1537(%cutlass_79_i0, %cutlass_79_i1, %cutlass_79_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_82(%cutlass_82_i0: Tensor[(8, 94, 100, 512), float16], %cutlass_82_i1: Tensor[(1024, 1, 1, 512), float16], %cutlass_82_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_82", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1539 = fn (%FunctionVar_10_03: Tensor[(8, 94, 100, 512), float16], %FunctionVar_10_13: Tensor[(1024, 1, 1, 512), float16], %FunctionVar_10_21: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1538 = nn.conv2d(%FunctionVar_10_03, %FunctionVar_10_13, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1538, %FunctionVar_10_21) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1539(%cutlass_82_i0, %cutlass_82_i1, %cutlass_82_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_85(%cutlass_85_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_85_i1: Tensor[(256, 1, 1, 1024), float16], %cutlass_85_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_85", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1542 = fn (%FunctionVar_15_03: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_15_13: Tensor[(256, 1, 1, 1024), float16], %FunctionVar_15_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1540 = nn.conv2d(%FunctionVar_15_03, %FunctionVar_15_13, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1541 = add(%1540, %FunctionVar_15_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1541) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1542(%cutlass_85_i0, %cutlass_85_i1, %cutlass_85_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_88(%cutlass_88_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_88_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_88_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_88", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1545 = fn (%FunctionVar_14_03: Tensor[(8, 47, 50, 256), float16], %FunctionVar_14_13: Tensor[(256, 3, 3, 256), float16], %FunctionVar_14_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1543 = nn.conv2d(%FunctionVar_14_03, %FunctionVar_14_13, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1544 = add(%1543, %FunctionVar_14_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1544) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1545(%cutlass_88_i0, %cutlass_88_i1, %cutlass_88_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_91(%cutlass_91_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_91_i1: Tensor[(1024, 1, 1, 256), float16], %cutlass_91_i2: Tensor[(1, 1, 1, 1024), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_91", Primitive=1) -> Tensor[(8, 47, 50, 1024), float16] {
  %1547 = fn (%FunctionVar_9_03: Tensor[(8, 47, 50, 256), float16], %FunctionVar_9_13: Tensor[(1024, 1, 1, 256), float16], %FunctionVar_9_21: Tensor[(1, 1, 1, 1024), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 47, 50, 1024), float16] {
    %1546 = nn.conv2d(%FunctionVar_9_03, %FunctionVar_9_13, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 1024), float16] */;
    add(%1546, %FunctionVar_9_21) /* ty=Tensor[(8, 47, 50, 1024), float16] */
  };
  %1547(%cutlass_91_i0, %cutlass_91_i1, %cutlass_91_i2) /* ty=Tensor[(8, 47, 50, 1024), float16] */
}

def @tvmgen_default_cutlass_main_94(%cutlass_94_i0: Tensor[(8, 47, 50, 1024), float16], %cutlass_94_i1: Tensor[(256, 1, 1, 1024), float16], %cutlass_94_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_94", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1550 = fn (%FunctionVar_13_03: Tensor[(8, 47, 50, 1024), float16], %FunctionVar_13_13: Tensor[(256, 1, 1, 1024), float16], %FunctionVar_13_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1548 = nn.conv2d(%FunctionVar_13_03, %FunctionVar_13_13, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1549 = add(%1548, %FunctionVar_13_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1549) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1550(%cutlass_94_i0, %cutlass_94_i1, %cutlass_94_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}

def @tvmgen_default_cutlass_main_97(%cutlass_97_i0: Tensor[(8, 47, 50, 256), float16], %cutlass_97_i1: Tensor[(256, 3, 3, 256), float16], %cutlass_97_i2: Tensor[(1, 1, 1, 256), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_97", Primitive=1) -> Tensor[(8, 47, 50, 256), float16] {
  %1553 = fn (%FunctionVar_12_03: Tensor[(8, 47, 50, 256), float16], %FunctionVar_12_13: Tensor[(256, 3, 3, 256), float16], %FunctionVar_12_21: Tensor[(1, 1, 1, 256), float16], PartitionedFromPattern="nn.conv2d_add_nn.relu_", Composite="cutlass.conv2d_bias_relu") -> Tensor[(8, 47, 50, 256), float16] {
    %1551 = nn.conv2d(%FunctionVar_12_03, %FunctionVar_12_13, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 47, 50, 256), float16] */;
    %1552 = add(%1551, %FunctionVar_12_21) /* ty=Tensor[(8, 47, 50, 256), float16] */;
    nn.relu(%1552) /* ty=Tensor[(8, 47, 50, 256), float16] */
  };
  %1553(%cutlass_97_i0, %cutlass_97_i1, %cutlass_97_i2) /* ty=Tensor[(8, 47, 50, 256), float16] */
}


[[-15.66     -0.893    -6.254   ... -10.38     -4.367    10.195  ]
 [-16.53      0.0943   -7.73    ... -12.48     -6.652    10.47   ]
 [-16.48      0.379    -8.46    ... -10.7      -5.223    10.59   ]
 ...
 [-15.85     -0.7725   -7.68    ... -10.44     -4.434    10.43   ]
 [-17.28     -0.10736  -9.195   ... -12.49     -5.99     11.3    ]
 [-16.31     -0.039    -7.633   ... -11.5      -5.547    10.54   ]]
[[-15.639702    -0.8985131   -6.263162   ... -10.376795    -4.354908
   10.198444  ]
 [-16.523083     0.09283447  -7.7295012  ... -12.473066    -6.6355047
   10.470011  ]
 [-16.4771       0.3636938   -8.458389   ... -10.665242    -5.2047644
   10.587564  ]
 ...
 [-15.85337     -0.7742468   -7.669905   ... -10.4286375   -4.430042
   10.434385  ]
 [-17.293688    -0.11015718  -9.189977   ... -12.49757     -5.965038
   11.29104   ]
 [-16.32095     -0.03706569  -7.641148   ... -11.485502    -5.5420365
   10.528311  ]]
Evaluate inference time cost...
Execution time summary:
 mean (ms)   median (ms)    max (ms)     min (ms)     std (ms)  
  57.1925      57.1813      58.7986      56.8625       0.2846   
               
