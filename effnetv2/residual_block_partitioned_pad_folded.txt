def @main(%input_1:0: Tensor[(8, 224, 224, 3), float32]) -> Tensor[(8, 1000), float16] {
  %0 = cast(%input_1:0, dtype="float16") /* ty=Tensor[(8, 224, 224, 3), float16] */;
  %1 = @tvmgen_default_cutlass_main_0(%0, meta[relay.Constant][0] /* ty=Tensor[(24, 3, 3, 3), float16] */, meta[relay.Constant][1] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %2 = @tvmgen_default_cutlass_main_3(%1, meta[relay.Constant][2] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %3 = @tvmgen_default_cutlass_main_7(%2, meta[relay.Constant][4] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %4 = @tvmgen_default_cutlass_main_11(%3, meta[relay.Constant][6] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][7] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %5 = @tvmgen_default_cutlass_main_15(%4, meta[relay.Constant][8] /* ty=Tensor[(96, 3, 3, 24), float16] */, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 96), float16] */) /* ty=Tensor[(8, 56, 56, 96), float16] */;
  %6 = @tvmgen_default_cutlass_main_18(%5, meta[relay.Constant][10] /* ty=Tensor[(48, 1, 1, 96), float16] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %7 = @tvmgen_default_cutlass_main_21(%6, meta[relay.Constant][12] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][13] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %8 = @tvmgen_default_cutlass_main_24(%7, meta[relay.Constant][14] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 1, 48), float16] */, %6) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %9 = @tvmgen_default_cutlass_main_28(%8, meta[relay.Constant][16] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %10 = @tvmgen_default_cutlass_main_31(%9, meta[relay.Constant][18] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][19] /* ty=Tensor[(1, 1, 1, 48), float16] */, %8) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %11 = @tvmgen_default_cutlass_main_35(%10, meta[relay.Constant][20] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %12 = @tvmgen_default_cutlass_main_38(%11, meta[relay.Constant][22] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 48), float16] */, %10) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %13 = @tvmgen_default_cutlass_main_42(%12, meta[relay.Constant][24] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][25] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %14 = @tvmgen_default_cutlass_main_45(%13, meta[relay.Constant][26] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 48), float16] */, %12) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %15 = @tvmgen_default_cutlass_main_49(%14, meta[relay.Constant][28] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 28, 28, 192), float16] */;
  %16 = @tvmgen_default_cutlass_main_52(%15, meta[relay.Constant][30] /* ty=Tensor[(80, 1, 1, 192), float16] */, meta[relay.Constant][31] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %17 = @tvmgen_default_cutlass_main_55(%16, meta[relay.Constant][32] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][33] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %18 = @tvmgen_default_cutlass_main_58(%17, meta[relay.Constant][34] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 80), float16] */, %16) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %19 = @tvmgen_default_cutlass_main_62(%18, meta[relay.Constant][36] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][37] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %20 = @tvmgen_default_cutlass_main_65(%19, meta[relay.Constant][38] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 80), float16] */, %18) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %21 = @tvmgen_default_cutlass_main_69(%20, meta[relay.Constant][40] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %22 = @tvmgen_default_cutlass_main_72(%21, meta[relay.Constant][42] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][43] /* ty=Tensor[(1, 1, 1, 80), float16] */, %20) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %23 = @tvmgen_default_cutlass_main_76(%22, meta[relay.Constant][44] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %24 = @tvmgen_default_cutlass_main_79(%23, meta[relay.Constant][46] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 80), float16] */, %22) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %25 = @tvmgen_default_cutlass_main_83(%24, meta[relay.Constant][48] /* ty=Tensor[(320, 1, 1, 80), float16] */, meta[relay.Constant][49] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %26 = layout_transform(meta[relay.Constant][50] /* ty=Tensor[(320, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 320, 1), float16] */;
  %27 = nn.conv2d(%25, %26, strides=[2, 2], padding=[0, 0, 1, 1], groups=320, channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %28 = add(%27, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %29 = sigmoid(%28) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %30 = multiply(%28, %29) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(8, 14, 14, 320), float32] */;
  %32 = mean(%31, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 320), float32] */;
  %33 = cast(%32, dtype="float16") /* ty=Tensor[(8, 1, 1, 320), float16] */;
  %34 = @tvmgen_default_cutlass_main_86(%33, meta[relay.Constant][52] /* ty=Tensor[(20, 1, 1, 320), float16] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 1, 20), float16] */) /* ty=Tensor[(8, 1, 1, 20), float16] */;
  %35 = @tvmgen_default_cutlass_main_89(%34, meta[relay.Constant][54] /* ty=Tensor[(320, 1, 1, 20), float16] */, meta[relay.Constant][55] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 1, 1, 320), float16] */;
  %36 = multiply(%35, %30) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %37 = @tvmgen_default_cutlass_main_92(%36, meta[relay.Constant][56] /* ty=Tensor[(160, 1, 1, 320), float16] */, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %38 = @tvmgen_default_cutlass_main_95(%37, meta[relay.Constant][58] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][59] /* ty=Tensor[(640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %39 = layout_transform(meta[relay.Constant][60] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %40 = nn.conv2d(%38, %39, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %41 = add(%40, meta[relay.Constant][61] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %42 = sigmoid(%41) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %43 = multiply(%41, %42) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %45 = mean(%44, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %46 = cast(%45, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %47 = @tvmgen_default_cutlass_main_98(%46, meta[relay.Constant][62] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %48 = @tvmgen_default_cutlass_main_101(%47, meta[relay.Constant][64] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %49 = multiply(%48, %43) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %50 = @tvmgen_default_cutlass_main_104(%49, meta[relay.Constant][66] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][67] /* ty=Tensor[(1, 1, 1, 160), float16] */, %37) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %51 = @tvmgen_default_cutlass_main_108(%50, meta[relay.Constant][68] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %52 = layout_transform(meta[relay.Constant][70] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %53 = nn.conv2d(%51, %52, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %54 = add(%53, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %55 = sigmoid(%54) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %56 = multiply(%54, %55) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %58 = mean(%57, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %59 = cast(%58, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %60 = @tvmgen_default_cutlass_main_111(%59, meta[relay.Constant][72] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][73] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %61 = @tvmgen_default_cutlass_main_114(%60, meta[relay.Constant][74] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %62 = multiply(%61, %56) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %63 = @tvmgen_default_cutlass_main_117(%62, meta[relay.Constant][76] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 1, 160), float16] */, %50) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %64 = @tvmgen_default_cutlass_main_121(%63, meta[relay.Constant][78] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][79] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %65 = layout_transform(meta[relay.Constant][80] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %66 = nn.conv2d(%64, %65, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %67 = add(%66, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %68 = sigmoid(%67) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %69 = multiply(%67, %68) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %71 = mean(%70, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %72 = cast(%71, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %73 = @tvmgen_default_cutlass_main_124(%72, meta[relay.Constant][82] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][83] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %74 = @tvmgen_default_cutlass_main_127(%73, meta[relay.Constant][84] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][85] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %75 = multiply(%74, %69) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %76 = @tvmgen_default_cutlass_main_130(%75, meta[relay.Constant][86] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 1, 160), float16] */, %63) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %77 = @tvmgen_default_cutlass_main_134(%76, meta[relay.Constant][88] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %78 = layout_transform(meta[relay.Constant][90] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %79 = nn.conv2d(%77, %78, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %80 = add(%79, meta[relay.Constant][91] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %81 = sigmoid(%80) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %82 = multiply(%80, %81) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %83 = cast(%82, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %84 = mean(%83, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %85 = cast(%84, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %86 = @tvmgen_default_cutlass_main_137(%85, meta[relay.Constant][92] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %87 = @tvmgen_default_cutlass_main_140(%86, meta[relay.Constant][94] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %88 = multiply(%87, %82) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %89 = @tvmgen_default_cutlass_main_143(%88, meta[relay.Constant][96] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][97] /* ty=Tensor[(1, 1, 1, 160), float16] */, %76) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %90 = @tvmgen_default_cutlass_main_147(%89, meta[relay.Constant][98] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %91 = layout_transform(meta[relay.Constant][100] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %92 = nn.conv2d(%90, %91, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %93 = add(%92, meta[relay.Constant][101] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %94 = sigmoid(%93) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %95 = multiply(%93, %94) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %97 = mean(%96, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %98 = cast(%97, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %99 = @tvmgen_default_cutlass_main_150(%98, meta[relay.Constant][102] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][103] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %100 = @tvmgen_default_cutlass_main_153(%99, meta[relay.Constant][104] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %101 = multiply(%100, %95) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %102 = @tvmgen_default_cutlass_main_156(%101, meta[relay.Constant][106] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][107] /* ty=Tensor[(1, 1, 1, 160), float16] */, %89) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %103 = @tvmgen_default_cutlass_main_160(%102, meta[relay.Constant][108] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][109] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %104 = layout_transform(meta[relay.Constant][110] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %105 = nn.conv2d(%103, %104, padding=[1, 1, 1, 1], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %106 = add(%105, meta[relay.Constant][111] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %107 = sigmoid(%106) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %108 = multiply(%106, %107) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %110 = mean(%109, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %111 = cast(%110, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %112 = @tvmgen_default_cutlass_main_163(%111, meta[relay.Constant][112] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][113] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %113 = @tvmgen_default_cutlass_main_166(%112, meta[relay.Constant][114] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][115] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %114 = multiply(%113, %108) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %115 = @tvmgen_default_cutlass_main_169(%114, meta[relay.Constant][116] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][117] /* ty=Tensor[(1, 1, 1, 160), float16] */, %102) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %116 = @tvmgen_default_cutlass_main_173(%115, meta[relay.Constant][118] /* ty=Tensor[(960, 1, 1, 160), float16] */, meta[relay.Constant][119] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %117 = layout_transform(meta[relay.Constant][120] /* ty=Tensor[(960, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 960, 1), float16] */;
  %118 = nn.conv2d(%116, %117, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %119 = add(%118, meta[relay.Constant][121] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %120 = sigmoid(%119) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %121 = multiply(%119, %120) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(8, 14, 14, 960), float32] */;
  %123 = mean(%122, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 960), float32] */;
  %124 = cast(%123, dtype="float16") /* ty=Tensor[(8, 1, 1, 960), float16] */;
  %125 = @tvmgen_default_cutlass_main_176(%124, meta[relay.Constant][122] /* ty=Tensor[(40, 1, 1, 960), float16] */, meta[relay.Constant][123] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %126 = @tvmgen_default_cutlass_main_179(%125, meta[relay.Constant][124] /* ty=Tensor[(960, 1, 1, 40), float16] */, meta[relay.Constant][125] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 1, 1, 960), float16] */;
  %127 = multiply(%126, %121) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %128 = @tvmgen_default_cutlass_main_182(%127, meta[relay.Constant][126] /* ty=Tensor[(176, 1, 1, 960), float16] */, meta[relay.Constant][127] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %129 = @tvmgen_default_cutlass_main_185(%128, meta[relay.Constant][128] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][129] /* ty=Tensor[(1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %130 = layout_transform(meta[relay.Constant][130] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %131 = nn.conv2d(%129, %130, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %132 = add(%131, meta[relay.Constant][131] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %133 = sigmoid(%132) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %134 = multiply(%132, %133) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %136 = mean(%135, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %137 = cast(%136, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %138 = @tvmgen_default_cutlass_main_188(%137, meta[relay.Constant][132] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][133] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %139 = @tvmgen_default_cutlass_main_191(%138, meta[relay.Constant][134] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][135] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %140 = multiply(%139, %134) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %141 = @tvmgen_default_cutlass_main_194(%140, meta[relay.Constant][136] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][137] /* ty=Tensor[(1, 1, 1, 176), float16] */, %128) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %142 = @tvmgen_default_cutlass_main_198(%141, meta[relay.Constant][138] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][139] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %143 = layout_transform(meta[relay.Constant][140] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %144 = nn.conv2d(%142, %143, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %145 = add(%144, meta[relay.Constant][141] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %146 = sigmoid(%145) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %147 = multiply(%145, %146) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %149 = mean(%148, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %150 = cast(%149, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %151 = @tvmgen_default_cutlass_main_201(%150, meta[relay.Constant][142] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][143] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %152 = @tvmgen_default_cutlass_main_204(%151, meta[relay.Constant][144] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][145] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %153 = multiply(%152, %147) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %154 = @tvmgen_default_cutlass_main_207(%153, meta[relay.Constant][146] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][147] /* ty=Tensor[(1, 1, 1, 176), float16] */, %141) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %155 = @tvmgen_default_cutlass_main_211(%154, meta[relay.Constant][148] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][149] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %156 = layout_transform(meta[relay.Constant][150] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %157 = nn.conv2d(%155, %156, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %158 = add(%157, meta[relay.Constant][151] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %159 = sigmoid(%158) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %160 = multiply(%158, %159) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %162 = mean(%161, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %163 = cast(%162, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %164 = @tvmgen_default_cutlass_main_214(%163, meta[relay.Constant][152] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][153] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %165 = @tvmgen_default_cutlass_main_217(%164, meta[relay.Constant][154] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][155] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %166 = multiply(%165, %160) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %167 = @tvmgen_default_cutlass_main_220(%166, meta[relay.Constant][156] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][157] /* ty=Tensor[(1, 1, 1, 176), float16] */, %154) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %168 = @tvmgen_default_cutlass_main_224(%167, meta[relay.Constant][158] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][159] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %169 = layout_transform(meta[relay.Constant][160] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %170 = nn.conv2d(%168, %169, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %171 = add(%170, meta[relay.Constant][161] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %172 = sigmoid(%171) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %173 = multiply(%171, %172) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %174 = cast(%173, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %175 = mean(%174, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %176 = cast(%175, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %177 = @tvmgen_default_cutlass_main_227(%176, meta[relay.Constant][162] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][163] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %178 = @tvmgen_default_cutlass_main_230(%177, meta[relay.Constant][164] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][165] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %179 = multiply(%178, %173) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %180 = @tvmgen_default_cutlass_main_233(%179, meta[relay.Constant][166] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][167] /* ty=Tensor[(1, 1, 1, 176), float16] */, %167) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %181 = @tvmgen_default_cutlass_main_237(%180, meta[relay.Constant][168] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][169] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %182 = layout_transform(meta[relay.Constant][170] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %183 = nn.conv2d(%181, %182, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %184 = add(%183, meta[relay.Constant][171] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %185 = sigmoid(%184) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %186 = multiply(%184, %185) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %188 = mean(%187, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %189 = cast(%188, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %190 = @tvmgen_default_cutlass_main_240(%189, meta[relay.Constant][172] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][173] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %191 = @tvmgen_default_cutlass_main_243(%190, meta[relay.Constant][174] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][175] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %192 = multiply(%191, %186) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %193 = @tvmgen_default_cutlass_main_246(%192, meta[relay.Constant][176] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][177] /* ty=Tensor[(1, 1, 1, 176), float16] */, %180) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %194 = @tvmgen_default_cutlass_main_250(%193, meta[relay.Constant][178] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][179] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %195 = layout_transform(meta[relay.Constant][180] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %196 = nn.conv2d(%194, %195, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %197 = add(%196, meta[relay.Constant][181] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %198 = sigmoid(%197) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %199 = multiply(%197, %198) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %201 = mean(%200, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %202 = cast(%201, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %203 = @tvmgen_default_cutlass_main_253(%202, meta[relay.Constant][182] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %204 = @tvmgen_default_cutlass_main_256(%203, meta[relay.Constant][184] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %205 = multiply(%204, %199) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %206 = @tvmgen_default_cutlass_main_259(%205, meta[relay.Constant][186] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][187] /* ty=Tensor[(1, 1, 1, 176), float16] */, %193) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %207 = @tvmgen_default_cutlass_main_263(%206, meta[relay.Constant][188] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][189] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %208 = layout_transform(meta[relay.Constant][190] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %209 = nn.conv2d(%207, %208, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %210 = add(%209, meta[relay.Constant][191] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %211 = sigmoid(%210) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %212 = multiply(%210, %211) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %214 = mean(%213, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %215 = cast(%214, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %216 = @tvmgen_default_cutlass_main_266(%215, meta[relay.Constant][192] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][193] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %217 = @tvmgen_default_cutlass_main_269(%216, meta[relay.Constant][194] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][195] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %218 = multiply(%217, %212) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %219 = @tvmgen_default_cutlass_main_272(%218, meta[relay.Constant][196] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][197] /* ty=Tensor[(1, 1, 1, 176), float16] */, %206) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %220 = @tvmgen_default_cutlass_main_276(%219, meta[relay.Constant][198] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][199] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %221 = layout_transform(meta[relay.Constant][200] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %222 = nn.conv2d(%220, %221, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %223 = add(%222, meta[relay.Constant][201] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %224 = sigmoid(%223) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %225 = multiply(%223, %224) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %227 = mean(%226, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %228 = cast(%227, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %229 = @tvmgen_default_cutlass_main_279(%228, meta[relay.Constant][202] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][203] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %230 = @tvmgen_default_cutlass_main_282(%229, meta[relay.Constant][204] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][205] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %231 = multiply(%230, %225) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %232 = @tvmgen_default_cutlass_main_285(%231, meta[relay.Constant][206] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 176), float16] */, %219) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %233 = @tvmgen_default_cutlass_main_289(%232, meta[relay.Constant][208] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][209] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %234 = layout_transform(meta[relay.Constant][210] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %235 = nn.conv2d(%233, %234, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %236 = add(%235, meta[relay.Constant][211] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %237 = sigmoid(%236) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %238 = multiply(%236, %237) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %240 = mean(%239, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %241 = cast(%240, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %242 = @tvmgen_default_cutlass_main_292(%241, meta[relay.Constant][212] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][213] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %243 = @tvmgen_default_cutlass_main_295(%242, meta[relay.Constant][214] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][215] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %244 = multiply(%243, %238) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %245 = @tvmgen_default_cutlass_main_298(%244, meta[relay.Constant][216] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][217] /* ty=Tensor[(1, 1, 1, 176), float16] */, %232) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %246 = @tvmgen_default_cutlass_main_302(%245, meta[relay.Constant][218] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][219] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %247 = layout_transform(meta[relay.Constant][220] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %248 = nn.conv2d(%246, %247, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %249 = add(%248, meta[relay.Constant][221] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %250 = sigmoid(%249) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %251 = multiply(%249, %250) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %253 = mean(%252, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %254 = cast(%253, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %255 = @tvmgen_default_cutlass_main_305(%254, meta[relay.Constant][222] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][223] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %256 = @tvmgen_default_cutlass_main_308(%255, meta[relay.Constant][224] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][225] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %257 = multiply(%256, %251) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %258 = @tvmgen_default_cutlass_main_311(%257, meta[relay.Constant][226] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][227] /* ty=Tensor[(1, 1, 1, 176), float16] */, %245) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %259 = @tvmgen_default_cutlass_main_315(%258, meta[relay.Constant][228] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][229] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %260 = layout_transform(meta[relay.Constant][230] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %261 = nn.conv2d(%259, %260, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %262 = add(%261, meta[relay.Constant][231] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %263 = sigmoid(%262) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %264 = multiply(%262, %263) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %266 = mean(%265, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %267 = cast(%266, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %268 = @tvmgen_default_cutlass_main_318(%267, meta[relay.Constant][232] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][233] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %269 = @tvmgen_default_cutlass_main_321(%268, meta[relay.Constant][234] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][235] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %270 = multiply(%269, %264) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %271 = @tvmgen_default_cutlass_main_324(%270, meta[relay.Constant][236] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][237] /* ty=Tensor[(1, 1, 1, 176), float16] */, %258) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %272 = @tvmgen_default_cutlass_main_328(%271, meta[relay.Constant][238] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][239] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %273 = layout_transform(meta[relay.Constant][240] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %274 = nn.conv2d(%272, %273, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %275 = add(%274, meta[relay.Constant][241] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %276 = sigmoid(%275) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %277 = multiply(%275, %276) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %279 = mean(%278, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %280 = cast(%279, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %281 = @tvmgen_default_cutlass_main_331(%280, meta[relay.Constant][242] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][243] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %282 = @tvmgen_default_cutlass_main_334(%281, meta[relay.Constant][244] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][245] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %283 = multiply(%282, %277) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %284 = @tvmgen_default_cutlass_main_337(%283, meta[relay.Constant][246] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][247] /* ty=Tensor[(1, 1, 1, 176), float16] */, %271) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %285 = @tvmgen_default_cutlass_main_341(%284, meta[relay.Constant][248] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][249] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %286 = layout_transform(meta[relay.Constant][250] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %287 = nn.conv2d(%285, %286, padding=[1, 1, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %288 = add(%287, meta[relay.Constant][251] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %289 = sigmoid(%288) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %290 = multiply(%288, %289) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %292 = mean(%291, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %293 = cast(%292, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %294 = @tvmgen_default_cutlass_main_344(%293, meta[relay.Constant][252] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][253] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %295 = @tvmgen_default_cutlass_main_347(%294, meta[relay.Constant][254] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][255] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %296 = multiply(%295, %290) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %297 = @tvmgen_default_cutlass_main_350(%296, meta[relay.Constant][256] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][257] /* ty=Tensor[(1, 1, 1, 176), float16] */, %284) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %298 = @tvmgen_default_cutlass_main_354(%297, meta[relay.Constant][258] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][259] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %299 = layout_transform(meta[relay.Constant][260] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %300 = nn.conv2d(%298, %299, strides=[2, 2], padding=[0, 0, 1, 1], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %301 = add(%300, meta[relay.Constant][261] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %302 = sigmoid(%301) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %303 = multiply(%301, %302) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(8, 7, 7, 1056), float32] */;
  %305 = mean(%304, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %306 = cast(%305, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %307 = @tvmgen_default_cutlass_main_357(%306, meta[relay.Constant][262] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][263] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %308 = @tvmgen_default_cutlass_main_360(%307, meta[relay.Constant][264] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][265] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %309 = multiply(%308, %303) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %310 = @tvmgen_default_cutlass_main_363(%309, meta[relay.Constant][266] /* ty=Tensor[(304, 1, 1, 1056), float16] */, meta[relay.Constant][267] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %311 = @tvmgen_default_cutlass_main_366(%310, meta[relay.Constant][268] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][269] /* ty=Tensor[(1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %312 = layout_transform(meta[relay.Constant][270] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %313 = nn.conv2d(%311, %312, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %314 = add(%313, meta[relay.Constant][271] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %315 = sigmoid(%314) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %316 = multiply(%314, %315) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %318 = mean(%317, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %319 = cast(%318, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %320 = @tvmgen_default_cutlass_main_369(%319, meta[relay.Constant][272] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][273] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %321 = @tvmgen_default_cutlass_main_372(%320, meta[relay.Constant][274] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][275] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %322 = multiply(%321, %316) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %323 = @tvmgen_default_cutlass_main_375(%322, meta[relay.Constant][276] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][277] /* ty=Tensor[(1, 1, 1, 304), float16] */, %310) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %324 = @tvmgen_default_cutlass_main_379(%323, meta[relay.Constant][278] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][279] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %325 = layout_transform(meta[relay.Constant][280] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %326 = nn.conv2d(%324, %325, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %327 = add(%326, meta[relay.Constant][281] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %328 = sigmoid(%327) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %329 = multiply(%327, %328) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %331 = mean(%330, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %332 = cast(%331, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %333 = @tvmgen_default_cutlass_main_382(%332, meta[relay.Constant][282] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][283] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %334 = @tvmgen_default_cutlass_main_385(%333, meta[relay.Constant][284] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][285] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %335 = multiply(%334, %329) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %336 = @tvmgen_default_cutlass_main_388(%335, meta[relay.Constant][286] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][287] /* ty=Tensor[(1, 1, 1, 304), float16] */, %323) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %337 = @tvmgen_default_cutlass_main_392(%336, meta[relay.Constant][288] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][289] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %338 = layout_transform(meta[relay.Constant][290] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %339 = nn.conv2d(%337, %338, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %340 = add(%339, meta[relay.Constant][291] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %341 = sigmoid(%340) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %342 = multiply(%340, %341) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %344 = mean(%343, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %345 = cast(%344, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %346 = @tvmgen_default_cutlass_main_395(%345, meta[relay.Constant][292] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][293] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %347 = @tvmgen_default_cutlass_main_398(%346, meta[relay.Constant][294] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][295] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %348 = multiply(%347, %342) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %349 = @tvmgen_default_cutlass_main_401(%348, meta[relay.Constant][296] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][297] /* ty=Tensor[(1, 1, 1, 304), float16] */, %336) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %350 = @tvmgen_default_cutlass_main_405(%349, meta[relay.Constant][298] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][299] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %351 = layout_transform(meta[relay.Constant][300] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %352 = nn.conv2d(%350, %351, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %353 = add(%352, meta[relay.Constant][301] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %354 = sigmoid(%353) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %355 = multiply(%353, %354) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %357 = mean(%356, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %358 = cast(%357, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %359 = @tvmgen_default_cutlass_main_408(%358, meta[relay.Constant][302] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][303] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %360 = @tvmgen_default_cutlass_main_411(%359, meta[relay.Constant][304] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][305] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %361 = multiply(%360, %355) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %362 = @tvmgen_default_cutlass_main_414(%361, meta[relay.Constant][306] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][307] /* ty=Tensor[(1, 1, 1, 304), float16] */, %349) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %363 = @tvmgen_default_cutlass_main_418(%362, meta[relay.Constant][308] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][309] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %364 = layout_transform(meta[relay.Constant][310] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %365 = nn.conv2d(%363, %364, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %366 = add(%365, meta[relay.Constant][311] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %367 = sigmoid(%366) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %368 = multiply(%366, %367) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %370 = mean(%369, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %371 = cast(%370, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %372 = @tvmgen_default_cutlass_main_421(%371, meta[relay.Constant][312] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][313] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %373 = @tvmgen_default_cutlass_main_424(%372, meta[relay.Constant][314] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][315] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %374 = multiply(%373, %368) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %375 = @tvmgen_default_cutlass_main_427(%374, meta[relay.Constant][316] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][317] /* ty=Tensor[(1, 1, 1, 304), float16] */, %362) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %376 = @tvmgen_default_cutlass_main_431(%375, meta[relay.Constant][318] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][319] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %377 = layout_transform(meta[relay.Constant][320] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %378 = nn.conv2d(%376, %377, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %379 = add(%378, meta[relay.Constant][321] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %380 = sigmoid(%379) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %381 = multiply(%379, %380) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %383 = mean(%382, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %384 = cast(%383, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %385 = @tvmgen_default_cutlass_main_434(%384, meta[relay.Constant][322] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][323] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %386 = @tvmgen_default_cutlass_main_437(%385, meta[relay.Constant][324] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][325] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %387 = multiply(%386, %381) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %388 = @tvmgen_default_cutlass_main_440(%387, meta[relay.Constant][326] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][327] /* ty=Tensor[(1, 1, 1, 304), float16] */, %375) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %389 = @tvmgen_default_cutlass_main_444(%388, meta[relay.Constant][328] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][329] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %390 = layout_transform(meta[relay.Constant][330] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %391 = nn.conv2d(%389, %390, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %392 = add(%391, meta[relay.Constant][331] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %393 = sigmoid(%392) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %394 = multiply(%392, %393) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %396 = mean(%395, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %397 = cast(%396, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %398 = @tvmgen_default_cutlass_main_447(%397, meta[relay.Constant][332] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][333] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %399 = @tvmgen_default_cutlass_main_450(%398, meta[relay.Constant][334] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][335] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %400 = multiply(%399, %394) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %401 = @tvmgen_default_cutlass_main_453(%400, meta[relay.Constant][336] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][337] /* ty=Tensor[(1, 1, 1, 304), float16] */, %388) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %402 = @tvmgen_default_cutlass_main_457(%401, meta[relay.Constant][338] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][339] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %403 = layout_transform(meta[relay.Constant][340] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %404 = nn.conv2d(%402, %403, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %405 = add(%404, meta[relay.Constant][341] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %406 = sigmoid(%405) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %407 = multiply(%405, %406) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %409 = mean(%408, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %410 = cast(%409, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %411 = @tvmgen_default_cutlass_main_460(%410, meta[relay.Constant][342] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][343] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %412 = @tvmgen_default_cutlass_main_463(%411, meta[relay.Constant][344] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][345] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %413 = multiply(%412, %407) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %414 = @tvmgen_default_cutlass_main_466(%413, meta[relay.Constant][346] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][347] /* ty=Tensor[(1, 1, 1, 304), float16] */, %401) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %415 = @tvmgen_default_cutlass_main_470(%414, meta[relay.Constant][348] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][349] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %416 = layout_transform(meta[relay.Constant][350] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %417 = nn.conv2d(%415, %416, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %418 = add(%417, meta[relay.Constant][351] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %419 = sigmoid(%418) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %420 = multiply(%418, %419) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %422 = mean(%421, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %423 = cast(%422, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %424 = @tvmgen_default_cutlass_main_473(%423, meta[relay.Constant][352] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][353] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %425 = @tvmgen_default_cutlass_main_476(%424, meta[relay.Constant][354] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][355] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %426 = multiply(%425, %420) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %427 = @tvmgen_default_cutlass_main_479(%426, meta[relay.Constant][356] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][357] /* ty=Tensor[(1, 1, 1, 304), float16] */, %414) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %428 = @tvmgen_default_cutlass_main_483(%427, meta[relay.Constant][358] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][359] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %429 = layout_transform(meta[relay.Constant][360] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %430 = nn.conv2d(%428, %429, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %431 = add(%430, meta[relay.Constant][361] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %432 = sigmoid(%431) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %433 = multiply(%431, %432) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %435 = mean(%434, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %436 = cast(%435, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %437 = @tvmgen_default_cutlass_main_486(%436, meta[relay.Constant][362] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][363] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %438 = @tvmgen_default_cutlass_main_489(%437, meta[relay.Constant][364] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][365] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %439 = multiply(%438, %433) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %440 = @tvmgen_default_cutlass_main_492(%439, meta[relay.Constant][366] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][367] /* ty=Tensor[(1, 1, 1, 304), float16] */, %427) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %441 = @tvmgen_default_cutlass_main_496(%440, meta[relay.Constant][368] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][369] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %442 = layout_transform(meta[relay.Constant][370] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %443 = nn.conv2d(%441, %442, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %444 = add(%443, meta[relay.Constant][371] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %445 = sigmoid(%444) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %446 = multiply(%444, %445) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %448 = mean(%447, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %449 = cast(%448, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %450 = @tvmgen_default_cutlass_main_499(%449, meta[relay.Constant][372] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][373] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %451 = @tvmgen_default_cutlass_main_502(%450, meta[relay.Constant][374] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][375] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %452 = multiply(%451, %446) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %453 = @tvmgen_default_cutlass_main_505(%452, meta[relay.Constant][376] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][377] /* ty=Tensor[(1, 1, 1, 304), float16] */, %440) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %454 = @tvmgen_default_cutlass_main_509(%453, meta[relay.Constant][378] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][379] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %455 = layout_transform(meta[relay.Constant][380] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %456 = nn.conv2d(%454, %455, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %457 = add(%456, meta[relay.Constant][381] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %458 = sigmoid(%457) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %459 = multiply(%457, %458) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %461 = mean(%460, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %462 = cast(%461, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %463 = @tvmgen_default_cutlass_main_512(%462, meta[relay.Constant][382] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][383] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %464 = @tvmgen_default_cutlass_main_515(%463, meta[relay.Constant][384] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][385] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %465 = multiply(%464, %459) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %466 = @tvmgen_default_cutlass_main_518(%465, meta[relay.Constant][386] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][387] /* ty=Tensor[(1, 1, 1, 304), float16] */, %453) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %467 = @tvmgen_default_cutlass_main_522(%466, meta[relay.Constant][388] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][389] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %468 = layout_transform(meta[relay.Constant][390] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %469 = nn.conv2d(%467, %468, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %470 = add(%469, meta[relay.Constant][391] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %471 = sigmoid(%470) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %472 = multiply(%470, %471) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %474 = mean(%473, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %475 = cast(%474, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %476 = @tvmgen_default_cutlass_main_525(%475, meta[relay.Constant][392] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][393] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %477 = @tvmgen_default_cutlass_main_528(%476, meta[relay.Constant][394] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][395] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %478 = multiply(%477, %472) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %479 = @tvmgen_default_cutlass_main_531(%478, meta[relay.Constant][396] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][397] /* ty=Tensor[(1, 1, 1, 304), float16] */, %466) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %480 = @tvmgen_default_cutlass_main_535(%479, meta[relay.Constant][398] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][399] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %481 = layout_transform(meta[relay.Constant][400] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %482 = nn.conv2d(%480, %481, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %483 = add(%482, meta[relay.Constant][401] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %484 = sigmoid(%483) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %485 = multiply(%483, %484) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %487 = mean(%486, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %488 = cast(%487, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %489 = @tvmgen_default_cutlass_main_538(%488, meta[relay.Constant][402] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][403] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %490 = @tvmgen_default_cutlass_main_541(%489, meta[relay.Constant][404] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][405] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %491 = multiply(%490, %485) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %492 = @tvmgen_default_cutlass_main_544(%491, meta[relay.Constant][406] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][407] /* ty=Tensor[(1, 1, 1, 304), float16] */, %479) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %493 = @tvmgen_default_cutlass_main_548(%492, meta[relay.Constant][408] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][409] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %494 = layout_transform(meta[relay.Constant][410] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %495 = nn.conv2d(%493, %494, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %496 = add(%495, meta[relay.Constant][411] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %497 = sigmoid(%496) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %498 = multiply(%496, %497) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %500 = mean(%499, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %501 = cast(%500, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %502 = @tvmgen_default_cutlass_main_551(%501, meta[relay.Constant][412] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][413] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %503 = @tvmgen_default_cutlass_main_554(%502, meta[relay.Constant][414] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][415] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %504 = multiply(%503, %498) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %505 = @tvmgen_default_cutlass_main_557(%504, meta[relay.Constant][416] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][417] /* ty=Tensor[(1, 1, 1, 304), float16] */, %492) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %506 = @tvmgen_default_cutlass_main_561(%505, meta[relay.Constant][418] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][419] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %507 = layout_transform(meta[relay.Constant][420] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %508 = nn.conv2d(%506, %507, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %509 = add(%508, meta[relay.Constant][421] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %510 = sigmoid(%509) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %511 = multiply(%509, %510) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %513 = mean(%512, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %514 = cast(%513, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %515 = @tvmgen_default_cutlass_main_564(%514, meta[relay.Constant][422] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][423] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %516 = @tvmgen_default_cutlass_main_567(%515, meta[relay.Constant][424] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][425] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %517 = multiply(%516, %511) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %518 = @tvmgen_default_cutlass_main_570(%517, meta[relay.Constant][426] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][427] /* ty=Tensor[(1, 1, 1, 304), float16] */, %505) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %519 = @tvmgen_default_cutlass_main_574(%518, meta[relay.Constant][428] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][429] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %520 = layout_transform(meta[relay.Constant][430] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %521 = nn.conv2d(%519, %520, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %522 = add(%521, meta[relay.Constant][431] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %523 = sigmoid(%522) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %524 = multiply(%522, %523) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %526 = mean(%525, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %527 = cast(%526, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %528 = @tvmgen_default_cutlass_main_577(%527, meta[relay.Constant][432] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][433] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %529 = @tvmgen_default_cutlass_main_580(%528, meta[relay.Constant][434] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][435] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %530 = multiply(%529, %524) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %531 = @tvmgen_default_cutlass_main_583(%530, meta[relay.Constant][436] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][437] /* ty=Tensor[(1, 1, 1, 304), float16] */, %518) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %532 = @tvmgen_default_cutlass_main_587(%531, meta[relay.Constant][438] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][439] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %533 = layout_transform(meta[relay.Constant][440] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %534 = nn.conv2d(%532, %533, padding=[1, 1, 1, 1], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %535 = add(%534, meta[relay.Constant][441] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %536 = sigmoid(%535) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %537 = multiply(%535, %536) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %539 = mean(%538, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %540 = cast(%539, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %541 = @tvmgen_default_cutlass_main_590(%540, meta[relay.Constant][442] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][443] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %542 = @tvmgen_default_cutlass_main_593(%541, meta[relay.Constant][444] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][445] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %543 = multiply(%542, %537) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %544 = @tvmgen_default_cutlass_main_596(%543, meta[relay.Constant][446] /* ty=Tensor[(512, 1, 1, 1824), float16] */, meta[relay.Constant][447] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %545 = @tvmgen_default_cutlass_main_599(%544, meta[relay.Constant][448] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][449] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %546 = layout_transform(meta[relay.Constant][450] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %547 = nn.conv2d(%545, %546, padding=[1, 1, 1, 1], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %548 = add(%547, meta[relay.Constant][451] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %549 = sigmoid(%548) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %550 = multiply(%548, %549) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %552 = mean(%551, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %553 = cast(%552, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %554 = @tvmgen_default_cutlass_main_602(%553, meta[relay.Constant][452] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][453] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %555 = @tvmgen_default_cutlass_main_605(%554, meta[relay.Constant][454] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][455] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %556 = multiply(%555, %550) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %557 = @tvmgen_default_cutlass_main_608(%556, meta[relay.Constant][456] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][457] /* ty=Tensor[(1, 1, 1, 512), float16] */, %544) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %558 = @tvmgen_default_cutlass_main_612(%557, meta[relay.Constant][458] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][459] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %559 = layout_transform(meta[relay.Constant][460] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %560 = nn.conv2d(%558, %559, padding=[1, 1, 1, 1], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %561 = add(%560, meta[relay.Constant][461] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %562 = sigmoid(%561) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %563 = multiply(%561, %562) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %565 = mean(%564, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %566 = cast(%565, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %567 = @tvmgen_default_cutlass_main_615(%566, meta[relay.Constant][462] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][463] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %568 = @tvmgen_default_cutlass_main_618(%567, meta[relay.Constant][464] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][465] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %569 = multiply(%568, %563) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %570 = @tvmgen_default_cutlass_main_621(%569, meta[relay.Constant][466] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][467] /* ty=Tensor[(1, 1, 1, 512), float16] */, %557) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %571 = @tvmgen_default_cutlass_main_625(%570, meta[relay.Constant][468] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][469] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %572 = layout_transform(meta[relay.Constant][470] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %573 = nn.conv2d(%571, %572, padding=[1, 1, 1, 1], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %574 = add(%573, meta[relay.Constant][471] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %575 = sigmoid(%574) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %576 = multiply(%574, %575) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %578 = mean(%577, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %579 = cast(%578, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %580 = @tvmgen_default_cutlass_main_628(%579, meta[relay.Constant][472] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][473] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %581 = @tvmgen_default_cutlass_main_631(%580, meta[relay.Constant][474] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][475] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %582 = multiply(%581, %576) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %583 = @tvmgen_default_cutlass_main_634(%582, meta[relay.Constant][476] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][477] /* ty=Tensor[(1, 1, 1, 512), float16] */, %570) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %584 = @tvmgen_default_cutlass_main_638(%583, meta[relay.Constant][478] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][479] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %585 = layout_transform(meta[relay.Constant][480] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %586 = nn.conv2d(%584, %585, padding=[1, 1, 1, 1], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %587 = add(%586, meta[relay.Constant][481] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %588 = sigmoid(%587) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %589 = multiply(%587, %588) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %591 = mean(%590, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %592 = cast(%591, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %593 = @tvmgen_default_cutlass_main_641(%592, meta[relay.Constant][482] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][483] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %594 = @tvmgen_default_cutlass_main_644(%593, meta[relay.Constant][484] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][485] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %595 = multiply(%594, %589) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %596 = @tvmgen_default_cutlass_main_647(%595, meta[relay.Constant][486] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][487] /* ty=Tensor[(1, 1, 1, 512), float16] */, %583) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %597 = @tvmgen_default_cutlass_main_651(%596, meta[relay.Constant][488] /* ty=Tensor[(1280, 1, 1, 512), float16] */, meta[relay.Constant][489] /* ty=Tensor[(1, 1, 1, 1280), float16] */) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
  %598 = transpose(%597, axes=[0, 1, 2, 3]) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(8, 7, 7, 1280), float32] */;
  %600 = mean(%599, axis=[1, 2]) /* ty=Tensor[(8, 1280), float32] */;
  %601 = cast(%600, dtype="float16") /* ty=Tensor[(8, 1280), float16] */;
  @tvmgen_default_cutlass_main_654(%601, meta[relay.Constant][490] /* ty=Tensor[(1000, 1280), float16] */, meta[relay.Constant][491] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(8, 1000), float16] */
}

def @tvmgen_default_cutlass_main_0(%cutlass_0_i0: Tensor[(8, 224, 224, 3), float16], %cutlass_0_i1: Tensor[(24, 3, 3, 3), float16], %cutlass_0_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_0", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %605 = fn (%FunctionVar_143_0: Tensor[(8, 224, 224, 3), float16], %FunctionVar_143_1: Tensor[(24, 3, 3, 3), float16], %FunctionVar_143_2: Tensor[(1, 1, 1, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 112, 112, 24), float16] {
    %602 = nn.conv2d(%FunctionVar_143_0, %FunctionVar_143_1, strides=[2, 2], padding=[0, 0, 1, 1], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %603 = add(%602, %FunctionVar_143_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %604 = sigmoid(%603) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    multiply(%603, %604) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %605(%cutlass_0_i0, %cutlass_0_i1, %cutlass_0_i2) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_101(%cutlass_101_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_101_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_101_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_101", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %608 = fn (%FunctionVar_84_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_84_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_84_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %606 = nn.conv2d(%FunctionVar_84_0, %FunctionVar_84_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %607 = add(%606, %FunctionVar_84_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%607) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %608(%cutlass_101_i0, %cutlass_101_i1, %cutlass_101_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_104(%cutlass_104_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_104_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_104_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_104_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_104", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %611 = fn (%FunctionVar_39_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_39_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_39_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_39_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %609 = nn.conv2d(%FunctionVar_39_0, %FunctionVar_39_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %610 = add(%609, %FunctionVar_39_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%610, %FunctionVar_39_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %611(%cutlass_104_i0, %cutlass_104_i1, %cutlass_104_i2, %cutlass_104_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_108(%cutlass_108_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_108_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_108_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_108", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %615 = fn (%FunctionVar_126_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_126_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_126_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %612 = nn.conv2d(%FunctionVar_126_0, %FunctionVar_126_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %613 = add(%612, %FunctionVar_126_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %614 = sigmoid(%613) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%613, %614) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %615(%cutlass_108_i0, %cutlass_108_i1, %cutlass_108_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_11(%cutlass_11_i0: Tensor[(8, 112, 112, 24), float16], %cutlass_11_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_11_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_11", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %620 = fn (%FunctionVar_0_0: Tensor[(8, 112, 112, 24), float16], %FunctionVar_0_1: Tensor[(24, 3, 3, 24), float16], %FunctionVar_0_2: Tensor[(1, 1, 1, 24), float16], %FunctionVar_0_3: Tensor[(8, 112, 112, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_add_", Composite="cutlass.conv2d_bias_silu_residual_add") -> Tensor[(8, 112, 112, 24), float16] {
    %616 = nn.conv2d(%FunctionVar_0_3, %FunctionVar_0_1, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %617 = add(%616, %FunctionVar_0_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %618 = sigmoid(%617) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %619 = multiply(%617, %618) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    add(%619, %FunctionVar_0_3) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %620(%cutlass_11_i0, %cutlass_11_i1, %cutlass_11_i2, %cutlass_11_i0) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_111(%cutlass_111_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_111_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_111_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_111", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %624 = fn (%FunctionVar_124_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_124_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_124_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %621 = nn.conv2d(%FunctionVar_124_0, %FunctionVar_124_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %622 = add(%621, %FunctionVar_124_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %623 = sigmoid(%622) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%622, %623) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %624(%cutlass_111_i0, %cutlass_111_i1, %cutlass_111_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_114(%cutlass_114_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_114_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_114_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_114", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %627 = fn (%FunctionVar_82_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_82_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_82_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %625 = nn.conv2d(%FunctionVar_82_0, %FunctionVar_82_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %626 = add(%625, %FunctionVar_82_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%626) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %627(%cutlass_114_i0, %cutlass_114_i1, %cutlass_114_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_117(%cutlass_117_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_117_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_117_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_117_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_117", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %630 = fn (%FunctionVar_38_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_38_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_38_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_38_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %628 = nn.conv2d(%FunctionVar_38_0, %FunctionVar_38_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %629 = add(%628, %FunctionVar_38_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%629, %FunctionVar_38_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %630(%cutlass_117_i0, %cutlass_117_i1, %cutlass_117_i2, %cutlass_117_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_121(%cutlass_121_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_121_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_121_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_121", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %634 = fn (%FunctionVar_123_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_123_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_123_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %631 = nn.conv2d(%FunctionVar_123_0, %FunctionVar_123_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %632 = add(%631, %FunctionVar_123_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %633 = sigmoid(%632) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%632, %633) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %634(%cutlass_121_i0, %cutlass_121_i1, %cutlass_121_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_124(%cutlass_124_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_124_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_124_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_124", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %638 = fn (%FunctionVar_121_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_121_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_121_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %635 = nn.conv2d(%FunctionVar_121_0, %FunctionVar_121_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %636 = add(%635, %FunctionVar_121_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %637 = sigmoid(%636) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%636, %637) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %638(%cutlass_124_i0, %cutlass_124_i1, %cutlass_124_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_127(%cutlass_127_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_127_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_127_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_127", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %641 = fn (%FunctionVar_80_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_80_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_80_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %639 = nn.conv2d(%FunctionVar_80_0, %FunctionVar_80_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %640 = add(%639, %FunctionVar_80_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%640) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %641(%cutlass_127_i0, %cutlass_127_i1, %cutlass_127_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_130(%cutlass_130_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_130_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_130_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_130_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_130", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %644 = fn (%FunctionVar_37_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_37_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_37_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_37_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %642 = nn.conv2d(%FunctionVar_37_0, %FunctionVar_37_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %643 = add(%642, %FunctionVar_37_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%643, %FunctionVar_37_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %644(%cutlass_130_i0, %cutlass_130_i1, %cutlass_130_i2, %cutlass_130_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_134(%cutlass_134_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_134_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_134_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_134", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %648 = fn (%FunctionVar_120_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_120_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_120_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %645 = nn.conv2d(%FunctionVar_120_0, %FunctionVar_120_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %646 = add(%645, %FunctionVar_120_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %647 = sigmoid(%646) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%646, %647) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %648(%cutlass_134_i0, %cutlass_134_i1, %cutlass_134_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_137(%cutlass_137_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_137_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_137_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_137", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %652 = fn (%FunctionVar_118_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_118_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_118_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %649 = nn.conv2d(%FunctionVar_118_0, %FunctionVar_118_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %650 = add(%649, %FunctionVar_118_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %651 = sigmoid(%650) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%650, %651) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %652(%cutlass_137_i0, %cutlass_137_i1, %cutlass_137_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_140(%cutlass_140_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_140_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_140_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_140", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %655 = fn (%FunctionVar_78_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_78_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_78_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %653 = nn.conv2d(%FunctionVar_78_0, %FunctionVar_78_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %654 = add(%653, %FunctionVar_78_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%654) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %655(%cutlass_140_i0, %cutlass_140_i1, %cutlass_140_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_143(%cutlass_143_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_143_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_143_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_143_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_143", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %658 = fn (%FunctionVar_36_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_36_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_36_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_36_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %656 = nn.conv2d(%FunctionVar_36_0, %FunctionVar_36_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %657 = add(%656, %FunctionVar_36_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%657, %FunctionVar_36_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %658(%cutlass_143_i0, %cutlass_143_i1, %cutlass_143_i2, %cutlass_143_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_147(%cutlass_147_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_147_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_147_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_147", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %662 = fn (%FunctionVar_117_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_117_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_117_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %659 = nn.conv2d(%FunctionVar_117_0, %FunctionVar_117_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %660 = add(%659, %FunctionVar_117_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %661 = sigmoid(%660) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%660, %661) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %662(%cutlass_147_i0, %cutlass_147_i1, %cutlass_147_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_15(%cutlass_15_i0: Tensor[(8, 112, 112, 24), float16], %cutlass_15_i1: Tensor[(96, 3, 3, 24), float16], %cutlass_15_i2: Tensor[(1, 1, 1, 96), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_15", Primitive=1) -> Tensor[(8, 56, 56, 96), float16] {
  %666 = fn (%FunctionVar_142_0: Tensor[(8, 112, 112, 24), float16], %FunctionVar_142_1: Tensor[(96, 3, 3, 24), float16], %FunctionVar_142_2: Tensor[(1, 1, 1, 96), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 96), float16] {
    %663 = nn.conv2d(%FunctionVar_142_0, %FunctionVar_142_1, strides=[2, 2], padding=[0, 0, 1, 1], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 96), float16] */;
    %664 = add(%663, %FunctionVar_142_2) /* ty=Tensor[(8, 56, 56, 96), float16] */;
    %665 = sigmoid(%664) /* ty=Tensor[(8, 56, 56, 96), float16] */;
    multiply(%664, %665) /* ty=Tensor[(8, 56, 56, 96), float16] */
  };
  %666(%cutlass_15_i0, %cutlass_15_i1, %cutlass_15_i2) /* ty=Tensor[(8, 56, 56, 96), float16] */
}

def @tvmgen_default_cutlass_main_150(%cutlass_150_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_150_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_150_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_150", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %670 = fn (%FunctionVar_115_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_115_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_115_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %667 = nn.conv2d(%FunctionVar_115_0, %FunctionVar_115_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %668 = add(%667, %FunctionVar_115_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %669 = sigmoid(%668) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%668, %669) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %670(%cutlass_150_i0, %cutlass_150_i1, %cutlass_150_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_153(%cutlass_153_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_153_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_153_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_153", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %673 = fn (%FunctionVar_76_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_76_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_76_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %671 = nn.conv2d(%FunctionVar_76_0, %FunctionVar_76_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %672 = add(%671, %FunctionVar_76_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%672) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %673(%cutlass_153_i0, %cutlass_153_i1, %cutlass_153_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_156(%cutlass_156_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_156_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_156_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_156_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_156", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %676 = fn (%FunctionVar_35_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_35_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_35_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_35_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %674 = nn.conv2d(%FunctionVar_35_0, %FunctionVar_35_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %675 = add(%674, %FunctionVar_35_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%675, %FunctionVar_35_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %676(%cutlass_156_i0, %cutlass_156_i1, %cutlass_156_i2, %cutlass_156_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_160(%cutlass_160_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_160_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_160_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_160", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %680 = fn (%FunctionVar_114_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_114_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_114_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %677 = nn.conv2d(%FunctionVar_114_0, %FunctionVar_114_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %678 = add(%677, %FunctionVar_114_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %679 = sigmoid(%678) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%678, %679) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %680(%cutlass_160_i0, %cutlass_160_i1, %cutlass_160_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_163(%cutlass_163_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_163_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_163_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_163", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %684 = fn (%FunctionVar_112_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_112_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_112_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %681 = nn.conv2d(%FunctionVar_112_0, %FunctionVar_112_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %682 = add(%681, %FunctionVar_112_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %683 = sigmoid(%682) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%682, %683) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %684(%cutlass_163_i0, %cutlass_163_i1, %cutlass_163_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_166(%cutlass_166_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_166_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_166_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_166", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %687 = fn (%FunctionVar_74_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_74_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_74_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %685 = nn.conv2d(%FunctionVar_74_0, %FunctionVar_74_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %686 = add(%685, %FunctionVar_74_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%686) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %687(%cutlass_166_i0, %cutlass_166_i1, %cutlass_166_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_169(%cutlass_169_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_169_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_169_i2: Tensor[(1, 1, 1, 160), float16], %cutlass_169_i3: Tensor[(8, 14, 14, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_169", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %690 = fn (%FunctionVar_34_0: Tensor[(8, 14, 14, 640), float16], %FunctionVar_34_1: Tensor[(160, 1, 1, 640), float16], %FunctionVar_34_2: Tensor[(1, 1, 1, 160), float16], %FunctionVar_34_3: Tensor[(8, 14, 14, 160), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 160), float16] {
    %688 = nn.conv2d(%FunctionVar_34_0, %FunctionVar_34_1, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    %689 = add(%688, %FunctionVar_34_2) /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%689, %FunctionVar_34_3) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %690(%cutlass_169_i0, %cutlass_169_i1, %cutlass_169_i2, %cutlass_169_i3) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_173(%cutlass_173_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_173_i1: Tensor[(960, 1, 1, 160), float16], %cutlass_173_i2: Tensor[(1, 1, 1, 960), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_173", Primitive=1) -> Tensor[(8, 14, 14, 960), float16] {
  %694 = fn (%FunctionVar_111_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_111_1: Tensor[(960, 1, 1, 160), float16], %FunctionVar_111_2: Tensor[(1, 1, 1, 960), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 960), float16] {
    %691 = nn.conv2d(%FunctionVar_111_0, %FunctionVar_111_1, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 960), float16] */;
    %692 = add(%691, %FunctionVar_111_2) /* ty=Tensor[(8, 14, 14, 960), float16] */;
    %693 = sigmoid(%692) /* ty=Tensor[(8, 14, 14, 960), float16] */;
    multiply(%692, %693) /* ty=Tensor[(8, 14, 14, 960), float16] */
  };
  %694(%cutlass_173_i0, %cutlass_173_i1, %cutlass_173_i2) /* ty=Tensor[(8, 14, 14, 960), float16] */
}

def @tvmgen_default_cutlass_main_176(%cutlass_176_i0: Tensor[(8, 1, 1, 960), float16], %cutlass_176_i1: Tensor[(40, 1, 1, 960), float16], %cutlass_176_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_176", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %698 = fn (%FunctionVar_109_0: Tensor[(8, 1, 1, 960), float16], %FunctionVar_109_1: Tensor[(40, 1, 1, 960), float16], %FunctionVar_109_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %695 = nn.conv2d(%FunctionVar_109_0, %FunctionVar_109_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %696 = add(%695, %FunctionVar_109_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %697 = sigmoid(%696) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%696, %697) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %698(%cutlass_176_i0, %cutlass_176_i1, %cutlass_176_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_179(%cutlass_179_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_179_i1: Tensor[(960, 1, 1, 40), float16], %cutlass_179_i2: Tensor[(1, 1, 1, 960), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_179", Primitive=1) -> Tensor[(8, 1, 1, 960), float16] {
  %701 = fn (%FunctionVar_72_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_72_1: Tensor[(960, 1, 1, 40), float16], %FunctionVar_72_2: Tensor[(1, 1, 1, 960), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 960), float16] {
    %699 = nn.conv2d(%FunctionVar_72_0, %FunctionVar_72_1, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 960), float16] */;
    %700 = add(%699, %FunctionVar_72_2) /* ty=Tensor[(8, 1, 1, 960), float16] */;
    sigmoid(%700) /* ty=Tensor[(8, 1, 1, 960), float16] */
  };
  %701(%cutlass_179_i0, %cutlass_179_i1, %cutlass_179_i2) /* ty=Tensor[(8, 1, 1, 960), float16] */
}

def @tvmgen_default_cutlass_main_18(%cutlass_18_i0: Tensor[(8, 56, 56, 96), float16], %cutlass_18_i1: Tensor[(48, 1, 1, 96), float16], %cutlass_18_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_18", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %703 = fn (%FunctionVar_49_0: Tensor[(8, 56, 56, 96), float16], %FunctionVar_49_1: Tensor[(48, 1, 1, 96), float16], %FunctionVar_49_2: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %702 = nn.conv2d(%FunctionVar_49_0, %FunctionVar_49_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%702, %FunctionVar_49_2) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %703(%cutlass_18_i0, %cutlass_18_i1, %cutlass_18_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_182(%cutlass_182_i0: Tensor[(8, 14, 14, 960), float16], %cutlass_182_i1: Tensor[(176, 1, 1, 960), float16], %cutlass_182_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_182", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %705 = fn (%FunctionVar_38_01: Tensor[(8, 14, 14, 960), float16], %FunctionVar_38_11: Tensor[(176, 1, 1, 960), float16], %FunctionVar_38_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %704 = nn.conv2d(%FunctionVar_38_01, %FunctionVar_38_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%704, %FunctionVar_38_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %705(%cutlass_182_i0, %cutlass_182_i1, %cutlass_182_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_185(%cutlass_185_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_185_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_185_i2: Tensor[(1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_185", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %709 = fn (%FunctionVar_108_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_108_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_108_2: Tensor[(1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %706 = nn.conv2d(%FunctionVar_108_0, %FunctionVar_108_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %707 = add(%706, %FunctionVar_108_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %708 = sigmoid(%707) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%707, %708) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %709(%cutlass_185_i0, %cutlass_185_i1, %cutlass_185_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_188(%cutlass_188_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_188_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_188_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_188", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %713 = fn (%FunctionVar_106_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_106_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_106_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %710 = nn.conv2d(%FunctionVar_106_0, %FunctionVar_106_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %711 = add(%710, %FunctionVar_106_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %712 = sigmoid(%711) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%711, %712) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %713(%cutlass_188_i0, %cutlass_188_i1, %cutlass_188_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_191(%cutlass_191_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_191_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_191_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_191", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %716 = fn (%FunctionVar_70_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_70_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_70_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %714 = nn.conv2d(%FunctionVar_70_0, %FunctionVar_70_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %715 = add(%714, %FunctionVar_70_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%715) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %716(%cutlass_191_i0, %cutlass_191_i1, %cutlass_191_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_194(%cutlass_194_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_194_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_194_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_194_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_194", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %719 = fn (%FunctionVar_33_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_33_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_33_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_33_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %717 = nn.conv2d(%FunctionVar_33_0, %FunctionVar_33_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %718 = add(%717, %FunctionVar_33_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%718, %FunctionVar_33_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %719(%cutlass_194_i0, %cutlass_194_i1, %cutlass_194_i2, %cutlass_194_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_198(%cutlass_198_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_198_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_198_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_198", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %723 = fn (%FunctionVar_105_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_105_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_105_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %720 = nn.conv2d(%FunctionVar_105_0, %FunctionVar_105_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %721 = add(%720, %FunctionVar_105_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %722 = sigmoid(%721) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%721, %722) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %723(%cutlass_198_i0, %cutlass_198_i1, %cutlass_198_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_201(%cutlass_201_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_201_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_201_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_201", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %727 = fn (%FunctionVar_103_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_103_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_103_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %724 = nn.conv2d(%FunctionVar_103_0, %FunctionVar_103_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %725 = add(%724, %FunctionVar_103_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %726 = sigmoid(%725) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%725, %726) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %727(%cutlass_201_i0, %cutlass_201_i1, %cutlass_201_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_204(%cutlass_204_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_204_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_204_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_204", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %730 = fn (%FunctionVar_68_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_68_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_68_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %728 = nn.conv2d(%FunctionVar_68_0, %FunctionVar_68_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %729 = add(%728, %FunctionVar_68_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%729) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %730(%cutlass_204_i0, %cutlass_204_i1, %cutlass_204_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_207(%cutlass_207_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_207_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_207_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_207_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_207", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %733 = fn (%FunctionVar_32_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_32_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_32_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_32_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %731 = nn.conv2d(%FunctionVar_32_0, %FunctionVar_32_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %732 = add(%731, %FunctionVar_32_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%732, %FunctionVar_32_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %733(%cutlass_207_i0, %cutlass_207_i1, %cutlass_207_i2, %cutlass_207_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_21(%cutlass_21_i0: Tensor[(8, 56, 56, 48), float16], %cutlass_21_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_21_i2: Tensor[(192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_21", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %737 = fn (%FunctionVar_141_0: Tensor[(8, 56, 56, 48), float16], %FunctionVar_141_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_141_2: Tensor[(192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %734 = nn.conv2d(%FunctionVar_141_0, %FunctionVar_141_1, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %735 = add(%734, %FunctionVar_141_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %736 = sigmoid(%735) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%735, %736) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %737(%cutlass_21_i0, %cutlass_21_i1, %cutlass_21_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_211(%cutlass_211_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_211_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_211_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_211", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %741 = fn (%FunctionVar_102_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_102_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_102_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %738 = nn.conv2d(%FunctionVar_102_0, %FunctionVar_102_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %739 = add(%738, %FunctionVar_102_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %740 = sigmoid(%739) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%739, %740) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %741(%cutlass_211_i0, %cutlass_211_i1, %cutlass_211_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_214(%cutlass_214_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_214_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_214_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_214", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %745 = fn (%FunctionVar_100_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_100_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_100_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %742 = nn.conv2d(%FunctionVar_100_0, %FunctionVar_100_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %743 = add(%742, %FunctionVar_100_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %744 = sigmoid(%743) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%743, %744) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %745(%cutlass_214_i0, %cutlass_214_i1, %cutlass_214_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_217(%cutlass_217_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_217_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_217_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_217", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %748 = fn (%FunctionVar_66_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_66_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_66_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %746 = nn.conv2d(%FunctionVar_66_0, %FunctionVar_66_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %747 = add(%746, %FunctionVar_66_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%747) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %748(%cutlass_217_i0, %cutlass_217_i1, %cutlass_217_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_220(%cutlass_220_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_220_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_220_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_220_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_220", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %751 = fn (%FunctionVar_31_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_31_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_31_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_31_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %749 = nn.conv2d(%FunctionVar_31_0, %FunctionVar_31_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %750 = add(%749, %FunctionVar_31_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%750, %FunctionVar_31_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %751(%cutlass_220_i0, %cutlass_220_i1, %cutlass_220_i2, %cutlass_220_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_224(%cutlass_224_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_224_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_224_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_224", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %755 = fn (%FunctionVar_99_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_99_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_99_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %752 = nn.conv2d(%FunctionVar_99_0, %FunctionVar_99_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %753 = add(%752, %FunctionVar_99_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %754 = sigmoid(%753) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%753, %754) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %755(%cutlass_224_i0, %cutlass_224_i1, %cutlass_224_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_227(%cutlass_227_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_227_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_227_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_227", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %759 = fn (%FunctionVar_97_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_97_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_97_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %756 = nn.conv2d(%FunctionVar_97_0, %FunctionVar_97_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %757 = add(%756, %FunctionVar_97_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %758 = sigmoid(%757) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%757, %758) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %759(%cutlass_227_i0, %cutlass_227_i1, %cutlass_227_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_230(%cutlass_230_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_230_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_230_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_230", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %762 = fn (%FunctionVar_64_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_64_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_64_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %760 = nn.conv2d(%FunctionVar_64_0, %FunctionVar_64_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %761 = add(%760, %FunctionVar_64_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%761) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %762(%cutlass_230_i0, %cutlass_230_i1, %cutlass_230_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_233(%cutlass_233_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_233_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_233_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_233_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_233", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %765 = fn (%FunctionVar_30_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_30_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_30_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_30_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %763 = nn.conv2d(%FunctionVar_30_0, %FunctionVar_30_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %764 = add(%763, %FunctionVar_30_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%764, %FunctionVar_30_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %765(%cutlass_233_i0, %cutlass_233_i1, %cutlass_233_i2, %cutlass_233_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_237(%cutlass_237_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_237_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_237_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_237", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %769 = fn (%FunctionVar_96_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_96_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_96_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %766 = nn.conv2d(%FunctionVar_96_0, %FunctionVar_96_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %767 = add(%766, %FunctionVar_96_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %768 = sigmoid(%767) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%767, %768) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %769(%cutlass_237_i0, %cutlass_237_i1, %cutlass_237_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_24(%cutlass_24_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_24_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_24_i2: Tensor[(1, 1, 1, 48), float16], %cutlass_24_i3: Tensor[(8, 56, 56, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_24", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %772 = fn (%FunctionVar_47_0: Tensor[(8, 56, 56, 192), float16], %FunctionVar_47_1: Tensor[(48, 1, 1, 192), float16], %FunctionVar_47_2: Tensor[(1, 1, 1, 48), float16], %FunctionVar_47_3: Tensor[(8, 56, 56, 48), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 56, 56, 48), float16] {
    %770 = nn.conv2d(%FunctionVar_47_0, %FunctionVar_47_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    %771 = add(%770, %FunctionVar_47_2) /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%771, %FunctionVar_47_3) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %772(%cutlass_24_i0, %cutlass_24_i1, %cutlass_24_i2, %cutlass_24_i3) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_240(%cutlass_240_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_240_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_240_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_240", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %776 = fn (%FunctionVar_94_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_94_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_94_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %773 = nn.conv2d(%FunctionVar_94_0, %FunctionVar_94_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %774 = add(%773, %FunctionVar_94_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %775 = sigmoid(%774) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%774, %775) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %776(%cutlass_240_i0, %cutlass_240_i1, %cutlass_240_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_243(%cutlass_243_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_243_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_243_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_243", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %779 = fn (%FunctionVar_62_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_62_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_62_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %777 = nn.conv2d(%FunctionVar_62_0, %FunctionVar_62_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %778 = add(%777, %FunctionVar_62_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%778) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %779(%cutlass_243_i0, %cutlass_243_i1, %cutlass_243_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_246(%cutlass_246_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_246_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_246_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_246_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_246", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %782 = fn (%FunctionVar_29_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_29_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_29_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_29_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %780 = nn.conv2d(%FunctionVar_29_0, %FunctionVar_29_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %781 = add(%780, %FunctionVar_29_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%781, %FunctionVar_29_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %782(%cutlass_246_i0, %cutlass_246_i1, %cutlass_246_i2, %cutlass_246_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_250(%cutlass_250_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_250_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_250_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_250", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %786 = fn (%FunctionVar_93_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_93_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_93_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %783 = nn.conv2d(%FunctionVar_93_0, %FunctionVar_93_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %784 = add(%783, %FunctionVar_93_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %785 = sigmoid(%784) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%784, %785) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %786(%cutlass_250_i0, %cutlass_250_i1, %cutlass_250_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_253(%cutlass_253_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_253_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_253_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_253", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %790 = fn (%FunctionVar_91_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_91_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_91_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %787 = nn.conv2d(%FunctionVar_91_0, %FunctionVar_91_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %788 = add(%787, %FunctionVar_91_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %789 = sigmoid(%788) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%788, %789) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %790(%cutlass_253_i0, %cutlass_253_i1, %cutlass_253_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_256(%cutlass_256_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_256_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_256_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_256", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %793 = fn (%FunctionVar_60_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_60_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_60_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %791 = nn.conv2d(%FunctionVar_60_0, %FunctionVar_60_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %792 = add(%791, %FunctionVar_60_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%792) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %793(%cutlass_256_i0, %cutlass_256_i1, %cutlass_256_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_259(%cutlass_259_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_259_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_259_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_259_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_259", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %796 = fn (%FunctionVar_28_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_28_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_28_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_28_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %794 = nn.conv2d(%FunctionVar_28_0, %FunctionVar_28_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %795 = add(%794, %FunctionVar_28_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%795, %FunctionVar_28_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %796(%cutlass_259_i0, %cutlass_259_i1, %cutlass_259_i2, %cutlass_259_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_263(%cutlass_263_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_263_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_263_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_263", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %800 = fn (%FunctionVar_90_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_90_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_90_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %797 = nn.conv2d(%FunctionVar_90_0, %FunctionVar_90_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %798 = add(%797, %FunctionVar_90_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %799 = sigmoid(%798) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%798, %799) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %800(%cutlass_263_i0, %cutlass_263_i1, %cutlass_263_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_266(%cutlass_266_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_266_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_266_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_266", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %804 = fn (%FunctionVar_88_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_88_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_88_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %801 = nn.conv2d(%FunctionVar_88_0, %FunctionVar_88_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %802 = add(%801, %FunctionVar_88_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %803 = sigmoid(%802) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%802, %803) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %804(%cutlass_266_i0, %cutlass_266_i1, %cutlass_266_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_269(%cutlass_269_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_269_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_269_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_269", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %807 = fn (%FunctionVar_58_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_58_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_58_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %805 = nn.conv2d(%FunctionVar_58_0, %FunctionVar_58_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %806 = add(%805, %FunctionVar_58_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%806) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %807(%cutlass_269_i0, %cutlass_269_i1, %cutlass_269_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_272(%cutlass_272_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_272_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_272_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_272_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_272", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %810 = fn (%FunctionVar_27_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_27_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_27_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_27_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %808 = nn.conv2d(%FunctionVar_27_0, %FunctionVar_27_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %809 = add(%808, %FunctionVar_27_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%809, %FunctionVar_27_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %810(%cutlass_272_i0, %cutlass_272_i1, %cutlass_272_i2, %cutlass_272_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_276(%cutlass_276_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_276_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_276_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_276", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %814 = fn (%FunctionVar_87_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_87_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_87_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %811 = nn.conv2d(%FunctionVar_87_0, %FunctionVar_87_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %812 = add(%811, %FunctionVar_87_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %813 = sigmoid(%812) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%812, %813) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %814(%cutlass_276_i0, %cutlass_276_i1, %cutlass_276_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_279(%cutlass_279_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_279_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_279_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_279", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %818 = fn (%FunctionVar_85_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_85_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_85_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %815 = nn.conv2d(%FunctionVar_85_0, %FunctionVar_85_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %816 = add(%815, %FunctionVar_85_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %817 = sigmoid(%816) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%816, %817) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %818(%cutlass_279_i0, %cutlass_279_i1, %cutlass_279_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_28(%cutlass_28_i0: Tensor[(8, 56, 56, 48), float16], %cutlass_28_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_28_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_28", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %822 = fn (%FunctionVar_140_0: Tensor[(8, 56, 56, 48), float16], %FunctionVar_140_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_140_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %819 = nn.conv2d(%FunctionVar_140_0, %FunctionVar_140_1, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %820 = add(%819, %FunctionVar_140_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %821 = sigmoid(%820) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%820, %821) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %822(%cutlass_28_i0, %cutlass_28_i1, %cutlass_28_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_282(%cutlass_282_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_282_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_282_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_282", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %825 = fn (%FunctionVar_56_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_56_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_56_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %823 = nn.conv2d(%FunctionVar_56_0, %FunctionVar_56_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %824 = add(%823, %FunctionVar_56_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%824) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %825(%cutlass_282_i0, %cutlass_282_i1, %cutlass_282_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_285(%cutlass_285_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_285_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_285_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_285_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_285", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %828 = fn (%FunctionVar_26_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_26_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_26_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_26_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %826 = nn.conv2d(%FunctionVar_26_0, %FunctionVar_26_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %827 = add(%826, %FunctionVar_26_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%827, %FunctionVar_26_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %828(%cutlass_285_i0, %cutlass_285_i1, %cutlass_285_i2, %cutlass_285_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_289(%cutlass_289_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_289_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_289_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_289", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %832 = fn (%FunctionVar_84_01: Tensor[(8, 14, 14, 176), float16], %FunctionVar_84_11: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_84_21: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %829 = nn.conv2d(%FunctionVar_84_01, %FunctionVar_84_11, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %830 = add(%829, %FunctionVar_84_21) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %831 = sigmoid(%830) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%830, %831) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %832(%cutlass_289_i0, %cutlass_289_i1, %cutlass_289_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_292(%cutlass_292_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_292_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_292_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_292", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %836 = fn (%FunctionVar_82_01: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_82_11: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_82_21: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %833 = nn.conv2d(%FunctionVar_82_01, %FunctionVar_82_11, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %834 = add(%833, %FunctionVar_82_21) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %835 = sigmoid(%834) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%834, %835) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %836(%cutlass_292_i0, %cutlass_292_i1, %cutlass_292_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_295(%cutlass_295_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_295_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_295_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_295", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %839 = fn (%FunctionVar_54_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_54_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_54_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %837 = nn.conv2d(%FunctionVar_54_0, %FunctionVar_54_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %838 = add(%837, %FunctionVar_54_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%838) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %839(%cutlass_295_i0, %cutlass_295_i1, %cutlass_295_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_298(%cutlass_298_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_298_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_298_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_298_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_298", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %842 = fn (%FunctionVar_25_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_25_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_25_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_25_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %840 = nn.conv2d(%FunctionVar_25_0, %FunctionVar_25_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %841 = add(%840, %FunctionVar_25_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%841, %FunctionVar_25_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %842(%cutlass_298_i0, %cutlass_298_i1, %cutlass_298_i2, %cutlass_298_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_3(%cutlass_3_i0: Tensor[(8, 112, 112, 24), float16], %cutlass_3_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_3_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_3", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %847 = fn (%FunctionVar_2_0: Tensor[(8, 112, 112, 24), float16], %FunctionVar_2_1: Tensor[(24, 3, 3, 24), float16], %FunctionVar_2_2: Tensor[(1, 1, 1, 24), float16], %FunctionVar_2_3: Tensor[(8, 112, 112, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_add_", Composite="cutlass.conv2d_bias_silu_residual_add") -> Tensor[(8, 112, 112, 24), float16] {
    %843 = nn.conv2d(%FunctionVar_2_3, %FunctionVar_2_1, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %844 = add(%843, %FunctionVar_2_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %845 = sigmoid(%844) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %846 = multiply(%844, %845) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    add(%846, %FunctionVar_2_3) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %847(%cutlass_3_i0, %cutlass_3_i1, %cutlass_3_i2, %cutlass_3_i0) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_302(%cutlass_302_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_302_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_302_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_302", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %851 = fn (%FunctionVar_81_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_81_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_81_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %848 = nn.conv2d(%FunctionVar_81_0, %FunctionVar_81_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %849 = add(%848, %FunctionVar_81_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %850 = sigmoid(%849) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%849, %850) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %851(%cutlass_302_i0, %cutlass_302_i1, %cutlass_302_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_305(%cutlass_305_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_305_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_305_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_305", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %855 = fn (%FunctionVar_79_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_79_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_79_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %852 = nn.conv2d(%FunctionVar_79_0, %FunctionVar_79_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %853 = add(%852, %FunctionVar_79_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %854 = sigmoid(%853) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%853, %854) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %855(%cutlass_305_i0, %cutlass_305_i1, %cutlass_305_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_308(%cutlass_308_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_308_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_308_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_308", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %858 = fn (%FunctionVar_52_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_52_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_52_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %856 = nn.conv2d(%FunctionVar_52_0, %FunctionVar_52_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %857 = add(%856, %FunctionVar_52_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%857) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %858(%cutlass_308_i0, %cutlass_308_i1, %cutlass_308_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_31(%cutlass_31_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_31_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_31_i2: Tensor[(1, 1, 1, 48), float16], %cutlass_31_i3: Tensor[(8, 56, 56, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_31", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %861 = fn (%FunctionVar_46_0: Tensor[(8, 56, 56, 192), float16], %FunctionVar_46_1: Tensor[(48, 1, 1, 192), float16], %FunctionVar_46_2: Tensor[(1, 1, 1, 48), float16], %FunctionVar_46_3: Tensor[(8, 56, 56, 48), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 56, 56, 48), float16] {
    %859 = nn.conv2d(%FunctionVar_46_0, %FunctionVar_46_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    %860 = add(%859, %FunctionVar_46_2) /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%860, %FunctionVar_46_3) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %861(%cutlass_31_i0, %cutlass_31_i1, %cutlass_31_i2, %cutlass_31_i3) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_311(%cutlass_311_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_311_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_311_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_311_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_311", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %864 = fn (%FunctionVar_24_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_24_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_24_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_24_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %862 = nn.conv2d(%FunctionVar_24_0, %FunctionVar_24_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %863 = add(%862, %FunctionVar_24_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%863, %FunctionVar_24_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %864(%cutlass_311_i0, %cutlass_311_i1, %cutlass_311_i2, %cutlass_311_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_315(%cutlass_315_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_315_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_315_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_315", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %868 = fn (%FunctionVar_78_01: Tensor[(8, 14, 14, 176), float16], %FunctionVar_78_11: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_78_21: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %865 = nn.conv2d(%FunctionVar_78_01, %FunctionVar_78_11, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %866 = add(%865, %FunctionVar_78_21) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %867 = sigmoid(%866) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%866, %867) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %868(%cutlass_315_i0, %cutlass_315_i1, %cutlass_315_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_318(%cutlass_318_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_318_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_318_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_318", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %872 = fn (%FunctionVar_76_01: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_76_11: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_76_21: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %869 = nn.conv2d(%FunctionVar_76_01, %FunctionVar_76_11, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %870 = add(%869, %FunctionVar_76_21) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %871 = sigmoid(%870) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%870, %871) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %872(%cutlass_318_i0, %cutlass_318_i1, %cutlass_318_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_321(%cutlass_321_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_321_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_321_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_321", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %875 = fn (%FunctionVar_50_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_50_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_50_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %873 = nn.conv2d(%FunctionVar_50_0, %FunctionVar_50_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %874 = add(%873, %FunctionVar_50_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%874) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %875(%cutlass_321_i0, %cutlass_321_i1, %cutlass_321_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_324(%cutlass_324_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_324_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_324_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_324_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_324", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %878 = fn (%FunctionVar_23_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_23_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_23_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_23_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %876 = nn.conv2d(%FunctionVar_23_0, %FunctionVar_23_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %877 = add(%876, %FunctionVar_23_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%877, %FunctionVar_23_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %878(%cutlass_324_i0, %cutlass_324_i1, %cutlass_324_i2, %cutlass_324_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_328(%cutlass_328_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_328_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_328_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_328", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %882 = fn (%FunctionVar_75_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_75_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_75_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %879 = nn.conv2d(%FunctionVar_75_0, %FunctionVar_75_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %880 = add(%879, %FunctionVar_75_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %881 = sigmoid(%880) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%880, %881) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %882(%cutlass_328_i0, %cutlass_328_i1, %cutlass_328_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_331(%cutlass_331_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_331_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_331_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_331", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %886 = fn (%FunctionVar_73_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_73_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_73_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %883 = nn.conv2d(%FunctionVar_73_0, %FunctionVar_73_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %884 = add(%883, %FunctionVar_73_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %885 = sigmoid(%884) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%884, %885) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %886(%cutlass_331_i0, %cutlass_331_i1, %cutlass_331_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_334(%cutlass_334_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_334_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_334_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_334", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %889 = fn (%FunctionVar_48_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_48_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_48_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %887 = nn.conv2d(%FunctionVar_48_0, %FunctionVar_48_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %888 = add(%887, %FunctionVar_48_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%888) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %889(%cutlass_334_i0, %cutlass_334_i1, %cutlass_334_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_337(%cutlass_337_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_337_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_337_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_337_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_337", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %892 = fn (%FunctionVar_22_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_22_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_22_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_22_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %890 = nn.conv2d(%FunctionVar_22_0, %FunctionVar_22_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %891 = add(%890, %FunctionVar_22_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%891, %FunctionVar_22_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %892(%cutlass_337_i0, %cutlass_337_i1, %cutlass_337_i2, %cutlass_337_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_341(%cutlass_341_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_341_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_341_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_341", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %896 = fn (%FunctionVar_72_01: Tensor[(8, 14, 14, 176), float16], %FunctionVar_72_11: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_72_21: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %893 = nn.conv2d(%FunctionVar_72_01, %FunctionVar_72_11, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %894 = add(%893, %FunctionVar_72_21) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %895 = sigmoid(%894) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%894, %895) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %896(%cutlass_341_i0, %cutlass_341_i1, %cutlass_341_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_344(%cutlass_344_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_344_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_344_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_344", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %900 = fn (%FunctionVar_70_01: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_70_11: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_70_21: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %897 = nn.conv2d(%FunctionVar_70_01, %FunctionVar_70_11, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %898 = add(%897, %FunctionVar_70_21) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %899 = sigmoid(%898) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%898, %899) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %900(%cutlass_344_i0, %cutlass_344_i1, %cutlass_344_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_347(%cutlass_347_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_347_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_347_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_347", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %903 = fn (%FunctionVar_46_01: Tensor[(8, 1, 1, 44), float16], %FunctionVar_46_11: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_46_21: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %901 = nn.conv2d(%FunctionVar_46_01, %FunctionVar_46_11, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %902 = add(%901, %FunctionVar_46_21) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%902) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %903(%cutlass_347_i0, %cutlass_347_i1, %cutlass_347_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_35(%cutlass_35_i0: Tensor[(8, 56, 56, 48), float16], %cutlass_35_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_35_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_35", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %907 = fn (%FunctionVar_139_0: Tensor[(8, 56, 56, 48), float16], %FunctionVar_139_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_139_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %904 = nn.conv2d(%FunctionVar_139_0, %FunctionVar_139_1, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %905 = add(%904, %FunctionVar_139_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %906 = sigmoid(%905) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%905, %906) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %907(%cutlass_35_i0, %cutlass_35_i1, %cutlass_35_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_350(%cutlass_350_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_350_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_350_i2: Tensor[(1, 1, 1, 176), float16], %cutlass_350_i3: Tensor[(8, 14, 14, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_350", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %910 = fn (%FunctionVar_21_0: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_21_1: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_21_2: Tensor[(1, 1, 1, 176), float16], %FunctionVar_21_3: Tensor[(8, 14, 14, 176), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 14, 14, 176), float16] {
    %908 = nn.conv2d(%FunctionVar_21_0, %FunctionVar_21_1, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    %909 = add(%908, %FunctionVar_21_2) /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%909, %FunctionVar_21_3) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %910(%cutlass_350_i0, %cutlass_350_i1, %cutlass_350_i2, %cutlass_350_i3) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_354(%cutlass_354_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_354_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_354_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_354", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %914 = fn (%FunctionVar_69_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_69_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_69_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %911 = nn.conv2d(%FunctionVar_69_0, %FunctionVar_69_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %912 = add(%911, %FunctionVar_69_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %913 = sigmoid(%912) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%912, %913) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %914(%cutlass_354_i0, %cutlass_354_i1, %cutlass_354_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_357(%cutlass_357_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_357_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_357_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_357", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %918 = fn (%FunctionVar_67_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_67_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_67_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %915 = nn.conv2d(%FunctionVar_67_0, %FunctionVar_67_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %916 = add(%915, %FunctionVar_67_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %917 = sigmoid(%916) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%916, %917) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %918(%cutlass_357_i0, %cutlass_357_i1, %cutlass_357_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_360(%cutlass_360_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_360_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_360_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_360", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %921 = fn (%FunctionVar_44_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_44_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_44_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %919 = nn.conv2d(%FunctionVar_44_0, %FunctionVar_44_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %920 = add(%919, %FunctionVar_44_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%920) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %921(%cutlass_360_i0, %cutlass_360_i1, %cutlass_360_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_363(%cutlass_363_i0: Tensor[(8, 7, 7, 1056), float16], %cutlass_363_i1: Tensor[(304, 1, 1, 1056), float16], %cutlass_363_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_363", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %923 = fn (%FunctionVar_23_01: Tensor[(8, 7, 7, 1056), float16], %FunctionVar_23_11: Tensor[(304, 1, 1, 1056), float16], %FunctionVar_23_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %922 = nn.conv2d(%FunctionVar_23_01, %FunctionVar_23_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%922, %FunctionVar_23_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %923(%cutlass_363_i0, %cutlass_363_i1, %cutlass_363_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_366(%cutlass_366_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_366_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_366_i2: Tensor[(1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_366", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %927 = fn (%FunctionVar_66_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_66_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_66_21: Tensor[(1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %924 = nn.conv2d(%FunctionVar_66_01, %FunctionVar_66_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %925 = add(%924, %FunctionVar_66_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %926 = sigmoid(%925) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%925, %926) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %927(%cutlass_366_i0, %cutlass_366_i1, %cutlass_366_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_369(%cutlass_369_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_369_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_369_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_369", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %931 = fn (%FunctionVar_64_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_64_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_64_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %928 = nn.conv2d(%FunctionVar_64_01, %FunctionVar_64_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %929 = add(%928, %FunctionVar_64_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %930 = sigmoid(%929) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%929, %930) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %931(%cutlass_369_i0, %cutlass_369_i1, %cutlass_369_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_372(%cutlass_372_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_372_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_372_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_372", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %934 = fn (%FunctionVar_42_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_42_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_42_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %932 = nn.conv2d(%FunctionVar_42_0, %FunctionVar_42_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %933 = add(%932, %FunctionVar_42_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%933) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %934(%cutlass_372_i0, %cutlass_372_i1, %cutlass_372_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_375(%cutlass_375_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_375_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_375_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_375_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_375", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %937 = fn (%FunctionVar_20_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_20_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_20_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_20_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %935 = nn.conv2d(%FunctionVar_20_0, %FunctionVar_20_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %936 = add(%935, %FunctionVar_20_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%936, %FunctionVar_20_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %937(%cutlass_375_i0, %cutlass_375_i1, %cutlass_375_i2, %cutlass_375_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_379(%cutlass_379_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_379_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_379_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_379", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %941 = fn (%FunctionVar_63_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_63_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_63_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %938 = nn.conv2d(%FunctionVar_63_0, %FunctionVar_63_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %939 = add(%938, %FunctionVar_63_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %940 = sigmoid(%939) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%939, %940) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %941(%cutlass_379_i0, %cutlass_379_i1, %cutlass_379_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_38(%cutlass_38_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_38_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_38_i2: Tensor[(1, 1, 1, 48), float16], %cutlass_38_i3: Tensor[(8, 56, 56, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_38", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %944 = fn (%FunctionVar_45_0: Tensor[(8, 56, 56, 192), float16], %FunctionVar_45_1: Tensor[(48, 1, 1, 192), float16], %FunctionVar_45_2: Tensor[(1, 1, 1, 48), float16], %FunctionVar_45_3: Tensor[(8, 56, 56, 48), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 56, 56, 48), float16] {
    %942 = nn.conv2d(%FunctionVar_45_0, %FunctionVar_45_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    %943 = add(%942, %FunctionVar_45_2) /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%943, %FunctionVar_45_3) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %944(%cutlass_38_i0, %cutlass_38_i1, %cutlass_38_i2, %cutlass_38_i3) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_382(%cutlass_382_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_382_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_382_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_382", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %948 = fn (%FunctionVar_61_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_61_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_61_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %945 = nn.conv2d(%FunctionVar_61_0, %FunctionVar_61_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %946 = add(%945, %FunctionVar_61_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %947 = sigmoid(%946) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%946, %947) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %948(%cutlass_382_i0, %cutlass_382_i1, %cutlass_382_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_385(%cutlass_385_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_385_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_385_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_385", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %951 = fn (%FunctionVar_40_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_40_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_40_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %949 = nn.conv2d(%FunctionVar_40_0, %FunctionVar_40_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %950 = add(%949, %FunctionVar_40_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%950) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %951(%cutlass_385_i0, %cutlass_385_i1, %cutlass_385_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_388(%cutlass_388_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_388_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_388_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_388_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_388", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %954 = fn (%FunctionVar_19_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_19_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_19_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_19_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %952 = nn.conv2d(%FunctionVar_19_0, %FunctionVar_19_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %953 = add(%952, %FunctionVar_19_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%953, %FunctionVar_19_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %954(%cutlass_388_i0, %cutlass_388_i1, %cutlass_388_i2, %cutlass_388_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_392(%cutlass_392_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_392_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_392_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_392", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %958 = fn (%FunctionVar_60_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_60_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_60_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %955 = nn.conv2d(%FunctionVar_60_01, %FunctionVar_60_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %956 = add(%955, %FunctionVar_60_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %957 = sigmoid(%956) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%956, %957) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %958(%cutlass_392_i0, %cutlass_392_i1, %cutlass_392_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_395(%cutlass_395_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_395_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_395_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_395", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %962 = fn (%FunctionVar_58_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_58_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_58_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %959 = nn.conv2d(%FunctionVar_58_01, %FunctionVar_58_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %960 = add(%959, %FunctionVar_58_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %961 = sigmoid(%960) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%960, %961) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %962(%cutlass_395_i0, %cutlass_395_i1, %cutlass_395_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_398(%cutlass_398_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_398_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_398_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_398", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %965 = fn (%FunctionVar_38_02: Tensor[(8, 1, 1, 76), float16], %FunctionVar_38_12: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_38_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %963 = nn.conv2d(%FunctionVar_38_02, %FunctionVar_38_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %964 = add(%963, %FunctionVar_38_22) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%964) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %965(%cutlass_398_i0, %cutlass_398_i1, %cutlass_398_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_401(%cutlass_401_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_401_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_401_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_401_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_401", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %968 = fn (%FunctionVar_18_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_18_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_18_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_18_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %966 = nn.conv2d(%FunctionVar_18_0, %FunctionVar_18_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %967 = add(%966, %FunctionVar_18_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%967, %FunctionVar_18_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %968(%cutlass_401_i0, %cutlass_401_i1, %cutlass_401_i2, %cutlass_401_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_405(%cutlass_405_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_405_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_405_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_405", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %972 = fn (%FunctionVar_57_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_57_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_57_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %969 = nn.conv2d(%FunctionVar_57_0, %FunctionVar_57_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %970 = add(%969, %FunctionVar_57_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %971 = sigmoid(%970) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%970, %971) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %972(%cutlass_405_i0, %cutlass_405_i1, %cutlass_405_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_408(%cutlass_408_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_408_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_408_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_408", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %976 = fn (%FunctionVar_55_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_55_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_55_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %973 = nn.conv2d(%FunctionVar_55_0, %FunctionVar_55_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %974 = add(%973, %FunctionVar_55_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %975 = sigmoid(%974) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%974, %975) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %976(%cutlass_408_i0, %cutlass_408_i1, %cutlass_408_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_411(%cutlass_411_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_411_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_411_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_411", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %979 = fn (%FunctionVar_36_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_36_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_36_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %977 = nn.conv2d(%FunctionVar_36_01, %FunctionVar_36_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %978 = add(%977, %FunctionVar_36_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%978) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %979(%cutlass_411_i0, %cutlass_411_i1, %cutlass_411_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_414(%cutlass_414_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_414_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_414_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_414_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_414", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %982 = fn (%FunctionVar_17_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_17_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_17_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_17_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %980 = nn.conv2d(%FunctionVar_17_0, %FunctionVar_17_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %981 = add(%980, %FunctionVar_17_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%981, %FunctionVar_17_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %982(%cutlass_414_i0, %cutlass_414_i1, %cutlass_414_i2, %cutlass_414_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_418(%cutlass_418_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_418_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_418_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_418", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %986 = fn (%FunctionVar_54_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_54_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_54_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %983 = nn.conv2d(%FunctionVar_54_01, %FunctionVar_54_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %984 = add(%983, %FunctionVar_54_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %985 = sigmoid(%984) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%984, %985) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %986(%cutlass_418_i0, %cutlass_418_i1, %cutlass_418_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_42(%cutlass_42_i0: Tensor[(8, 56, 56, 48), float16], %cutlass_42_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_42_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_42", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %990 = fn (%FunctionVar_138_0: Tensor[(8, 56, 56, 48), float16], %FunctionVar_138_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_138_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %987 = nn.conv2d(%FunctionVar_138_0, %FunctionVar_138_1, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %988 = add(%987, %FunctionVar_138_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %989 = sigmoid(%988) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%988, %989) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %990(%cutlass_42_i0, %cutlass_42_i1, %cutlass_42_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_421(%cutlass_421_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_421_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_421_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_421", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %994 = fn (%FunctionVar_52_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_52_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_52_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %991 = nn.conv2d(%FunctionVar_52_01, %FunctionVar_52_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %992 = add(%991, %FunctionVar_52_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %993 = sigmoid(%992) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%992, %993) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %994(%cutlass_421_i0, %cutlass_421_i1, %cutlass_421_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_424(%cutlass_424_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_424_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_424_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_424", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %997 = fn (%FunctionVar_34_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_34_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_34_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %995 = nn.conv2d(%FunctionVar_34_01, %FunctionVar_34_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %996 = add(%995, %FunctionVar_34_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%996) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %997(%cutlass_424_i0, %cutlass_424_i1, %cutlass_424_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_427(%cutlass_427_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_427_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_427_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_427_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_427", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1000 = fn (%FunctionVar_16_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_16_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_16_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_16_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %998 = nn.conv2d(%FunctionVar_16_0, %FunctionVar_16_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %999 = add(%998, %FunctionVar_16_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%999, %FunctionVar_16_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1000(%cutlass_427_i0, %cutlass_427_i1, %cutlass_427_i2, %cutlass_427_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_431(%cutlass_431_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_431_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_431_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_431", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1004 = fn (%FunctionVar_51_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_51_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_51_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1001 = nn.conv2d(%FunctionVar_51_0, %FunctionVar_51_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1002 = add(%1001, %FunctionVar_51_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1003 = sigmoid(%1002) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1002, %1003) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1004(%cutlass_431_i0, %cutlass_431_i1, %cutlass_431_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_434(%cutlass_434_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_434_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_434_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_434", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1008 = fn (%FunctionVar_49_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_49_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_49_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1005 = nn.conv2d(%FunctionVar_49_01, %FunctionVar_49_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1006 = add(%1005, %FunctionVar_49_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1007 = sigmoid(%1006) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1006, %1007) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1008(%cutlass_434_i0, %cutlass_434_i1, %cutlass_434_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_437(%cutlass_437_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_437_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_437_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_437", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1011 = fn (%FunctionVar_32_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_32_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_32_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1009 = nn.conv2d(%FunctionVar_32_01, %FunctionVar_32_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1010 = add(%1009, %FunctionVar_32_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1010) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1011(%cutlass_437_i0, %cutlass_437_i1, %cutlass_437_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_440(%cutlass_440_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_440_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_440_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_440_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_440", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1014 = fn (%FunctionVar_15_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_15_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_15_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_15_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1012 = nn.conv2d(%FunctionVar_15_0, %FunctionVar_15_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1013 = add(%1012, %FunctionVar_15_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1013, %FunctionVar_15_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1014(%cutlass_440_i0, %cutlass_440_i1, %cutlass_440_i2, %cutlass_440_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_444(%cutlass_444_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_444_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_444_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_444", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1018 = fn (%FunctionVar_48_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_48_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_48_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1015 = nn.conv2d(%FunctionVar_48_01, %FunctionVar_48_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1016 = add(%1015, %FunctionVar_48_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1017 = sigmoid(%1016) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1016, %1017) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1018(%cutlass_444_i0, %cutlass_444_i1, %cutlass_444_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_447(%cutlass_447_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_447_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_447_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_447", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1022 = fn (%FunctionVar_46_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_46_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_46_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1019 = nn.conv2d(%FunctionVar_46_02, %FunctionVar_46_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1020 = add(%1019, %FunctionVar_46_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1021 = sigmoid(%1020) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1020, %1021) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1022(%cutlass_447_i0, %cutlass_447_i1, %cutlass_447_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_45(%cutlass_45_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_45_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_45_i2: Tensor[(1, 1, 1, 48), float16], %cutlass_45_i3: Tensor[(8, 56, 56, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_45", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %1025 = fn (%FunctionVar_44_01: Tensor[(8, 56, 56, 192), float16], %FunctionVar_44_11: Tensor[(48, 1, 1, 192), float16], %FunctionVar_44_21: Tensor[(1, 1, 1, 48), float16], %FunctionVar_44_3: Tensor[(8, 56, 56, 48), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 56, 56, 48), float16] {
    %1023 = nn.conv2d(%FunctionVar_44_01, %FunctionVar_44_11, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    %1024 = add(%1023, %FunctionVar_44_21) /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%1024, %FunctionVar_44_3) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %1025(%cutlass_45_i0, %cutlass_45_i1, %cutlass_45_i2, %cutlass_45_i3) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_450(%cutlass_450_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_450_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_450_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_450", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1028 = fn (%FunctionVar_30_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_30_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_30_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1026 = nn.conv2d(%FunctionVar_30_01, %FunctionVar_30_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1027 = add(%1026, %FunctionVar_30_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1027) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1028(%cutlass_450_i0, %cutlass_450_i1, %cutlass_450_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_453(%cutlass_453_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_453_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_453_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_453_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_453", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1031 = fn (%FunctionVar_14_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_14_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_14_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_14_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1029 = nn.conv2d(%FunctionVar_14_0, %FunctionVar_14_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1030 = add(%1029, %FunctionVar_14_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1030, %FunctionVar_14_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1031(%cutlass_453_i0, %cutlass_453_i1, %cutlass_453_i2, %cutlass_453_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_457(%cutlass_457_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_457_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_457_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_457", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1035 = fn (%FunctionVar_45_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_45_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_45_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1032 = nn.conv2d(%FunctionVar_45_01, %FunctionVar_45_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1033 = add(%1032, %FunctionVar_45_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1034 = sigmoid(%1033) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1033, %1034) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1035(%cutlass_457_i0, %cutlass_457_i1, %cutlass_457_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_460(%cutlass_460_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_460_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_460_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_460", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1039 = fn (%FunctionVar_43_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_43_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_43_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1036 = nn.conv2d(%FunctionVar_43_0, %FunctionVar_43_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1037 = add(%1036, %FunctionVar_43_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1038 = sigmoid(%1037) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1037, %1038) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1039(%cutlass_460_i0, %cutlass_460_i1, %cutlass_460_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_463(%cutlass_463_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_463_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_463_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_463", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1042 = fn (%FunctionVar_28_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_28_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_28_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1040 = nn.conv2d(%FunctionVar_28_01, %FunctionVar_28_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1041 = add(%1040, %FunctionVar_28_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1041) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1042(%cutlass_463_i0, %cutlass_463_i1, %cutlass_463_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_466(%cutlass_466_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_466_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_466_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_466_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_466", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1045 = fn (%FunctionVar_13_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_13_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_13_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_13_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1043 = nn.conv2d(%FunctionVar_13_0, %FunctionVar_13_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1044 = add(%1043, %FunctionVar_13_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1044, %FunctionVar_13_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1045(%cutlass_466_i0, %cutlass_466_i1, %cutlass_466_i2, %cutlass_466_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_470(%cutlass_470_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_470_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_470_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_470", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1049 = fn (%FunctionVar_42_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_42_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_42_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1046 = nn.conv2d(%FunctionVar_42_01, %FunctionVar_42_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1047 = add(%1046, %FunctionVar_42_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1048 = sigmoid(%1047) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1047, %1048) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1049(%cutlass_470_i0, %cutlass_470_i1, %cutlass_470_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_473(%cutlass_473_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_473_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_473_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_473", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1053 = fn (%FunctionVar_40_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_40_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_40_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1050 = nn.conv2d(%FunctionVar_40_01, %FunctionVar_40_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1051 = add(%1050, %FunctionVar_40_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1052 = sigmoid(%1051) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1051, %1052) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1053(%cutlass_473_i0, %cutlass_473_i1, %cutlass_473_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_476(%cutlass_476_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_476_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_476_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_476", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1056 = fn (%FunctionVar_26_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_26_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_26_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1054 = nn.conv2d(%FunctionVar_26_01, %FunctionVar_26_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1055 = add(%1054, %FunctionVar_26_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1055) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1056(%cutlass_476_i0, %cutlass_476_i1, %cutlass_476_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_479(%cutlass_479_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_479_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_479_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_479_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_479", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1059 = fn (%FunctionVar_12_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_12_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_12_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_12_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1057 = nn.conv2d(%FunctionVar_12_0, %FunctionVar_12_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1058 = add(%1057, %FunctionVar_12_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1058, %FunctionVar_12_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1059(%cutlass_479_i0, %cutlass_479_i1, %cutlass_479_i2, %cutlass_479_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_483(%cutlass_483_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_483_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_483_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_483", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1063 = fn (%FunctionVar_39_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_39_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_39_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1060 = nn.conv2d(%FunctionVar_39_01, %FunctionVar_39_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1061 = add(%1060, %FunctionVar_39_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1062 = sigmoid(%1061) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1061, %1062) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1063(%cutlass_483_i0, %cutlass_483_i1, %cutlass_483_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_486(%cutlass_486_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_486_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_486_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_486", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1067 = fn (%FunctionVar_37_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_37_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_37_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1064 = nn.conv2d(%FunctionVar_37_01, %FunctionVar_37_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1065 = add(%1064, %FunctionVar_37_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1066 = sigmoid(%1065) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1065, %1066) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1067(%cutlass_486_i0, %cutlass_486_i1, %cutlass_486_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_489(%cutlass_489_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_489_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_489_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_489", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1070 = fn (%FunctionVar_24_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_24_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_24_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1068 = nn.conv2d(%FunctionVar_24_01, %FunctionVar_24_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1069 = add(%1068, %FunctionVar_24_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1069) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1070(%cutlass_489_i0, %cutlass_489_i1, %cutlass_489_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_49(%cutlass_49_i0: Tensor[(8, 56, 56, 48), float16], %cutlass_49_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_49_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_49", Primitive=1) -> Tensor[(8, 28, 28, 192), float16] {
  %1074 = fn (%FunctionVar_137_0: Tensor[(8, 56, 56, 48), float16], %FunctionVar_137_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_137_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 192), float16] {
    %1071 = nn.conv2d(%FunctionVar_137_0, %FunctionVar_137_1, strides=[2, 2], padding=[0, 0, 1, 1], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 192), float16] */;
    %1072 = add(%1071, %FunctionVar_137_2) /* ty=Tensor[(8, 28, 28, 192), float16] */;
    %1073 = sigmoid(%1072) /* ty=Tensor[(8, 28, 28, 192), float16] */;
    multiply(%1072, %1073) /* ty=Tensor[(8, 28, 28, 192), float16] */
  };
  %1074(%cutlass_49_i0, %cutlass_49_i1, %cutlass_49_i2) /* ty=Tensor[(8, 28, 28, 192), float16] */
}

def @tvmgen_default_cutlass_main_492(%cutlass_492_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_492_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_492_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_492_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_492", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1077 = fn (%FunctionVar_11_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_11_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_11_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_11_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1075 = nn.conv2d(%FunctionVar_11_0, %FunctionVar_11_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1076 = add(%1075, %FunctionVar_11_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1076, %FunctionVar_11_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1077(%cutlass_492_i0, %cutlass_492_i1, %cutlass_492_i2, %cutlass_492_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_496(%cutlass_496_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_496_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_496_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_496", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1081 = fn (%FunctionVar_36_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_36_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_36_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1078 = nn.conv2d(%FunctionVar_36_02, %FunctionVar_36_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1079 = add(%1078, %FunctionVar_36_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1080 = sigmoid(%1079) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1079, %1080) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1081(%cutlass_496_i0, %cutlass_496_i1, %cutlass_496_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_499(%cutlass_499_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_499_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_499_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_499", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1085 = fn (%FunctionVar_34_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_34_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_34_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1082 = nn.conv2d(%FunctionVar_34_02, %FunctionVar_34_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1083 = add(%1082, %FunctionVar_34_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1084 = sigmoid(%1083) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1083, %1084) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1085(%cutlass_499_i0, %cutlass_499_i1, %cutlass_499_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_502(%cutlass_502_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_502_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_502_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_502", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1088 = fn (%FunctionVar_22_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_22_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_22_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1086 = nn.conv2d(%FunctionVar_22_01, %FunctionVar_22_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1087 = add(%1086, %FunctionVar_22_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1087) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1088(%cutlass_502_i0, %cutlass_502_i1, %cutlass_502_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_505(%cutlass_505_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_505_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_505_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_505_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_505", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1091 = fn (%FunctionVar_10_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_10_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_10_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_10_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1089 = nn.conv2d(%FunctionVar_10_0, %FunctionVar_10_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1090 = add(%1089, %FunctionVar_10_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1090, %FunctionVar_10_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1091(%cutlass_505_i0, %cutlass_505_i1, %cutlass_505_i2, %cutlass_505_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_509(%cutlass_509_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_509_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_509_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_509", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1095 = fn (%FunctionVar_33_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_33_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_33_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1092 = nn.conv2d(%FunctionVar_33_01, %FunctionVar_33_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1093 = add(%1092, %FunctionVar_33_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1094 = sigmoid(%1093) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1093, %1094) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1095(%cutlass_509_i0, %cutlass_509_i1, %cutlass_509_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_512(%cutlass_512_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_512_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_512_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_512", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1099 = fn (%FunctionVar_31_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_31_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_31_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1096 = nn.conv2d(%FunctionVar_31_01, %FunctionVar_31_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1097 = add(%1096, %FunctionVar_31_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1098 = sigmoid(%1097) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1097, %1098) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1099(%cutlass_512_i0, %cutlass_512_i1, %cutlass_512_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_515(%cutlass_515_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_515_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_515_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_515", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1102 = fn (%FunctionVar_20_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_20_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_20_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1100 = nn.conv2d(%FunctionVar_20_01, %FunctionVar_20_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1101 = add(%1100, %FunctionVar_20_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1101) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1102(%cutlass_515_i0, %cutlass_515_i1, %cutlass_515_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_518(%cutlass_518_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_518_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_518_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_518_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_518", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1105 = fn (%FunctionVar_9_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_9_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_9_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_9_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1103 = nn.conv2d(%FunctionVar_9_0, %FunctionVar_9_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1104 = add(%1103, %FunctionVar_9_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1104, %FunctionVar_9_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1105(%cutlass_518_i0, %cutlass_518_i1, %cutlass_518_i2, %cutlass_518_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_52(%cutlass_52_i0: Tensor[(8, 28, 28, 192), float16], %cutlass_52_i1: Tensor[(80, 1, 1, 192), float16], %cutlass_52_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_52", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1107 = fn (%FunctionVar_48_02: Tensor[(8, 28, 28, 192), float16], %FunctionVar_48_12: Tensor[(80, 1, 1, 192), float16], %FunctionVar_48_22: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1106 = nn.conv2d(%FunctionVar_48_02, %FunctionVar_48_12, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1106, %FunctionVar_48_22) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1107(%cutlass_52_i0, %cutlass_52_i1, %cutlass_52_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_522(%cutlass_522_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_522_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_522_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_522", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1111 = fn (%FunctionVar_30_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_30_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_30_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1108 = nn.conv2d(%FunctionVar_30_02, %FunctionVar_30_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1109 = add(%1108, %FunctionVar_30_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1110 = sigmoid(%1109) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1109, %1110) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1111(%cutlass_522_i0, %cutlass_522_i1, %cutlass_522_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_525(%cutlass_525_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_525_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_525_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_525", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1115 = fn (%FunctionVar_28_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_28_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_28_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1112 = nn.conv2d(%FunctionVar_28_02, %FunctionVar_28_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1113 = add(%1112, %FunctionVar_28_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1114 = sigmoid(%1113) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1113, %1114) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1115(%cutlass_525_i0, %cutlass_525_i1, %cutlass_525_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_528(%cutlass_528_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_528_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_528_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_528", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1118 = fn (%FunctionVar_18_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_18_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_18_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1116 = nn.conv2d(%FunctionVar_18_01, %FunctionVar_18_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1117 = add(%1116, %FunctionVar_18_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1117) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1118(%cutlass_528_i0, %cutlass_528_i1, %cutlass_528_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_531(%cutlass_531_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_531_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_531_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_531_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_531", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1121 = fn (%FunctionVar_8_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_8_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_8_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_8_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1119 = nn.conv2d(%FunctionVar_8_0, %FunctionVar_8_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1120 = add(%1119, %FunctionVar_8_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1120, %FunctionVar_8_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1121(%cutlass_531_i0, %cutlass_531_i1, %cutlass_531_i2, %cutlass_531_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_535(%cutlass_535_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_535_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_535_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_535", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1125 = fn (%FunctionVar_27_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_27_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_27_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1122 = nn.conv2d(%FunctionVar_27_01, %FunctionVar_27_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1123 = add(%1122, %FunctionVar_27_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1124 = sigmoid(%1123) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1123, %1124) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1125(%cutlass_535_i0, %cutlass_535_i1, %cutlass_535_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_538(%cutlass_538_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_538_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_538_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_538", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1129 = fn (%FunctionVar_25_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_25_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_25_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1126 = nn.conv2d(%FunctionVar_25_01, %FunctionVar_25_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1127 = add(%1126, %FunctionVar_25_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1128 = sigmoid(%1127) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1127, %1128) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1129(%cutlass_538_i0, %cutlass_538_i1, %cutlass_538_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_541(%cutlass_541_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_541_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_541_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_541", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1132 = fn (%FunctionVar_16_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_16_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_16_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1130 = nn.conv2d(%FunctionVar_16_01, %FunctionVar_16_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1131 = add(%1130, %FunctionVar_16_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1131) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1132(%cutlass_541_i0, %cutlass_541_i1, %cutlass_541_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_544(%cutlass_544_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_544_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_544_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_544_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_544", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1135 = fn (%FunctionVar_7_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_7_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_7_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_7_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1133 = nn.conv2d(%FunctionVar_7_0, %FunctionVar_7_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1134 = add(%1133, %FunctionVar_7_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1134, %FunctionVar_7_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1135(%cutlass_544_i0, %cutlass_544_i1, %cutlass_544_i2, %cutlass_544_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_548(%cutlass_548_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_548_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_548_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_548", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1139 = fn (%FunctionVar_24_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_24_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_24_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1136 = nn.conv2d(%FunctionVar_24_02, %FunctionVar_24_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1137 = add(%1136, %FunctionVar_24_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1138 = sigmoid(%1137) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1137, %1138) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1139(%cutlass_548_i0, %cutlass_548_i1, %cutlass_548_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_55(%cutlass_55_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_55_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_55_i2: Tensor[(320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_55", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1143 = fn (%FunctionVar_136_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_136_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_136_2: Tensor[(320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1140 = nn.conv2d(%FunctionVar_136_0, %FunctionVar_136_1, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1141 = add(%1140, %FunctionVar_136_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1142 = sigmoid(%1141) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1141, %1142) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1143(%cutlass_55_i0, %cutlass_55_i1, %cutlass_55_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_551(%cutlass_551_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_551_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_551_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_551", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1147 = fn (%FunctionVar_22_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_22_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_22_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1144 = nn.conv2d(%FunctionVar_22_02, %FunctionVar_22_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1145 = add(%1144, %FunctionVar_22_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1146 = sigmoid(%1145) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1145, %1146) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1147(%cutlass_551_i0, %cutlass_551_i1, %cutlass_551_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_554(%cutlass_554_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_554_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_554_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_554", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1150 = fn (%FunctionVar_14_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_14_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_14_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1148 = nn.conv2d(%FunctionVar_14_01, %FunctionVar_14_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1149 = add(%1148, %FunctionVar_14_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1149) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1150(%cutlass_554_i0, %cutlass_554_i1, %cutlass_554_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_557(%cutlass_557_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_557_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_557_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_557_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_557", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1153 = fn (%FunctionVar_6_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_6_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_6_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_6_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1151 = nn.conv2d(%FunctionVar_6_0, %FunctionVar_6_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1152 = add(%1151, %FunctionVar_6_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1152, %FunctionVar_6_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1153(%cutlass_557_i0, %cutlass_557_i1, %cutlass_557_i2, %cutlass_557_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_561(%cutlass_561_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_561_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_561_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_561", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1157 = fn (%FunctionVar_21_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_21_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_21_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1154 = nn.conv2d(%FunctionVar_21_01, %FunctionVar_21_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1155 = add(%1154, %FunctionVar_21_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1156 = sigmoid(%1155) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1155, %1156) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1157(%cutlass_561_i0, %cutlass_561_i1, %cutlass_561_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_564(%cutlass_564_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_564_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_564_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_564", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1161 = fn (%FunctionVar_19_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_19_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_19_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1158 = nn.conv2d(%FunctionVar_19_01, %FunctionVar_19_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1159 = add(%1158, %FunctionVar_19_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1160 = sigmoid(%1159) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1159, %1160) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1161(%cutlass_564_i0, %cutlass_564_i1, %cutlass_564_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_567(%cutlass_567_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_567_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_567_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_567", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1164 = fn (%FunctionVar_12_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_12_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_12_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1162 = nn.conv2d(%FunctionVar_12_01, %FunctionVar_12_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1163 = add(%1162, %FunctionVar_12_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1163) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1164(%cutlass_567_i0, %cutlass_567_i1, %cutlass_567_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_570(%cutlass_570_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_570_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_570_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_570_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_570", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1167 = fn (%FunctionVar_5_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_5_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_5_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_5_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1165 = nn.conv2d(%FunctionVar_5_0, %FunctionVar_5_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1166 = add(%1165, %FunctionVar_5_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1166, %FunctionVar_5_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1167(%cutlass_570_i0, %cutlass_570_i1, %cutlass_570_i2, %cutlass_570_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_574(%cutlass_574_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_574_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_574_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_574", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1171 = fn (%FunctionVar_18_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_18_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_18_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1168 = nn.conv2d(%FunctionVar_18_02, %FunctionVar_18_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1169 = add(%1168, %FunctionVar_18_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1170 = sigmoid(%1169) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1169, %1170) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1171(%cutlass_574_i0, %cutlass_574_i1, %cutlass_574_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_577(%cutlass_577_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_577_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_577_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_577", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1175 = fn (%FunctionVar_16_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_16_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_16_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1172 = nn.conv2d(%FunctionVar_16_02, %FunctionVar_16_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1173 = add(%1172, %FunctionVar_16_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1174 = sigmoid(%1173) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1173, %1174) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1175(%cutlass_577_i0, %cutlass_577_i1, %cutlass_577_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_58(%cutlass_58_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_58_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_58_i2: Tensor[(1, 1, 1, 80), float16], %cutlass_58_i3: Tensor[(8, 28, 28, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_58", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1178 = fn (%FunctionVar_43_01: Tensor[(8, 28, 28, 320), float16], %FunctionVar_43_11: Tensor[(80, 1, 1, 320), float16], %FunctionVar_43_21: Tensor[(1, 1, 1, 80), float16], %FunctionVar_43_3: Tensor[(8, 28, 28, 80), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 28, 28, 80), float16] {
    %1176 = nn.conv2d(%FunctionVar_43_01, %FunctionVar_43_11, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    %1177 = add(%1176, %FunctionVar_43_21) /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1177, %FunctionVar_43_3) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1178(%cutlass_58_i0, %cutlass_58_i1, %cutlass_58_i2, %cutlass_58_i3) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_580(%cutlass_580_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_580_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_580_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_580", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1181 = fn (%FunctionVar_10_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_10_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_10_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1179 = nn.conv2d(%FunctionVar_10_01, %FunctionVar_10_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1180 = add(%1179, %FunctionVar_10_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1180) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1181(%cutlass_580_i0, %cutlass_580_i1, %cutlass_580_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_583(%cutlass_583_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_583_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_583_i2: Tensor[(1, 1, 1, 304), float16], %cutlass_583_i3: Tensor[(8, 7, 7, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_583", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1184 = fn (%FunctionVar_4_0: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_4_1: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_4_2: Tensor[(1, 1, 1, 304), float16], %FunctionVar_4_3: Tensor[(8, 7, 7, 304), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 304), float16] {
    %1182 = nn.conv2d(%FunctionVar_4_0, %FunctionVar_4_1, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    %1183 = add(%1182, %FunctionVar_4_2) /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1183, %FunctionVar_4_3) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1184(%cutlass_583_i0, %cutlass_583_i1, %cutlass_583_i2, %cutlass_583_i3) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_587(%cutlass_587_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_587_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_587_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_587", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1188 = fn (%FunctionVar_15_01: Tensor[(8, 7, 7, 304), float16], %FunctionVar_15_11: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_15_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1185 = nn.conv2d(%FunctionVar_15_01, %FunctionVar_15_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1186 = add(%1185, %FunctionVar_15_21) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1187 = sigmoid(%1186) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1186, %1187) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1188(%cutlass_587_i0, %cutlass_587_i1, %cutlass_587_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_590(%cutlass_590_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_590_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_590_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_590", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1192 = fn (%FunctionVar_13_01: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_13_11: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_13_21: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1189 = nn.conv2d(%FunctionVar_13_01, %FunctionVar_13_11, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1190 = add(%1189, %FunctionVar_13_21) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1191 = sigmoid(%1190) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1190, %1191) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1192(%cutlass_590_i0, %cutlass_590_i1, %cutlass_590_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_593(%cutlass_593_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_593_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_593_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_593", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1195 = fn (%FunctionVar_8_01: Tensor[(8, 1, 1, 76), float16], %FunctionVar_8_11: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_8_21: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1193 = nn.conv2d(%FunctionVar_8_01, %FunctionVar_8_11, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1194 = add(%1193, %FunctionVar_8_21) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1194) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1195(%cutlass_593_i0, %cutlass_593_i1, %cutlass_593_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_596(%cutlass_596_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_596_i1: Tensor[(512, 1, 1, 1824), float16], %cutlass_596_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_596", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1197 = fn (%FunctionVar_4_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_4_11: Tensor[(512, 1, 1, 1824), float16], %FunctionVar_4_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1196 = nn.conv2d(%FunctionVar_4_01, %FunctionVar_4_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1196, %FunctionVar_4_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1197(%cutlass_596_i0, %cutlass_596_i1, %cutlass_596_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_599(%cutlass_599_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_599_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_599_i2: Tensor[(3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_599", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1201 = fn (%FunctionVar_12_02: Tensor[(8, 7, 7, 512), float16], %FunctionVar_12_12: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_12_22: Tensor[(3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1198 = nn.conv2d(%FunctionVar_12_02, %FunctionVar_12_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1199 = add(%1198, %FunctionVar_12_22) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1200 = sigmoid(%1199) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1199, %1200) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1201(%cutlass_599_i0, %cutlass_599_i1, %cutlass_599_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_602(%cutlass_602_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_602_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_602_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_602", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1205 = fn (%FunctionVar_10_02: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_10_12: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_10_22: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1202 = nn.conv2d(%FunctionVar_10_02, %FunctionVar_10_12, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1203 = add(%1202, %FunctionVar_10_22) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1204 = sigmoid(%1203) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1203, %1204) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1205(%cutlass_602_i0, %cutlass_602_i1, %cutlass_602_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_605(%cutlass_605_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_605_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_605_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_605", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1208 = fn (%FunctionVar_6_01: Tensor[(8, 1, 1, 128), float16], %FunctionVar_6_11: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_6_21: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1206 = nn.conv2d(%FunctionVar_6_01, %FunctionVar_6_11, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1207 = add(%1206, %FunctionVar_6_21) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1207) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1208(%cutlass_605_i0, %cutlass_605_i1, %cutlass_605_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_608(%cutlass_608_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_608_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_608_i2: Tensor[(1, 1, 1, 512), float16], %cutlass_608_i3: Tensor[(8, 7, 7, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_608", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1211 = fn (%FunctionVar_3_0: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_3_1: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_3_2: Tensor[(1, 1, 1, 512), float16], %FunctionVar_3_3: Tensor[(8, 7, 7, 512), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 512), float16] {
    %1209 = nn.conv2d(%FunctionVar_3_0, %FunctionVar_3_1, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    %1210 = add(%1209, %FunctionVar_3_2) /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1210, %FunctionVar_3_3) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1211(%cutlass_608_i0, %cutlass_608_i1, %cutlass_608_i2, %cutlass_608_i3) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_612(%cutlass_612_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_612_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_612_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_612", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1215 = fn (%FunctionVar_9_01: Tensor[(8, 7, 7, 512), float16], %FunctionVar_9_11: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_9_21: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1212 = nn.conv2d(%FunctionVar_9_01, %FunctionVar_9_11, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1213 = add(%1212, %FunctionVar_9_21) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1214 = sigmoid(%1213) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1213, %1214) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1215(%cutlass_612_i0, %cutlass_612_i1, %cutlass_612_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_615(%cutlass_615_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_615_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_615_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_615", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1219 = fn (%FunctionVar_7_01: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_7_11: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_7_21: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1216 = nn.conv2d(%FunctionVar_7_01, %FunctionVar_7_11, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1217 = add(%1216, %FunctionVar_7_21) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1218 = sigmoid(%1217) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1217, %1218) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1219(%cutlass_615_i0, %cutlass_615_i1, %cutlass_615_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_618(%cutlass_618_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_618_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_618_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_618", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1222 = fn (%FunctionVar_4_02: Tensor[(8, 1, 1, 128), float16], %FunctionVar_4_12: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_4_22: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1220 = nn.conv2d(%FunctionVar_4_02, %FunctionVar_4_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1221 = add(%1220, %FunctionVar_4_22) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1221) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1222(%cutlass_618_i0, %cutlass_618_i1, %cutlass_618_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_62(%cutlass_62_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_62_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_62_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_62", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1226 = fn (%FunctionVar_135_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_135_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_135_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1223 = nn.conv2d(%FunctionVar_135_0, %FunctionVar_135_1, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1224 = add(%1223, %FunctionVar_135_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1225 = sigmoid(%1224) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1224, %1225) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1226(%cutlass_62_i0, %cutlass_62_i1, %cutlass_62_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_621(%cutlass_621_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_621_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_621_i2: Tensor[(1, 1, 1, 512), float16], %cutlass_621_i3: Tensor[(8, 7, 7, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_621", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1229 = fn (%FunctionVar_2_01: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_2_11: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_2_21: Tensor[(1, 1, 1, 512), float16], %FunctionVar_2_31: Tensor[(8, 7, 7, 512), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 512), float16] {
    %1227 = nn.conv2d(%FunctionVar_2_01, %FunctionVar_2_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    %1228 = add(%1227, %FunctionVar_2_21) /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1228, %FunctionVar_2_31) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1229(%cutlass_621_i0, %cutlass_621_i1, %cutlass_621_i2, %cutlass_621_i3) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_625(%cutlass_625_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_625_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_625_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_625", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1233 = fn (%FunctionVar_6_02: Tensor[(8, 7, 7, 512), float16], %FunctionVar_6_12: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_6_22: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1230 = nn.conv2d(%FunctionVar_6_02, %FunctionVar_6_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1231 = add(%1230, %FunctionVar_6_22) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1232 = sigmoid(%1231) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1231, %1232) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1233(%cutlass_625_i0, %cutlass_625_i1, %cutlass_625_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_628(%cutlass_628_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_628_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_628_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_628", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1237 = fn (%FunctionVar_4_03: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_4_13: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_4_23: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1234 = nn.conv2d(%FunctionVar_4_03, %FunctionVar_4_13, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1235 = add(%1234, %FunctionVar_4_23) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1236 = sigmoid(%1235) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1235, %1236) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1237(%cutlass_628_i0, %cutlass_628_i1, %cutlass_628_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_631(%cutlass_631_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_631_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_631_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_631", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1240 = fn (%FunctionVar_2_02: Tensor[(8, 1, 1, 128), float16], %FunctionVar_2_12: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_2_22: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1238 = nn.conv2d(%FunctionVar_2_02, %FunctionVar_2_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1239 = add(%1238, %FunctionVar_2_22) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1239) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1240(%cutlass_631_i0, %cutlass_631_i1, %cutlass_631_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_634(%cutlass_634_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_634_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_634_i2: Tensor[(1, 1, 1, 512), float16], %cutlass_634_i3: Tensor[(8, 7, 7, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_634", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1243 = fn (%FunctionVar_1_0: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_1_1: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_1_2: Tensor[(1, 1, 1, 512), float16], %FunctionVar_1_3: Tensor[(8, 7, 7, 512), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 512), float16] {
    %1241 = nn.conv2d(%FunctionVar_1_0, %FunctionVar_1_1, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    %1242 = add(%1241, %FunctionVar_1_2) /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1242, %FunctionVar_1_3) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1243(%cutlass_634_i0, %cutlass_634_i1, %cutlass_634_i2, %cutlass_634_i3) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_638(%cutlass_638_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_638_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_638_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_638", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1247 = fn (%FunctionVar_3_01: Tensor[(8, 7, 7, 512), float16], %FunctionVar_3_11: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_3_21: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1244 = nn.conv2d(%FunctionVar_3_01, %FunctionVar_3_11, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1245 = add(%1244, %FunctionVar_3_21) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1246 = sigmoid(%1245) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1245, %1246) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1247(%cutlass_638_i0, %cutlass_638_i1, %cutlass_638_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_641(%cutlass_641_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_641_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_641_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_641", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1251 = fn (%FunctionVar_1_01: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_1_11: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_1_21: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1248 = nn.conv2d(%FunctionVar_1_01, %FunctionVar_1_11, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1249 = add(%1248, %FunctionVar_1_21) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1250 = sigmoid(%1249) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1249, %1250) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1251(%cutlass_641_i0, %cutlass_641_i1, %cutlass_641_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_644(%cutlass_644_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_644_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_644_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_644", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1254 = fn (%FunctionVar_0_01: Tensor[(8, 1, 1, 128), float16], %FunctionVar_0_11: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_0_21: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1252 = nn.conv2d(%FunctionVar_0_01, %FunctionVar_0_11, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1253 = add(%1252, %FunctionVar_0_21) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1253) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1254(%cutlass_644_i0, %cutlass_644_i1, %cutlass_644_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_647(%cutlass_647_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_647_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_647_i2: Tensor[(1, 1, 1, 512), float16], %cutlass_647_i3: Tensor[(8, 7, 7, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_647", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1257 = fn (%FunctionVar_0_02: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_0_12: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_0_22: Tensor[(1, 1, 1, 512), float16], %FunctionVar_0_31: Tensor[(8, 7, 7, 512), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 7, 7, 512), float16] {
    %1255 = nn.conv2d(%FunctionVar_0_02, %FunctionVar_0_12, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    %1256 = add(%1255, %FunctionVar_0_22) /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1256, %FunctionVar_0_31) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1257(%cutlass_647_i0, %cutlass_647_i1, %cutlass_647_i2, %cutlass_647_i3) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_65(%cutlass_65_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_65_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_65_i2: Tensor[(1, 1, 1, 80), float16], %cutlass_65_i3: Tensor[(8, 28, 28, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_65", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1260 = fn (%FunctionVar_42_02: Tensor[(8, 28, 28, 320), float16], %FunctionVar_42_12: Tensor[(80, 1, 1, 320), float16], %FunctionVar_42_22: Tensor[(1, 1, 1, 80), float16], %FunctionVar_42_3: Tensor[(8, 28, 28, 80), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 28, 28, 80), float16] {
    %1258 = nn.conv2d(%FunctionVar_42_02, %FunctionVar_42_12, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    %1259 = add(%1258, %FunctionVar_42_22) /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1259, %FunctionVar_42_3) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1260(%cutlass_65_i0, %cutlass_65_i1, %cutlass_65_i2, %cutlass_65_i3) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_651(%cutlass_651_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_651_i1: Tensor[(1280, 1, 1, 512), float16], %cutlass_651_i2: Tensor[(1, 1, 1, 1280), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_651", Primitive=1) -> Tensor[(8, 7, 7, 1280), float16] {
  %1264 = fn (%FunctionVar_0_03: Tensor[(8, 7, 7, 512), float16], %FunctionVar_0_13: Tensor[(1280, 1, 1, 512), float16], %FunctionVar_0_23: Tensor[(1, 1, 1, 1280), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1280), float16] {
    %1261 = nn.conv2d(%FunctionVar_0_03, %FunctionVar_0_13, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    %1262 = add(%1261, %FunctionVar_0_23) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    %1263 = sigmoid(%1262) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    multiply(%1262, %1263) /* ty=Tensor[(8, 7, 7, 1280), float16] */
  };
  %1264(%cutlass_651_i0, %cutlass_651_i1, %cutlass_651_i2) /* ty=Tensor[(8, 7, 7, 1280), float16] */
}

def @tvmgen_default_cutlass_main_654(%cutlass_654_i0: Tensor[(8, 1280), float16], %cutlass_654_i1: Tensor[(1000, 1280), float16], %cutlass_654_i2: Tensor[(1, 1000), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_654", Primitive=1) -> Tensor[(8, 1000), float16] {
  %1266 = fn (%FunctionVar_0_04: Tensor[(8, 1280), float16], %FunctionVar_0_14: Tensor[(1000, 1280), float16], %FunctionVar_0_24: Tensor[(1, 1000), float16], PartitionedFromPattern="nn.dense_add_", Composite="cutlass.dense_bias") -> Tensor[(8, 1000), float16] {
    %1265 = nn.dense(%FunctionVar_0_04, %FunctionVar_0_14, units=None, out_dtype="float16") /* ty=Tensor[(8, 1000), float16] */;
    add(%1265, %FunctionVar_0_24) /* ty=Tensor[(8, 1000), float16] */
  };
  %1266(%cutlass_654_i0, %cutlass_654_i1, %cutlass_654_i2) /* ty=Tensor[(8, 1000), float16] */
}

def @tvmgen_default_cutlass_main_69(%cutlass_69_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_69_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_69_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_69", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1270 = fn (%FunctionVar_134_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_134_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_134_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1267 = nn.conv2d(%FunctionVar_134_0, %FunctionVar_134_1, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1268 = add(%1267, %FunctionVar_134_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1269 = sigmoid(%1268) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1268, %1269) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1270(%cutlass_69_i0, %cutlass_69_i1, %cutlass_69_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_7(%cutlass_7_i0: Tensor[(8, 112, 112, 24), float16], %cutlass_7_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_7_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_7", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %1275 = fn (%FunctionVar_1_02: Tensor[(8, 112, 112, 24), float16], %FunctionVar_1_12: Tensor[(24, 3, 3, 24), float16], %FunctionVar_1_22: Tensor[(1, 1, 1, 24), float16], %FunctionVar_1_31: Tensor[(8, 112, 112, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_add_", Composite="cutlass.conv2d_bias_silu_residual_add") -> Tensor[(8, 112, 112, 24), float16] {
    %1271 = nn.conv2d(%FunctionVar_1_31, %FunctionVar_1_12, padding=[1, 1, 1, 1], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1272 = add(%1271, %FunctionVar_1_22) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1273 = sigmoid(%1272) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1274 = multiply(%1272, %1273) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    add(%1274, %FunctionVar_1_31) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %1275(%cutlass_7_i0, %cutlass_7_i1, %cutlass_7_i2, %cutlass_7_i0) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_72(%cutlass_72_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_72_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_72_i2: Tensor[(1, 1, 1, 80), float16], %cutlass_72_i3: Tensor[(8, 28, 28, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_72", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1278 = fn (%FunctionVar_41_0: Tensor[(8, 28, 28, 320), float16], %FunctionVar_41_1: Tensor[(80, 1, 1, 320), float16], %FunctionVar_41_2: Tensor[(1, 1, 1, 80), float16], %FunctionVar_41_3: Tensor[(8, 28, 28, 80), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 28, 28, 80), float16] {
    %1276 = nn.conv2d(%FunctionVar_41_0, %FunctionVar_41_1, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    %1277 = add(%1276, %FunctionVar_41_2) /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1277, %FunctionVar_41_3) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1278(%cutlass_72_i0, %cutlass_72_i1, %cutlass_72_i2, %cutlass_72_i3) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_76(%cutlass_76_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_76_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_76_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_76", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1282 = fn (%FunctionVar_133_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_133_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_133_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1279 = nn.conv2d(%FunctionVar_133_0, %FunctionVar_133_1, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1280 = add(%1279, %FunctionVar_133_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1281 = sigmoid(%1280) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1280, %1281) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1282(%cutlass_76_i0, %cutlass_76_i1, %cutlass_76_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_79(%cutlass_79_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_79_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_79_i2: Tensor[(1, 1, 1, 80), float16], %cutlass_79_i3: Tensor[(8, 28, 28, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_79", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1285 = fn (%FunctionVar_40_02: Tensor[(8, 28, 28, 320), float16], %FunctionVar_40_12: Tensor[(80, 1, 1, 320), float16], %FunctionVar_40_22: Tensor[(1, 1, 1, 80), float16], %FunctionVar_40_3: Tensor[(8, 28, 28, 80), float16], PartitionedFromPattern="nn.conv2d_add_add_", Composite="cutlass.conv2d_bias_residual_add") -> Tensor[(8, 28, 28, 80), float16] {
    %1283 = nn.conv2d(%FunctionVar_40_02, %FunctionVar_40_12, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    %1284 = add(%1283, %FunctionVar_40_22) /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1284, %FunctionVar_40_3) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1285(%cutlass_79_i0, %cutlass_79_i1, %cutlass_79_i2, %cutlass_79_i3) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_83(%cutlass_83_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_83_i1: Tensor[(320, 1, 1, 80), float16], %cutlass_83_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_83", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1289 = fn (%FunctionVar_132_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_132_1: Tensor[(320, 1, 1, 80), float16], %FunctionVar_132_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1286 = nn.conv2d(%FunctionVar_132_0, %FunctionVar_132_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1287 = add(%1286, %FunctionVar_132_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1288 = sigmoid(%1287) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1287, %1288) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1289(%cutlass_83_i0, %cutlass_83_i1, %cutlass_83_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_86(%cutlass_86_i0: Tensor[(8, 1, 1, 320), float16], %cutlass_86_i1: Tensor[(20, 1, 1, 320), float16], %cutlass_86_i2: Tensor[(1, 1, 1, 20), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_86", Primitive=1) -> Tensor[(8, 1, 1, 20), float16] {
  %1293 = fn (%FunctionVar_130_0: Tensor[(8, 1, 1, 320), float16], %FunctionVar_130_1: Tensor[(20, 1, 1, 320), float16], %FunctionVar_130_2: Tensor[(1, 1, 1, 20), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 20), float16] {
    %1290 = nn.conv2d(%FunctionVar_130_0, %FunctionVar_130_1, padding=[0, 0, 0, 0], channels=20, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 20), float16] */;
    %1291 = add(%1290, %FunctionVar_130_2) /* ty=Tensor[(8, 1, 1, 20), float16] */;
    %1292 = sigmoid(%1291) /* ty=Tensor[(8, 1, 1, 20), float16] */;
    multiply(%1291, %1292) /* ty=Tensor[(8, 1, 1, 20), float16] */
  };
  %1293(%cutlass_86_i0, %cutlass_86_i1, %cutlass_86_i2) /* ty=Tensor[(8, 1, 1, 20), float16] */
}

def @tvmgen_default_cutlass_main_89(%cutlass_89_i0: Tensor[(8, 1, 1, 20), float16], %cutlass_89_i1: Tensor[(320, 1, 1, 20), float16], %cutlass_89_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_89", Primitive=1) -> Tensor[(8, 1, 1, 320), float16] {
  %1296 = fn (%FunctionVar_86_0: Tensor[(8, 1, 1, 20), float16], %FunctionVar_86_1: Tensor[(320, 1, 1, 20), float16], %FunctionVar_86_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 320), float16] {
    %1294 = nn.conv2d(%FunctionVar_86_0, %FunctionVar_86_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 320), float16] */;
    %1295 = add(%1294, %FunctionVar_86_2) /* ty=Tensor[(8, 1, 1, 320), float16] */;
    sigmoid(%1295) /* ty=Tensor[(8, 1, 1, 320), float16] */
  };
  %1296(%cutlass_89_i0, %cutlass_89_i1, %cutlass_89_i2) /* ty=Tensor[(8, 1, 1, 320), float16] */
}

def @tvmgen_default_cutlass_main_92(%cutlass_92_i0: Tensor[(8, 14, 14, 320), float16], %cutlass_92_i1: Tensor[(160, 1, 1, 320), float16], %cutlass_92_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_92", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %1298 = fn (%FunctionVar_46_03: Tensor[(8, 14, 14, 320), float16], %FunctionVar_46_13: Tensor[(160, 1, 1, 320), float16], %FunctionVar_46_23: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %1297 = nn.conv2d(%FunctionVar_46_03, %FunctionVar_46_13, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%1297, %FunctionVar_46_23) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %1298(%cutlass_92_i0, %cutlass_92_i1, %cutlass_92_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_95(%cutlass_95_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_95_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_95_i2: Tensor[(640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_95", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %1302 = fn (%FunctionVar_129_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_129_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_129_2: Tensor[(640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %1299 = nn.conv2d(%FunctionVar_129_0, %FunctionVar_129_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1300 = add(%1299, %FunctionVar_129_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1301 = sigmoid(%1300) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%1300, %1301) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %1302(%cutlass_95_i0, %cutlass_95_i1, %cutlass_95_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_98(%cutlass_98_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_98_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_98_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_98", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %1306 = fn (%FunctionVar_127_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_127_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_127_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %1303 = nn.conv2d(%FunctionVar_127_0, %FunctionVar_127_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1304 = add(%1303, %FunctionVar_127_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1305 = sigmoid(%1304) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%1304, %1305) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %1306(%cutlass_98_i0, %cutlass_98_i1, %cutlass_98_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}


[-7.5586e-01  3.9795e-02 -4.6240e-01 -9.3457e-01 -3.7695e-01 -2.7441e-01
 -4.9683e-01  2.6392e-01  6.9189e-01  3.2300e-01 -1.1475e-01 -5.1270e-01
 -4.8828e-01  2.8259e-02 -3.6353e-01  2.4390e-01 -1.0327e-01  3.9746e-01
 -1.8713e-01  3.8257e-01  1.5625e+00 -7.3242e-04 -5.1953e-01 -4.7534e-01
  1.5088e-01  1.0742e-02 -7.7979e-01 -6.5967e-01 -1.9946e-01 -1.3535e+00
  1.7676e-01 -5.5615e-01  4.3359e-01 -1.2275e+00  1.7212e-01  3.8452e-01
  5.3906e-01 -3.1201e-01  8.8867e-02  3.4790e-01 -1.7737e-01 -7.0605e-01
  1.1055e+00  1.6235e-02 -3.3813e-01 -3.0273e-01  2.5360e-02 -3.8916e-01
 -1.0420e+00 -4.7607e-01 -2.9321e-01 -3.2959e-01 -2.1704e-01 -1.0486e-01
  8.4326e-01 -7.5391e-01 -2.5269e-01 -2.1057e-02  1.0205e+00  6.4111e-01
 -5.0720e-02 -4.6753e-01  3.5950e-02 -2.8906e-01 -5.4785e-01 -5.8643e-01
  5.4883e-01 -5.6006e-01  3.2861e-01 -2.8174e-01  2.5366e-01 -5.8984e-01
  2.0386e-02  8.1201e-01 -5.2148e-01 -1.8359e-01  6.0059e-01 -7.7881e-01
 -1.2177e-02 -3.4814e-01 -6.5674e-01 -2.9251e-02  6.1426e-01  4.7607e-02
 -7.9199e-01  2.8809e-02  1.4775e+00  3.3203e-01 -2.5366e-01 -2.9224e-01
 -3.9697e-01  6.7725e-01 -5.9814e-01 -1.4539e-01 -1.2494e-01 -7.4902e-01
 -4.4409e-01 -7.9980e-01 -2.1643e-01 -1.1273e-01 -2.3657e-01  1.2794e-02
 -3.7280e-01  8.2458e-02  9.2139e-01 -3.8379e-01  3.2617e-01  1.2708e-01
 -4.0186e-01 -5.5127e-01 -3.3667e-01  4.9902e-01  3.1934e-01  6.6406e-02
  6.2695e-01 -5.0342e-01 -5.2783e-01 -3.6108e-01 -7.3669e-02  1.6016e-01
 -7.8711e-01  2.0654e-01  3.1470e-01 -6.5674e-01  1.9519e-01 -2.3181e-01
 -4.1284e-01  2.2498e-01  1.3342e-01  2.2339e-02 -3.9722e-01  5.2588e-01
  4.0698e-01  8.6670e-02 -2.9028e-01 -1.5503e-01  1.9128e-01  4.3213e-01
 -5.6055e-01 -2.3828e-01 -3.2959e-02 -3.6011e-03 -6.0547e-01 -3.0640e-02
  5.3467e-01 -1.1316e-01  4.6777e-01  4.9902e-01 -6.3818e-01 -9.3018e-01
  9.6008e-02  2.7637e+00 -7.9468e-02  1.3123e-01  1.2830e-01 -3.2867e-02
  4.0332e-01  1.1777e+00  9.1895e-01 -1.1719e-01 -6.2158e-01  2.4255e-01
  6.0645e-01 -4.3213e-01 -5.0488e-01 -1.5400e+00 -4.3286e-01 -5.7715e-01
  2.7905e-01 -1.3770e+00 -8.5352e-01  1.7969e-01 -2.9810e-01  1.7939e+00
  8.3057e-01 -8.1641e-01 -8.3838e-01 -9.7168e-02 -2.9248e-01 -2.6196e-01
 -3.5980e-02  7.7490e-01 -4.4702e-01 -1.0114e-01  2.2437e-01  1.7688e-01
  1.8027e+00  1.1748e+00 -2.2327e-01 -1.2238e-01 -1.1299e+00 -4.8975e-01
 -8.2642e-02  1.4131e+00 -2.3950e-01  1.0635e+00 -6.7749e-03  4.1748e-02
 -2.1582e-01  7.0435e-02 -5.7959e-01 -5.7129e-02 -7.0703e-01  2.9639e-01
 -1.4502e-01 -5.4834e-01 -3.1494e-01  6.6797e-01  3.4424e-01 -4.1870e-02
  7.3853e-02  1.0498e+00 -7.9932e-01  3.4839e-01 -5.4541e-01  1.0000e+00
 -1.1934e+00  2.3529e-02  7.8076e-01 -2.8564e-01 -8.8745e-02 -8.5156e-01
  6.3248e-03  2.4668e+00  3.0957e-01  4.7803e-01 -7.2461e-01  2.6035e+00
 -4.1431e-01  6.5576e-01  2.5781e-01  7.8418e-01  1.1641e+00  4.3921e-01
  2.4414e-03  8.4375e-01 -7.3047e-01  6.9141e-01  2.7710e-01  8.4033e-01
  1.6621e+00  4.3182e-02 -1.0217e-01  1.4496e-02  2.4915e-01  7.6758e-01
 -6.8408e-01  2.8467e-01  1.6465e+00  4.2578e-01  2.1953e+00 -3.5498e-01
 -3.0420e-01  2.7871e+00  4.4653e-01 -4.5288e-01 -4.2725e-04 -4.8511e-01
  3.1555e-02  1.9600e+00  9.3896e-01  3.6450e-01  5.5469e-01  4.1836e+00
  2.0762e+00  1.2578e+00  3.6475e-01  1.7310e-01  9.3628e-02 -1.2469e-01
  9.5068e-01  1.6279e+00  2.0449e+00  2.8086e+00  3.3340e+00 -2.8467e-01
  6.6943e-01  6.4570e+00  5.4727e+00  2.7812e+00  4.6289e+00  3.5293e+00
  3.9336e+00  1.6211e+00  2.8516e+00  4.9219e+00  1.0332e+00  3.1816e+00
  2.2949e-01  5.1514e-01 -7.2021e-03 -6.0303e-01  1.3301e+00  2.5732e-01
  2.2363e-01  4.1431e-01  1.3672e-01 -1.1299e+00  2.0996e+00  1.2451e+00
 -3.7891e-01 -1.2341e-01 -1.3684e-01 -9.1919e-02 -6.5820e-01 -5.0635e-01
 -3.8116e-02 -4.2505e-01 -3.8184e-01  3.8757e-02 -4.6240e-01 -1.3013e-01
 -4.8022e-01  1.8823e-01 -2.7222e-01  1.8701e-01 -3.7671e-01 -8.5205e-01
  4.8999e-01 -4.5630e-01 -9.1699e-01 -7.2876e-02  2.0471e-01 -3.4082e-01
 -2.6489e-02  6.5430e-02  2.5488e-01 -1.5479e-01 -5.2686e-01 -1.5063e-01
  1.3857e+00  2.1348e+00  7.2754e-01  1.6523e+00 -7.3877e-01  2.5332e+00
  1.9238e+00  1.5371e+00  8.7451e-01  1.0425e-01 -1.5796e-01  7.7576e-02
 -6.5186e-01 -8.6523e-01  2.5049e-01 -8.1848e-02  6.0303e-01 -6.7017e-02
 -8.3301e-01 -8.9746e-01  1.5210e-01 -6.5332e-01  1.4453e-01  8.1543e-01
 -1.2891e+00  7.6416e-01  6.8320e+00  4.5781e+00  3.7852e+00  2.6289e+00
  1.7881e+00  1.7764e+00  1.7744e+00  1.5112e-01 -3.6963e-01  3.0127e-01
 -1.0620e-02 -6.9641e-02  9.9707e-01 -1.5271e-01  6.7383e-01  1.0781e+00
 -8.5645e-01  1.3320e+00  9.9170e-01  1.6748e-01  1.2305e+00  2.1533e-01
  9.7559e-01 -5.3613e-01  1.2090e+00  1.0004e-01  5.6055e-01  9.3799e-01
  2.0840e+00  9.8938e-02 -3.3496e-01  2.7266e+00  2.9663e-01 -4.8169e-01
 -9.9609e-01  1.9275e-01 -3.2275e-01 -4.5947e-01 -7.6953e-01 -7.3438e-01
 -1.5459e+00 -6.1914e-01 -9.5508e-01 -1.1560e-01 -8.9600e-01  3.6987e-01
  3.3020e-02 -6.2646e-01 -7.6465e-01 -3.2861e-01 -2.6758e-01 -3.6084e-01
 -9.8242e-01 -1.7932e-01 -5.7080e-01 -8.3203e-01  9.2090e-01 -4.4531e-01
 -4.7217e-01 -3.9355e-01  4.0833e-02  6.9775e-01  4.9438e-03  3.3179e-01
 -1.8921e-01  5.9131e-01 -1.2344e+00 -3.8647e-01 -4.7754e-01 -8.8916e-01
 -3.2715e-01 -8.4229e-03  1.5454e-01  5.5273e-01 -4.4482e-01 -7.6709e-01
  5.5566e-01  3.2520e-01  1.9312e-01  3.7891e-01 -4.3823e-01 -3.8281e-01
  3.1787e-01  1.7151e-01  1.4136e-01  8.4961e-01 -1.8872e-01 -3.2227e-01
 -6.6797e-01  1.3940e-01  9.4910e-02  1.3281e-01 -5.2612e-02 -7.4768e-02
 -6.9092e-01 -4.5471e-03  5.5127e-01 -2.1741e-01 -1.3887e+00  6.8799e-01
  2.2144e-01  6.7920e-01 -8.0518e-01 -3.6255e-01 -8.7280e-02 -3.8208e-02
 -6.2402e-01  2.5781e+00  1.1652e-01 -1.1436e+00 -6.1670e-01 -1.1401e-01
 -4.3848e-01  8.2324e-01  5.6201e-01  6.0944e-02  2.4658e-01 -5.7959e-01
 -3.4155e-01  3.0176e-01  1.7749e-01 -1.4496e-02  2.2559e-01 -5.5420e-02
 -1.7883e-01 -7.9053e-01 -4.9011e-02 -2.5977e-01  3.1738e-03 -4.6338e-01
  1.7480e-01 -7.6953e-01 -3.2471e-02 -1.0146e+00 -5.9863e-01 -5.7324e-01
 -6.9580e-01 -1.1777e+00  1.6272e-01 -4.2334e-01 -5.0507e-03 -1.1484e+00
  4.5972e-01  2.9761e-01 -1.8750e+00 -7.3486e-01 -1.0352e+00  6.0449e-01
  1.4316e+00  1.8555e-01 -6.2988e-01 -3.3813e-01  2.9907e-01 -2.4585e-01
 -5.1910e-02 -5.9668e-01  1.9482e-01 -2.8882e-01  2.4634e-01  1.8042e-01
 -9.1113e-01  7.8735e-02  2.8052e-01 -6.6699e-01 -3.5034e-01 -2.1277e-01
 -3.6670e-01 -3.1787e-01 -2.6489e-01  3.9355e-01 -6.2793e-01 -4.6777e-01
 -4.6143e-01 -8.2275e-01  3.6206e-01 -4.1016e-02  2.3254e-01 -2.6270e-01
 -3.0347e-01  1.2366e-01 -6.0791e-01 -1.0654e+00 -9.3750e-01  8.5742e-01
 -5.1514e-01  8.6182e-02 -1.3062e-01  1.3794e-02 -3.9746e-01 -8.3191e-02
 -7.1973e-01 -2.5586e-01 -3.3447e-01 -6.7090e-01  2.3364e-01 -4.5581e-01
  1.3184e+00 -6.8066e-01  1.8457e-01 -7.6562e-01 -5.3516e-01 -6.4087e-02
  4.1504e-01 -7.2021e-01  8.8654e-03 -7.3877e-01  3.5449e-01  3.1787e-01
 -3.1104e-01 -7.9492e-01 -2.8613e-01 -1.1172e+00  3.3350e-01 -4.8267e-01
 -7.8613e-01  1.7200e-01  1.5967e+00 -4.3793e-02  1.0244e+00  4.3732e-02
 -1.0117e+00 -2.0679e-01 -8.4167e-02  7.1143e-01 -4.4769e-02 -7.3926e-01
  1.6541e-02  7.4951e-02 -5.4053e-01  2.0300e-01  1.9495e-01  1.2866e-01
  1.5515e-01 -3.7988e-01 -7.0947e-01 -8.0078e-01 -6.7822e-01 -3.7891e-01
  1.9958e-02  3.6841e-01  3.8379e-01 -4.7455e-02 -8.3252e-01 -7.4512e-01
  6.1963e-01 -4.4629e-01 -1.5894e-01 -1.3306e-01 -5.6702e-02 -3.1250e-01
 -2.9883e-01 -2.7686e-01 -4.0479e-01 -2.6953e-01 -1.0468e-02 -4.1284e-01
 -1.2998e+00 -7.7002e-01 -1.4514e-01  2.8046e-02  4.1211e-01 -5.5957e-01
 -4.5557e-01 -5.0098e-01  7.3438e-01 -4.2285e-01  5.0293e-01  2.5854e-01
 -4.7900e-01 -4.5679e-01  6.8298e-02 -3.7720e-01 -8.2812e-01 -1.4923e-02
 -7.3389e-01  3.4058e-02 -5.2734e-01 -4.1992e-01 -2.3975e-01 -2.8418e-01
 -7.9102e-01 -2.4780e-01  5.1758e-01 -2.9639e-01 -5.9473e-01 -1.4209e-01
 -5.7373e-01  1.9275e-01  2.1533e-01  1.0834e-01  2.8580e-02  9.0027e-03
 -7.3340e-01  1.1938e-01  1.2573e-01 -2.0630e-01 -4.8511e-01  1.0089e-01
  1.5784e-01 -2.0752e-01  2.2327e-01 -3.4619e-01  6.6101e-02  5.5811e-01
 -6.0596e-01 -1.1221e+00 -5.3174e-01 -7.7734e-01 -3.4351e-01 -3.6597e-01
  4.9365e-01 -9.4678e-01 -4.9365e-01 -6.4307e-01 -5.5762e-01 -8.1909e-02
 -1.1094e+00 -6.5918e-01 -1.3428e-01 -7.0557e-01  2.4536e-01  2.5269e-01
 -6.6162e-01 -5.3662e-01 -4.8364e-01 -7.9773e-02 -2.9736e-01 -4.2480e-02
 -7.4707e-01 -8.3496e-01  3.1714e-01 -7.5000e-01  2.6147e-01 -8.9014e-01
  1.3037e-01 -2.1790e-01 -7.1826e-01 -2.4304e-01 -1.8604e-01 -6.5967e-01
  8.9600e-01 -4.7900e-01  1.1938e-01 -4.3359e-01 -7.1143e-01  3.7646e-01
 -8.6475e-01  2.7148e-01  2.6025e-01 -1.6589e-01 -1.5710e-01  1.1981e-01
 -3.7988e-01 -1.9275e-01  8.8818e-01  5.6213e-02 -4.5435e-01 -1.4990e-01
  1.5259e-01 -1.0147e-03  7.7026e-02  1.9873e-01  5.2637e-01  2.3755e-01
  4.0314e-02 -2.1252e-01  1.0557e+00  3.1934e-01 -7.2607e-01 -4.0430e-01
 -5.6592e-01  2.0837e-01  4.7778e-01 -1.3438e+00 -9.1016e-01  8.4106e-02
 -1.1469e-01  9.5020e-01 -7.1436e-01  1.8875e-02  1.7725e-01  2.4316e-01
  5.9717e-01 -6.6406e-01 -5.1221e-01 -5.4883e-01  9.1782e-03 -8.5107e-01
 -4.1040e-01 -6.5918e-01  3.0444e-01  4.6338e-01 -1.3379e+00  3.7451e-01
  4.9829e-01 -1.0752e+00 -3.0078e-01 -6.1523e-01 -2.4341e-01  2.4048e-02
  2.9980e-01 -9.8022e-02  1.1680e+00 -3.1079e-01 -5.5115e-02 -4.5947e-01
  4.7290e-01 -5.2393e-01 -4.6045e-01 -4.5605e-01 -7.5342e-01  6.3721e-01
 -5.6299e-01  1.0186e+00 -1.4783e-01 -2.5781e-01 -6.6504e-01 -6.3599e-02
 -3.8574e-01  3.5547e-01 -5.2686e-01  4.0601e-01 -4.3701e-02 -1.2783e+00
  6.3843e-02 -5.4346e-01 -3.4863e-01  4.2261e-01  2.3376e-01 -4.0942e-01
 -2.2925e-01 -8.0566e-01  1.8127e-01  3.0835e-01 -5.1172e-01 -1.1279e+00
 -2.3022e-01 -5.3467e-02 -1.8640e-01 -8.0200e-02  2.6489e-02 -4.7144e-01
 -4.6387e-01  5.6104e-01 -6.2402e-01 -4.4434e-01 -6.2158e-01 -4.9243e-01
 -5.9717e-01  3.7500e-01 -1.9080e-01  2.0850e-01 -1.2463e-01 -3.9111e-01
 -4.2651e-01  4.3335e-01 -5.0879e-01 -1.7822e-02 -3.6499e-01 -4.2529e-01
 -2.4976e-01 -9.5264e-01  9.6680e-02 -5.1025e-01 -5.6396e-01 -4.4971e-01
  3.0731e-02 -5.4980e-01  4.2786e-02 -3.4082e-01 -4.3945e-01  1.3232e-01
  1.6467e-01 -1.0986e-02 -7.9150e-01 -1.3696e-01 -2.8809e-01 -1.4954e-03
 -5.8594e-01  9.6094e-01 -4.5410e-01 -1.9751e-01  3.3643e-01 -1.9434e-01
  5.8167e-02  2.6611e-01 -1.9092e-01  2.0337e-01  7.1338e-01  2.8369e-01
 -6.7529e-01  2.5073e-01  3.5474e-01 -1.0098e+00  7.9346e-04  1.6663e-01
  1.5117e+00  2.7368e-01 -4.3164e-01  8.9355e-01 -2.7661e-01 -6.8164e-01
  1.5356e-01 -3.8037e-01 -5.8936e-01 -3.6670e-01  4.5874e-01 -6.7871e-01
 -2.7832e-01 -2.7832e-01 -6.1523e-01 -5.9229e-01 -1.0059e+00 -8.8232e-01
 -3.3765e-01 -1.7810e-01  3.2129e-01 -4.1064e-01 -7.6270e-01 -2.6050e-01
  1.0146e+00  5.4382e-02 -4.6851e-01  3.3301e-01 -3.9600e-01  6.4941e-02
 -3.2959e-01 -2.3999e-01 -3.9209e-01 -1.4954e-01 -3.3740e-01 -6.0840e-01
 -2.0679e-01  1.1176e-01  5.2429e-02 -4.6362e-01 -6.7188e-01 -1.0078e+00
 -3.0078e-01 -5.5957e-01 -1.3147e-01 -2.7246e-01  2.3621e-01 -2.4268e-01
 -7.5098e-01 -2.0557e-01  1.4148e-01  4.8730e-01  1.2817e-01 -6.0303e-01
 -4.6167e-01  9.9854e-01 -5.2588e-01 -7.4023e-01 -3.8086e-01  1.7188e-01
 -2.4731e-01 -2.9099e-02  2.0874e-01 -4.5972e-01 -7.2461e-01 -7.9053e-01
 -1.2421e-01  3.1201e-01 -1.4783e-01 -4.9658e-01 -8.6621e-01 -3.2935e-01
  2.5537e-01  2.3071e-02 -6.1670e-01 -6.5186e-01 -6.3232e-01  8.0469e-01
 -1.3018e+00 -1.4805e+00 -8.7012e-01 -1.0381e+00 -6.1328e-01 -4.0576e-01
 -2.6001e-01  4.3945e-03 -8.5645e-01  1.2390e-01 -1.6223e-01  4.6509e-02
 -8.6182e-02 -1.5112e-01 -1.0332e+00 -3.1030e-01 -5.5469e-01  1.2715e+00
 -4.7455e-02 -5.7275e-01  1.3806e-01 -5.4980e-01 -2.4097e-01  1.2561e-01
  1.3367e-02  1.5112e-01 -7.5439e-01 -7.5195e-01 -2.8613e-01 -7.6172e-01
 -4.7876e-01 -5.1660e-01 -5.9131e-01 -1.2598e+00 -7.8271e-01 -2.7954e-01
  1.1943e+00  5.5322e-01  1.6758e+00  2.2705e-01 -2.5928e-01  2.4451e-01
  2.9419e-01 -2.8784e-01 -4.8035e-02  1.1316e-01  5.4077e-02  1.3782e-01
  4.9255e-02 -5.4883e-01 -1.7700e-01 -2.5635e-01  4.3457e-01 -8.9404e-01
  1.9922e-01  3.2227e-02 -8.1201e-01  4.0845e-01 -3.2788e-01 -4.6753e-02
  4.3042e-01  2.0972e-01  1.0068e+00  2.7637e-01 -7.9285e-02 -4.3750e-01
  1.0571e-01 -5.1416e-01  8.2129e-01  5.0354e-02]
Evaluate inference time cost...
Execution time summary:
 mean (ms)   median (ms)    max (ms)     min (ms)     std (ms)  
   7.6202       7.5011       8.0435       7.4585       0.2005   
               
