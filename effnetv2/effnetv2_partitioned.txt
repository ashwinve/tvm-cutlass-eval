def @main(%input_1:0: Tensor[(8, 224, 224, 3), float32]) -> Tensor[(8, 1000), float16] {
  %0 = cast(%input_1:0, dtype="float16") /* ty=Tensor[(8, 224, 224, 3), float16] */;
  %1 = transpose(%0, axes=[0, 3, 1, 2]) /* ty=Tensor[(8, 3, 224, 224), float16] */;
  %2 = nn.pad(%1, meta[relay.Constant][0] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 1], [0, 1]]) /* ty=Tensor[(8, 3, 225, 225), float16] */;
  %3 = layout_transform(%2, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(8, 225, 225, 3), float16] */;
  %4 = @tvmgen_default_cutlass_main_0(%3, meta[relay.Constant][1] /* ty=Tensor[(24, 3, 3, 3), float16] */, meta[relay.Constant][2] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %5 = nn.pad(%4, meta[relay.Constant][3] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 114, 114, 24), float16] */;
  %6 = @tvmgen_default_cutlass_main_3(%5, meta[relay.Constant][4] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %7 = add(%6, %4) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %8 = nn.pad(%7, meta[relay.Constant][6] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 114, 114, 24), float16] */;
  %9 = @tvmgen_default_cutlass_main_6(%8, meta[relay.Constant][7] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][8] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %10 = add(%9, %7) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %11 = nn.pad(%10, meta[relay.Constant][9] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 114, 114, 24), float16] */;
  %12 = @tvmgen_default_cutlass_main_9(%11, meta[relay.Constant][10] /* ty=Tensor[(24, 3, 3, 24), float16] */, meta[relay.Constant][11] /* ty=Tensor[(1, 1, 1, 24), float16] */) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %13 = add(%12, %10) /* ty=Tensor[(8, 112, 112, 24), float16] */;
  %14 = nn.pad(%13, meta[relay.Constant][12] /* ty=float16 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(8, 113, 113, 24), float16] */;
  %15 = @tvmgen_default_cutlass_main_12(%14, meta[relay.Constant][13] /* ty=Tensor[(96, 3, 3, 24), float16] */, meta[relay.Constant][14] /* ty=Tensor[(1, 1, 1, 96), float16] */) /* ty=Tensor[(8, 56, 56, 96), float16] */;
  %16 = nn.pad(%15, meta[relay.Constant][15] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 56, 56, 96), float16] */;
  %17 = @tvmgen_default_cutlass_main_15(%16, meta[relay.Constant][16] /* ty=Tensor[(48, 1, 1, 96), float16] */, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %18 = nn.pad(%17, meta[relay.Constant][18] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 58, 58, 48), float16] */;
  %19 = @tvmgen_default_cutlass_main_18(%18, meta[relay.Constant][19] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][20] /* ty=Tensor[(192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %20 = nn.pad(%19, meta[relay.Constant][21] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %21 = @tvmgen_default_cutlass_main_21(%20, meta[relay.Constant][22] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %22 = add(%21, %17) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %23 = nn.pad(%22, meta[relay.Constant][24] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 58, 58, 48), float16] */;
  %24 = @tvmgen_default_cutlass_main_24(%23, meta[relay.Constant][25] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][26] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %25 = nn.pad(%24, meta[relay.Constant][27] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %26 = @tvmgen_default_cutlass_main_27(%25, meta[relay.Constant][28] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %27 = add(%26, %22) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %28 = nn.pad(%27, meta[relay.Constant][30] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 58, 58, 48), float16] */;
  %29 = @tvmgen_default_cutlass_main_30(%28, meta[relay.Constant][31] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][32] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %30 = nn.pad(%29, meta[relay.Constant][33] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %31 = @tvmgen_default_cutlass_main_33(%30, meta[relay.Constant][34] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %32 = add(%31, %27) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %33 = nn.pad(%32, meta[relay.Constant][36] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 58, 58, 48), float16] */;
  %34 = @tvmgen_default_cutlass_main_36(%33, meta[relay.Constant][37] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][38] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %35 = nn.pad(%34, meta[relay.Constant][39] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 56, 56, 192), float16] */;
  %36 = @tvmgen_default_cutlass_main_39(%35, meta[relay.Constant][40] /* ty=Tensor[(48, 1, 1, 192), float16] */, meta[relay.Constant][41] /* ty=Tensor[(1, 1, 1, 48), float16] */) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %37 = add(%36, %32) /* ty=Tensor[(8, 56, 56, 48), float16] */;
  %38 = nn.pad(%37, meta[relay.Constant][42] /* ty=float16 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(8, 57, 57, 48), float16] */;
  %39 = @tvmgen_default_cutlass_main_42(%38, meta[relay.Constant][43] /* ty=Tensor[(192, 3, 3, 48), float16] */, meta[relay.Constant][44] /* ty=Tensor[(1, 1, 1, 192), float16] */) /* ty=Tensor[(8, 28, 28, 192), float16] */;
  %40 = nn.pad(%39, meta[relay.Constant][45] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 192), float16] */;
  %41 = @tvmgen_default_cutlass_main_45(%40, meta[relay.Constant][46] /* ty=Tensor[(80, 1, 1, 192), float16] */, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %42 = nn.pad(%41, meta[relay.Constant][48] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 30, 30, 80), float16] */;
  %43 = @tvmgen_default_cutlass_main_48(%42, meta[relay.Constant][49] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][50] /* ty=Tensor[(320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %44 = nn.pad(%43, meta[relay.Constant][51] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %45 = @tvmgen_default_cutlass_main_51(%44, meta[relay.Constant][52] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %46 = add(%45, %41) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %47 = nn.pad(%46, meta[relay.Constant][54] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 30, 30, 80), float16] */;
  %48 = @tvmgen_default_cutlass_main_54(%47, meta[relay.Constant][55] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][56] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %49 = nn.pad(%48, meta[relay.Constant][57] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %50 = @tvmgen_default_cutlass_main_57(%49, meta[relay.Constant][58] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %51 = add(%50, %46) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %52 = nn.pad(%51, meta[relay.Constant][60] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 30, 30, 80), float16] */;
  %53 = @tvmgen_default_cutlass_main_60(%52, meta[relay.Constant][61] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][62] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %54 = nn.pad(%53, meta[relay.Constant][63] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %55 = @tvmgen_default_cutlass_main_63(%54, meta[relay.Constant][64] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %56 = add(%55, %51) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %57 = nn.pad(%56, meta[relay.Constant][66] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 30, 30, 80), float16] */;
  %58 = @tvmgen_default_cutlass_main_66(%57, meta[relay.Constant][67] /* ty=Tensor[(320, 3, 3, 80), float16] */, meta[relay.Constant][68] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %59 = nn.pad(%58, meta[relay.Constant][69] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %60 = @tvmgen_default_cutlass_main_69(%59, meta[relay.Constant][70] /* ty=Tensor[(80, 1, 1, 320), float16] */, meta[relay.Constant][71] /* ty=Tensor[(1, 1, 1, 80), float16] */) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %61 = add(%60, %56) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %62 = nn.pad(%61, meta[relay.Constant][72] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 28, 28, 80), float16] */;
  %63 = @tvmgen_default_cutlass_main_72(%62, meta[relay.Constant][73] /* ty=Tensor[(320, 1, 1, 80), float16] */, meta[relay.Constant][74] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 28, 28, 320), float16] */;
  %64 = nn.pad(%63, meta[relay.Constant][75] /* ty=float16 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(8, 29, 29, 320), float16] */;
  %65 = layout_transform(meta[relay.Constant][76] /* ty=Tensor[(320, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 320, 1), float16] */;
  %66 = nn.conv2d(%64, %65, strides=[2, 2], padding=[0, 0, 0, 0], groups=320, channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %67 = add(%66, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %68 = sigmoid(%67) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %69 = multiply(%67, %68) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(8, 14, 14, 320), float32] */;
  %71 = mean(%70, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 320), float32] */;
  %72 = cast(%71, dtype="float16") /* ty=Tensor[(8, 1, 1, 320), float16] */;
  %73 = @tvmgen_default_cutlass_main_75(%72, meta[relay.Constant][78] /* ty=Tensor[(20, 1, 1, 320), float16] */, meta[relay.Constant][79] /* ty=Tensor[(1, 1, 1, 20), float16] */) /* ty=Tensor[(8, 1, 1, 20), float16] */;
  %74 = @tvmgen_default_cutlass_main_78(%73, meta[relay.Constant][80] /* ty=Tensor[(320, 1, 1, 20), float16] */, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 320), float16] */) /* ty=Tensor[(8, 1, 1, 320), float16] */;
  %75 = multiply(%74, %69) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %76 = nn.pad(%75, meta[relay.Constant][82] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 320), float16] */;
  %77 = @tvmgen_default_cutlass_main_81(%76, meta[relay.Constant][83] /* ty=Tensor[(160, 1, 1, 320), float16] */, meta[relay.Constant][84] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %78 = nn.pad(%77, meta[relay.Constant][85] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %79 = @tvmgen_default_cutlass_main_84(%78, meta[relay.Constant][86] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][87] /* ty=Tensor[(640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %80 = nn.pad(%79, meta[relay.Constant][88] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %81 = layout_transform(meta[relay.Constant][89] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %82 = nn.conv2d(%80, %81, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %83 = add(%82, meta[relay.Constant][90] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %84 = sigmoid(%83) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %85 = multiply(%83, %84) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %87 = mean(%86, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %88 = cast(%87, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %89 = @tvmgen_default_cutlass_main_87(%88, meta[relay.Constant][91] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][92] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %90 = @tvmgen_default_cutlass_main_90(%89, meta[relay.Constant][93] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][94] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %91 = multiply(%90, %85) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %92 = nn.pad(%91, meta[relay.Constant][95] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %93 = @tvmgen_default_cutlass_main_93(%92, meta[relay.Constant][96] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][97] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %94 = add(%93, %77) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %95 = nn.pad(%94, meta[relay.Constant][98] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %96 = @tvmgen_default_cutlass_main_96(%95, meta[relay.Constant][99] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][100] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %97 = nn.pad(%96, meta[relay.Constant][101] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %98 = layout_transform(meta[relay.Constant][102] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %99 = nn.conv2d(%97, %98, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %100 = add(%99, meta[relay.Constant][103] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %101 = sigmoid(%100) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %102 = multiply(%100, %101) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %104 = mean(%103, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %105 = cast(%104, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %106 = @tvmgen_default_cutlass_main_99(%105, meta[relay.Constant][104] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %107 = @tvmgen_default_cutlass_main_102(%106, meta[relay.Constant][106] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][107] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %108 = multiply(%107, %102) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %109 = nn.pad(%108, meta[relay.Constant][108] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %110 = @tvmgen_default_cutlass_main_105(%109, meta[relay.Constant][109] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][110] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %111 = add(%110, %94) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %112 = nn.pad(%111, meta[relay.Constant][111] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %113 = @tvmgen_default_cutlass_main_108(%112, meta[relay.Constant][112] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][113] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %114 = nn.pad(%113, meta[relay.Constant][114] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %115 = layout_transform(meta[relay.Constant][115] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %116 = nn.conv2d(%114, %115, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %117 = add(%116, meta[relay.Constant][116] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %118 = sigmoid(%117) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %119 = multiply(%117, %118) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %121 = mean(%120, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %122 = cast(%121, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %123 = @tvmgen_default_cutlass_main_111(%122, meta[relay.Constant][117] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][118] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %124 = @tvmgen_default_cutlass_main_114(%123, meta[relay.Constant][119] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][120] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %125 = multiply(%124, %119) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %126 = nn.pad(%125, meta[relay.Constant][121] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %127 = @tvmgen_default_cutlass_main_117(%126, meta[relay.Constant][122] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][123] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %128 = add(%127, %111) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %129 = nn.pad(%128, meta[relay.Constant][124] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %130 = @tvmgen_default_cutlass_main_120(%129, meta[relay.Constant][125] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][126] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %131 = nn.pad(%130, meta[relay.Constant][127] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %132 = layout_transform(meta[relay.Constant][128] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %133 = nn.conv2d(%131, %132, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %134 = add(%133, meta[relay.Constant][129] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %135 = sigmoid(%134) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %136 = multiply(%134, %135) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %138 = mean(%137, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %139 = cast(%138, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %140 = @tvmgen_default_cutlass_main_123(%139, meta[relay.Constant][130] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][131] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %141 = @tvmgen_default_cutlass_main_126(%140, meta[relay.Constant][132] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][133] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %142 = multiply(%141, %136) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %143 = nn.pad(%142, meta[relay.Constant][134] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %144 = @tvmgen_default_cutlass_main_129(%143, meta[relay.Constant][135] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][136] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %145 = add(%144, %128) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %146 = nn.pad(%145, meta[relay.Constant][137] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %147 = @tvmgen_default_cutlass_main_132(%146, meta[relay.Constant][138] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][139] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %148 = nn.pad(%147, meta[relay.Constant][140] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %149 = layout_transform(meta[relay.Constant][141] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %150 = nn.conv2d(%148, %149, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %151 = add(%150, meta[relay.Constant][142] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %152 = sigmoid(%151) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %153 = multiply(%151, %152) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %155 = mean(%154, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %156 = cast(%155, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %157 = @tvmgen_default_cutlass_main_135(%156, meta[relay.Constant][143] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][144] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %158 = @tvmgen_default_cutlass_main_138(%157, meta[relay.Constant][145] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][146] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %159 = multiply(%158, %153) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %160 = nn.pad(%159, meta[relay.Constant][147] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %161 = @tvmgen_default_cutlass_main_141(%160, meta[relay.Constant][148] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][149] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %162 = add(%161, %145) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %163 = nn.pad(%162, meta[relay.Constant][150] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %164 = @tvmgen_default_cutlass_main_144(%163, meta[relay.Constant][151] /* ty=Tensor[(640, 1, 1, 160), float16] */, meta[relay.Constant][152] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %165 = nn.pad(%164, meta[relay.Constant][153] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 640), float16] */;
  %166 = layout_transform(meta[relay.Constant][154] /* ty=Tensor[(640, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 640, 1), float16] */;
  %167 = nn.conv2d(%165, %166, padding=[0, 0, 0, 0], groups=640, channels=640, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %168 = add(%167, meta[relay.Constant][155] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %169 = sigmoid(%168) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %170 = multiply(%168, %169) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(8, 14, 14, 640), float32] */;
  %172 = mean(%171, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 640), float32] */;
  %173 = cast(%172, dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %174 = @tvmgen_default_cutlass_main_147(%173, meta[relay.Constant][156] /* ty=Tensor[(40, 1, 1, 640), float16] */, meta[relay.Constant][157] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %175 = @tvmgen_default_cutlass_main_150(%174, meta[relay.Constant][158] /* ty=Tensor[(640, 1, 1, 40), float16] */, meta[relay.Constant][159] /* ty=Tensor[(1, 1, 1, 640), float16] */) /* ty=Tensor[(8, 1, 1, 640), float16] */;
  %176 = multiply(%175, %170) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %177 = nn.pad(%176, meta[relay.Constant][160] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 640), float16] */;
  %178 = @tvmgen_default_cutlass_main_153(%177, meta[relay.Constant][161] /* ty=Tensor[(160, 1, 1, 640), float16] */, meta[relay.Constant][162] /* ty=Tensor[(1, 1, 1, 160), float16] */) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %179 = add(%178, %162) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %180 = nn.pad(%179, meta[relay.Constant][163] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 160), float16] */;
  %181 = @tvmgen_default_cutlass_main_156(%180, meta[relay.Constant][164] /* ty=Tensor[(960, 1, 1, 160), float16] */, meta[relay.Constant][165] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %182 = nn.pad(%181, meta[relay.Constant][166] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 960), float16] */;
  %183 = layout_transform(meta[relay.Constant][167] /* ty=Tensor[(960, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 960, 1), float16] */;
  %184 = nn.conv2d(%182, %183, padding=[0, 0, 0, 0], groups=960, channels=960, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %185 = add(%184, meta[relay.Constant][168] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %186 = sigmoid(%185) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %187 = multiply(%185, %186) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(8, 14, 14, 960), float32] */;
  %189 = mean(%188, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 960), float32] */;
  %190 = cast(%189, dtype="float16") /* ty=Tensor[(8, 1, 1, 960), float16] */;
  %191 = @tvmgen_default_cutlass_main_159(%190, meta[relay.Constant][169] /* ty=Tensor[(40, 1, 1, 960), float16] */, meta[relay.Constant][170] /* ty=Tensor[(1, 1, 1, 40), float16] */) /* ty=Tensor[(8, 1, 1, 40), float16] */;
  %192 = @tvmgen_default_cutlass_main_162(%191, meta[relay.Constant][171] /* ty=Tensor[(960, 1, 1, 40), float16] */, meta[relay.Constant][172] /* ty=Tensor[(1, 1, 1, 960), float16] */) /* ty=Tensor[(8, 1, 1, 960), float16] */;
  %193 = multiply(%192, %187) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %194 = nn.pad(%193, meta[relay.Constant][173] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 960), float16] */;
  %195 = @tvmgen_default_cutlass_main_165(%194, meta[relay.Constant][174] /* ty=Tensor[(176, 1, 1, 960), float16] */, meta[relay.Constant][175] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %196 = nn.pad(%195, meta[relay.Constant][176] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %197 = @tvmgen_default_cutlass_main_168(%196, meta[relay.Constant][177] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][178] /* ty=Tensor[(1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %198 = nn.pad(%197, meta[relay.Constant][179] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %199 = layout_transform(meta[relay.Constant][180] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %200 = nn.conv2d(%198, %199, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %201 = add(%200, meta[relay.Constant][181] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %202 = sigmoid(%201) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %203 = multiply(%201, %202) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %205 = mean(%204, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %206 = cast(%205, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %207 = @tvmgen_default_cutlass_main_171(%206, meta[relay.Constant][182] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %208 = @tvmgen_default_cutlass_main_174(%207, meta[relay.Constant][184] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %209 = multiply(%208, %203) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %210 = nn.pad(%209, meta[relay.Constant][186] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %211 = @tvmgen_default_cutlass_main_177(%210, meta[relay.Constant][187] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][188] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %212 = add(%211, %195) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %213 = nn.pad(%212, meta[relay.Constant][189] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %214 = @tvmgen_default_cutlass_main_180(%213, meta[relay.Constant][190] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][191] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %215 = nn.pad(%214, meta[relay.Constant][192] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %216 = layout_transform(meta[relay.Constant][193] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %217 = nn.conv2d(%215, %216, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %218 = add(%217, meta[relay.Constant][194] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %219 = sigmoid(%218) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %220 = multiply(%218, %219) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %222 = mean(%221, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %223 = cast(%222, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %224 = @tvmgen_default_cutlass_main_183(%223, meta[relay.Constant][195] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][196] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %225 = @tvmgen_default_cutlass_main_186(%224, meta[relay.Constant][197] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][198] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %226 = multiply(%225, %220) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %227 = nn.pad(%226, meta[relay.Constant][199] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %228 = @tvmgen_default_cutlass_main_189(%227, meta[relay.Constant][200] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][201] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %229 = add(%228, %212) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %230 = nn.pad(%229, meta[relay.Constant][202] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %231 = @tvmgen_default_cutlass_main_192(%230, meta[relay.Constant][203] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][204] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %232 = nn.pad(%231, meta[relay.Constant][205] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %233 = layout_transform(meta[relay.Constant][206] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %234 = nn.conv2d(%232, %233, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %235 = add(%234, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %236 = sigmoid(%235) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %237 = multiply(%235, %236) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %239 = mean(%238, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %240 = cast(%239, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %241 = @tvmgen_default_cutlass_main_195(%240, meta[relay.Constant][208] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][209] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %242 = @tvmgen_default_cutlass_main_198(%241, meta[relay.Constant][210] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][211] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %243 = multiply(%242, %237) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %244 = nn.pad(%243, meta[relay.Constant][212] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %245 = @tvmgen_default_cutlass_main_201(%244, meta[relay.Constant][213] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][214] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %246 = add(%245, %229) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %247 = nn.pad(%246, meta[relay.Constant][215] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %248 = @tvmgen_default_cutlass_main_204(%247, meta[relay.Constant][216] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][217] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %249 = nn.pad(%248, meta[relay.Constant][218] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %250 = layout_transform(meta[relay.Constant][219] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %251 = nn.conv2d(%249, %250, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %252 = add(%251, meta[relay.Constant][220] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %253 = sigmoid(%252) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %254 = multiply(%252, %253) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %256 = mean(%255, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %257 = cast(%256, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %258 = @tvmgen_default_cutlass_main_207(%257, meta[relay.Constant][221] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][222] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %259 = @tvmgen_default_cutlass_main_210(%258, meta[relay.Constant][223] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][224] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %260 = multiply(%259, %254) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %261 = nn.pad(%260, meta[relay.Constant][225] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %262 = @tvmgen_default_cutlass_main_213(%261, meta[relay.Constant][226] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][227] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %263 = add(%262, %246) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %264 = nn.pad(%263, meta[relay.Constant][228] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %265 = @tvmgen_default_cutlass_main_216(%264, meta[relay.Constant][229] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][230] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %266 = nn.pad(%265, meta[relay.Constant][231] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %267 = layout_transform(meta[relay.Constant][232] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %268 = nn.conv2d(%266, %267, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %269 = add(%268, meta[relay.Constant][233] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %270 = sigmoid(%269) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %271 = multiply(%269, %270) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %273 = mean(%272, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %274 = cast(%273, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %275 = @tvmgen_default_cutlass_main_219(%274, meta[relay.Constant][234] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][235] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %276 = @tvmgen_default_cutlass_main_222(%275, meta[relay.Constant][236] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][237] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %277 = multiply(%276, %271) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %278 = nn.pad(%277, meta[relay.Constant][238] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %279 = @tvmgen_default_cutlass_main_225(%278, meta[relay.Constant][239] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][240] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %280 = add(%279, %263) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %281 = nn.pad(%280, meta[relay.Constant][241] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %282 = @tvmgen_default_cutlass_main_228(%281, meta[relay.Constant][242] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][243] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %283 = nn.pad(%282, meta[relay.Constant][244] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %284 = layout_transform(meta[relay.Constant][245] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %285 = nn.conv2d(%283, %284, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %286 = add(%285, meta[relay.Constant][246] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %287 = sigmoid(%286) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %288 = multiply(%286, %287) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %290 = mean(%289, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %291 = cast(%290, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %292 = @tvmgen_default_cutlass_main_231(%291, meta[relay.Constant][247] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][248] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %293 = @tvmgen_default_cutlass_main_234(%292, meta[relay.Constant][249] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][250] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %294 = multiply(%293, %288) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %295 = nn.pad(%294, meta[relay.Constant][251] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %296 = @tvmgen_default_cutlass_main_237(%295, meta[relay.Constant][252] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][253] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %297 = add(%296, %280) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %298 = nn.pad(%297, meta[relay.Constant][254] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %299 = @tvmgen_default_cutlass_main_240(%298, meta[relay.Constant][255] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][256] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %300 = nn.pad(%299, meta[relay.Constant][257] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %301 = layout_transform(meta[relay.Constant][258] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %302 = nn.conv2d(%300, %301, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %303 = add(%302, meta[relay.Constant][259] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %304 = sigmoid(%303) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %305 = multiply(%303, %304) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %307 = mean(%306, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %308 = cast(%307, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %309 = @tvmgen_default_cutlass_main_243(%308, meta[relay.Constant][260] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][261] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %310 = @tvmgen_default_cutlass_main_246(%309, meta[relay.Constant][262] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][263] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %311 = multiply(%310, %305) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %312 = nn.pad(%311, meta[relay.Constant][264] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %313 = @tvmgen_default_cutlass_main_249(%312, meta[relay.Constant][265] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][266] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %314 = add(%313, %297) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %315 = nn.pad(%314, meta[relay.Constant][267] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %316 = @tvmgen_default_cutlass_main_252(%315, meta[relay.Constant][268] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][269] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %317 = nn.pad(%316, meta[relay.Constant][270] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %318 = layout_transform(meta[relay.Constant][271] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %319 = nn.conv2d(%317, %318, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %320 = add(%319, meta[relay.Constant][272] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %321 = sigmoid(%320) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %322 = multiply(%320, %321) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %324 = mean(%323, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %325 = cast(%324, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %326 = @tvmgen_default_cutlass_main_255(%325, meta[relay.Constant][273] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][274] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %327 = @tvmgen_default_cutlass_main_258(%326, meta[relay.Constant][275] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][276] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %328 = multiply(%327, %322) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %329 = nn.pad(%328, meta[relay.Constant][277] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %330 = @tvmgen_default_cutlass_main_261(%329, meta[relay.Constant][278] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][279] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %331 = add(%330, %314) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %332 = nn.pad(%331, meta[relay.Constant][280] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %333 = @tvmgen_default_cutlass_main_264(%332, meta[relay.Constant][281] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][282] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %334 = nn.pad(%333, meta[relay.Constant][283] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %335 = layout_transform(meta[relay.Constant][284] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %336 = nn.conv2d(%334, %335, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %337 = add(%336, meta[relay.Constant][285] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %338 = sigmoid(%337) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %339 = multiply(%337, %338) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %341 = mean(%340, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %342 = cast(%341, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %343 = @tvmgen_default_cutlass_main_267(%342, meta[relay.Constant][286] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][287] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %344 = @tvmgen_default_cutlass_main_270(%343, meta[relay.Constant][288] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][289] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %345 = multiply(%344, %339) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %346 = nn.pad(%345, meta[relay.Constant][290] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %347 = @tvmgen_default_cutlass_main_273(%346, meta[relay.Constant][291] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][292] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %348 = add(%347, %331) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %349 = nn.pad(%348, meta[relay.Constant][293] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %350 = @tvmgen_default_cutlass_main_276(%349, meta[relay.Constant][294] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][295] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %351 = nn.pad(%350, meta[relay.Constant][296] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %352 = layout_transform(meta[relay.Constant][297] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %353 = nn.conv2d(%351, %352, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %354 = add(%353, meta[relay.Constant][298] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %355 = sigmoid(%354) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %356 = multiply(%354, %355) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %358 = mean(%357, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %359 = cast(%358, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %360 = @tvmgen_default_cutlass_main_279(%359, meta[relay.Constant][299] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][300] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %361 = @tvmgen_default_cutlass_main_282(%360, meta[relay.Constant][301] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][302] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %362 = multiply(%361, %356) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %363 = nn.pad(%362, meta[relay.Constant][303] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %364 = @tvmgen_default_cutlass_main_285(%363, meta[relay.Constant][304] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][305] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %365 = add(%364, %348) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %366 = nn.pad(%365, meta[relay.Constant][306] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %367 = @tvmgen_default_cutlass_main_288(%366, meta[relay.Constant][307] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][308] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %368 = nn.pad(%367, meta[relay.Constant][309] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %369 = layout_transform(meta[relay.Constant][310] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %370 = nn.conv2d(%368, %369, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %371 = add(%370, meta[relay.Constant][311] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %372 = sigmoid(%371) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %373 = multiply(%371, %372) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %375 = mean(%374, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %376 = cast(%375, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %377 = @tvmgen_default_cutlass_main_291(%376, meta[relay.Constant][312] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][313] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %378 = @tvmgen_default_cutlass_main_294(%377, meta[relay.Constant][314] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][315] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %379 = multiply(%378, %373) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %380 = nn.pad(%379, meta[relay.Constant][316] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %381 = @tvmgen_default_cutlass_main_297(%380, meta[relay.Constant][317] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][318] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %382 = add(%381, %365) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %383 = nn.pad(%382, meta[relay.Constant][319] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %384 = @tvmgen_default_cutlass_main_300(%383, meta[relay.Constant][320] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][321] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %385 = nn.pad(%384, meta[relay.Constant][322] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %386 = layout_transform(meta[relay.Constant][323] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %387 = nn.conv2d(%385, %386, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %388 = add(%387, meta[relay.Constant][324] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %389 = sigmoid(%388) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %390 = multiply(%388, %389) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %392 = mean(%391, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %393 = cast(%392, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %394 = @tvmgen_default_cutlass_main_303(%393, meta[relay.Constant][325] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][326] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %395 = @tvmgen_default_cutlass_main_306(%394, meta[relay.Constant][327] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][328] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %396 = multiply(%395, %390) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %397 = nn.pad(%396, meta[relay.Constant][329] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %398 = @tvmgen_default_cutlass_main_309(%397, meta[relay.Constant][330] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][331] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %399 = add(%398, %382) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %400 = nn.pad(%399, meta[relay.Constant][332] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %401 = @tvmgen_default_cutlass_main_312(%400, meta[relay.Constant][333] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][334] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %402 = nn.pad(%401, meta[relay.Constant][335] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 16, 16, 1056), float16] */;
  %403 = layout_transform(meta[relay.Constant][336] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %404 = nn.conv2d(%402, %403, padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %405 = add(%404, meta[relay.Constant][337] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %406 = sigmoid(%405) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %407 = multiply(%405, %406) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(8, 14, 14, 1056), float32] */;
  %409 = mean(%408, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %410 = cast(%409, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %411 = @tvmgen_default_cutlass_main_315(%410, meta[relay.Constant][338] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][339] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %412 = @tvmgen_default_cutlass_main_318(%411, meta[relay.Constant][340] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][341] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %413 = multiply(%412, %407) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %414 = nn.pad(%413, meta[relay.Constant][342] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %415 = @tvmgen_default_cutlass_main_321(%414, meta[relay.Constant][343] /* ty=Tensor[(176, 1, 1, 1056), float16] */, meta[relay.Constant][344] /* ty=Tensor[(1, 1, 1, 176), float16] */) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %416 = add(%415, %399) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %417 = nn.pad(%416, meta[relay.Constant][345] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 14, 14, 176), float16] */;
  %418 = @tvmgen_default_cutlass_main_324(%417, meta[relay.Constant][346] /* ty=Tensor[(1056, 1, 1, 176), float16] */, meta[relay.Constant][347] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
  %419 = nn.pad(%418, meta[relay.Constant][348] /* ty=float16 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(8, 15, 15, 1056), float16] */;
  %420 = layout_transform(meta[relay.Constant][349] /* ty=Tensor[(1056, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1056, 1), float16] */;
  %421 = nn.conv2d(%419, %420, strides=[2, 2], padding=[0, 0, 0, 0], groups=1056, channels=1056, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %422 = add(%421, meta[relay.Constant][350] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %423 = sigmoid(%422) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %424 = multiply(%422, %423) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(8, 7, 7, 1056), float32] */;
  %426 = mean(%425, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1056), float32] */;
  %427 = cast(%426, dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %428 = @tvmgen_default_cutlass_main_327(%427, meta[relay.Constant][351] /* ty=Tensor[(44, 1, 1, 1056), float16] */, meta[relay.Constant][352] /* ty=Tensor[(1, 1, 1, 44), float16] */) /* ty=Tensor[(8, 1, 1, 44), float16] */;
  %429 = @tvmgen_default_cutlass_main_330(%428, meta[relay.Constant][353] /* ty=Tensor[(1056, 1, 1, 44), float16] */, meta[relay.Constant][354] /* ty=Tensor[(1, 1, 1, 1056), float16] */) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
  %430 = multiply(%429, %424) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %431 = nn.pad(%430, meta[relay.Constant][355] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1056), float16] */;
  %432 = @tvmgen_default_cutlass_main_333(%431, meta[relay.Constant][356] /* ty=Tensor[(304, 1, 1, 1056), float16] */, meta[relay.Constant][357] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %433 = nn.pad(%432, meta[relay.Constant][358] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %434 = @tvmgen_default_cutlass_main_336(%433, meta[relay.Constant][359] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][360] /* ty=Tensor[(1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %435 = nn.pad(%434, meta[relay.Constant][361] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %436 = layout_transform(meta[relay.Constant][362] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %437 = nn.conv2d(%435, %436, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %438 = add(%437, meta[relay.Constant][363] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %439 = sigmoid(%438) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %440 = multiply(%438, %439) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %442 = mean(%441, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %443 = cast(%442, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %444 = @tvmgen_default_cutlass_main_339(%443, meta[relay.Constant][364] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][365] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %445 = @tvmgen_default_cutlass_main_342(%444, meta[relay.Constant][366] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][367] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %446 = multiply(%445, %440) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %447 = nn.pad(%446, meta[relay.Constant][368] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %448 = @tvmgen_default_cutlass_main_345(%447, meta[relay.Constant][369] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][370] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %449 = add(%448, %432) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %450 = nn.pad(%449, meta[relay.Constant][371] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %451 = @tvmgen_default_cutlass_main_348(%450, meta[relay.Constant][372] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][373] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %452 = nn.pad(%451, meta[relay.Constant][374] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %453 = layout_transform(meta[relay.Constant][375] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %454 = nn.conv2d(%452, %453, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %455 = add(%454, meta[relay.Constant][376] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %456 = sigmoid(%455) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %457 = multiply(%455, %456) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %459 = mean(%458, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %460 = cast(%459, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %461 = @tvmgen_default_cutlass_main_351(%460, meta[relay.Constant][377] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][378] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %462 = @tvmgen_default_cutlass_main_354(%461, meta[relay.Constant][379] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][380] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %463 = multiply(%462, %457) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %464 = nn.pad(%463, meta[relay.Constant][381] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %465 = @tvmgen_default_cutlass_main_357(%464, meta[relay.Constant][382] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][383] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %466 = add(%465, %449) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %467 = nn.pad(%466, meta[relay.Constant][384] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %468 = @tvmgen_default_cutlass_main_360(%467, meta[relay.Constant][385] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][386] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %469 = nn.pad(%468, meta[relay.Constant][387] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %470 = layout_transform(meta[relay.Constant][388] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %471 = nn.conv2d(%469, %470, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %472 = add(%471, meta[relay.Constant][389] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %473 = sigmoid(%472) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %474 = multiply(%472, %473) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %476 = mean(%475, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %477 = cast(%476, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %478 = @tvmgen_default_cutlass_main_363(%477, meta[relay.Constant][390] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][391] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %479 = @tvmgen_default_cutlass_main_366(%478, meta[relay.Constant][392] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][393] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %480 = multiply(%479, %474) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %481 = nn.pad(%480, meta[relay.Constant][394] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %482 = @tvmgen_default_cutlass_main_369(%481, meta[relay.Constant][395] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][396] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %483 = add(%482, %466) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %484 = nn.pad(%483, meta[relay.Constant][397] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %485 = @tvmgen_default_cutlass_main_372(%484, meta[relay.Constant][398] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][399] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %486 = nn.pad(%485, meta[relay.Constant][400] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %487 = layout_transform(meta[relay.Constant][401] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %488 = nn.conv2d(%486, %487, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %489 = add(%488, meta[relay.Constant][402] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %490 = sigmoid(%489) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %491 = multiply(%489, %490) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %493 = mean(%492, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %494 = cast(%493, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %495 = @tvmgen_default_cutlass_main_375(%494, meta[relay.Constant][403] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][404] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %496 = @tvmgen_default_cutlass_main_378(%495, meta[relay.Constant][405] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][406] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %497 = multiply(%496, %491) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %498 = nn.pad(%497, meta[relay.Constant][407] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %499 = @tvmgen_default_cutlass_main_381(%498, meta[relay.Constant][408] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][409] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %500 = add(%499, %483) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %501 = nn.pad(%500, meta[relay.Constant][410] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %502 = @tvmgen_default_cutlass_main_384(%501, meta[relay.Constant][411] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][412] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %503 = nn.pad(%502, meta[relay.Constant][413] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %504 = layout_transform(meta[relay.Constant][414] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %505 = nn.conv2d(%503, %504, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %506 = add(%505, meta[relay.Constant][415] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %507 = sigmoid(%506) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %508 = multiply(%506, %507) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %510 = mean(%509, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %511 = cast(%510, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %512 = @tvmgen_default_cutlass_main_387(%511, meta[relay.Constant][416] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][417] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %513 = @tvmgen_default_cutlass_main_390(%512, meta[relay.Constant][418] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][419] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %514 = multiply(%513, %508) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %515 = nn.pad(%514, meta[relay.Constant][420] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %516 = @tvmgen_default_cutlass_main_393(%515, meta[relay.Constant][421] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][422] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %517 = add(%516, %500) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %518 = nn.pad(%517, meta[relay.Constant][423] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %519 = @tvmgen_default_cutlass_main_396(%518, meta[relay.Constant][424] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][425] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %520 = nn.pad(%519, meta[relay.Constant][426] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %521 = layout_transform(meta[relay.Constant][427] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %522 = nn.conv2d(%520, %521, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %523 = add(%522, meta[relay.Constant][428] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %524 = sigmoid(%523) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %525 = multiply(%523, %524) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %527 = mean(%526, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %528 = cast(%527, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %529 = @tvmgen_default_cutlass_main_399(%528, meta[relay.Constant][429] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][430] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %530 = @tvmgen_default_cutlass_main_402(%529, meta[relay.Constant][431] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][432] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %531 = multiply(%530, %525) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %532 = nn.pad(%531, meta[relay.Constant][433] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %533 = @tvmgen_default_cutlass_main_405(%532, meta[relay.Constant][434] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][435] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %534 = add(%533, %517) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %535 = nn.pad(%534, meta[relay.Constant][436] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %536 = @tvmgen_default_cutlass_main_408(%535, meta[relay.Constant][437] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][438] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %537 = nn.pad(%536, meta[relay.Constant][439] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %538 = layout_transform(meta[relay.Constant][440] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %539 = nn.conv2d(%537, %538, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %540 = add(%539, meta[relay.Constant][441] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %541 = sigmoid(%540) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %542 = multiply(%540, %541) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %544 = mean(%543, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %545 = cast(%544, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %546 = @tvmgen_default_cutlass_main_411(%545, meta[relay.Constant][442] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][443] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %547 = @tvmgen_default_cutlass_main_414(%546, meta[relay.Constant][444] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][445] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %548 = multiply(%547, %542) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %549 = nn.pad(%548, meta[relay.Constant][446] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %550 = @tvmgen_default_cutlass_main_417(%549, meta[relay.Constant][447] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][448] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %551 = add(%550, %534) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %552 = nn.pad(%551, meta[relay.Constant][449] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %553 = @tvmgen_default_cutlass_main_420(%552, meta[relay.Constant][450] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][451] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %554 = nn.pad(%553, meta[relay.Constant][452] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %555 = layout_transform(meta[relay.Constant][453] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %556 = nn.conv2d(%554, %555, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %557 = add(%556, meta[relay.Constant][454] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %558 = sigmoid(%557) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %559 = multiply(%557, %558) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %561 = mean(%560, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %562 = cast(%561, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %563 = @tvmgen_default_cutlass_main_423(%562, meta[relay.Constant][455] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][456] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %564 = @tvmgen_default_cutlass_main_426(%563, meta[relay.Constant][457] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][458] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %565 = multiply(%564, %559) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %566 = nn.pad(%565, meta[relay.Constant][459] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %567 = @tvmgen_default_cutlass_main_429(%566, meta[relay.Constant][460] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][461] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %568 = add(%567, %551) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %569 = nn.pad(%568, meta[relay.Constant][462] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %570 = @tvmgen_default_cutlass_main_432(%569, meta[relay.Constant][463] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][464] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %571 = nn.pad(%570, meta[relay.Constant][465] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %572 = layout_transform(meta[relay.Constant][466] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %573 = nn.conv2d(%571, %572, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %574 = add(%573, meta[relay.Constant][467] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %575 = sigmoid(%574) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %576 = multiply(%574, %575) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %578 = mean(%577, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %579 = cast(%578, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %580 = @tvmgen_default_cutlass_main_435(%579, meta[relay.Constant][468] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][469] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %581 = @tvmgen_default_cutlass_main_438(%580, meta[relay.Constant][470] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][471] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %582 = multiply(%581, %576) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %583 = nn.pad(%582, meta[relay.Constant][472] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %584 = @tvmgen_default_cutlass_main_441(%583, meta[relay.Constant][473] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][474] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %585 = add(%584, %568) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %586 = nn.pad(%585, meta[relay.Constant][475] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %587 = @tvmgen_default_cutlass_main_444(%586, meta[relay.Constant][476] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][477] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %588 = nn.pad(%587, meta[relay.Constant][478] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %589 = layout_transform(meta[relay.Constant][479] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %590 = nn.conv2d(%588, %589, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %591 = add(%590, meta[relay.Constant][480] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %592 = sigmoid(%591) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %593 = multiply(%591, %592) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %595 = mean(%594, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %596 = cast(%595, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %597 = @tvmgen_default_cutlass_main_447(%596, meta[relay.Constant][481] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][482] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %598 = @tvmgen_default_cutlass_main_450(%597, meta[relay.Constant][483] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][484] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %599 = multiply(%598, %593) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %600 = nn.pad(%599, meta[relay.Constant][485] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %601 = @tvmgen_default_cutlass_main_453(%600, meta[relay.Constant][486] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][487] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %602 = add(%601, %585) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %603 = nn.pad(%602, meta[relay.Constant][488] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %604 = @tvmgen_default_cutlass_main_456(%603, meta[relay.Constant][489] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][490] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %605 = nn.pad(%604, meta[relay.Constant][491] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %606 = layout_transform(meta[relay.Constant][492] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %607 = nn.conv2d(%605, %606, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %608 = add(%607, meta[relay.Constant][493] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %609 = sigmoid(%608) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %610 = multiply(%608, %609) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %612 = mean(%611, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %613 = cast(%612, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %614 = @tvmgen_default_cutlass_main_459(%613, meta[relay.Constant][494] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][495] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %615 = @tvmgen_default_cutlass_main_462(%614, meta[relay.Constant][496] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][497] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %616 = multiply(%615, %610) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %617 = nn.pad(%616, meta[relay.Constant][498] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %618 = @tvmgen_default_cutlass_main_465(%617, meta[relay.Constant][499] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][500] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %619 = add(%618, %602) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %620 = nn.pad(%619, meta[relay.Constant][501] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %621 = @tvmgen_default_cutlass_main_468(%620, meta[relay.Constant][502] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][503] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %622 = nn.pad(%621, meta[relay.Constant][504] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %623 = layout_transform(meta[relay.Constant][505] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %624 = nn.conv2d(%622, %623, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %625 = add(%624, meta[relay.Constant][506] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %626 = sigmoid(%625) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %627 = multiply(%625, %626) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %629 = mean(%628, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %630 = cast(%629, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %631 = @tvmgen_default_cutlass_main_471(%630, meta[relay.Constant][507] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][508] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %632 = @tvmgen_default_cutlass_main_474(%631, meta[relay.Constant][509] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][510] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %633 = multiply(%632, %627) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %634 = nn.pad(%633, meta[relay.Constant][511] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %635 = @tvmgen_default_cutlass_main_477(%634, meta[relay.Constant][512] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][513] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %636 = add(%635, %619) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %637 = nn.pad(%636, meta[relay.Constant][514] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %638 = @tvmgen_default_cutlass_main_480(%637, meta[relay.Constant][515] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][516] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %639 = nn.pad(%638, meta[relay.Constant][517] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %640 = layout_transform(meta[relay.Constant][518] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %641 = nn.conv2d(%639, %640, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %642 = add(%641, meta[relay.Constant][519] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %643 = sigmoid(%642) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %644 = multiply(%642, %643) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %646 = mean(%645, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %647 = cast(%646, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %648 = @tvmgen_default_cutlass_main_483(%647, meta[relay.Constant][520] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][521] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %649 = @tvmgen_default_cutlass_main_486(%648, meta[relay.Constant][522] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][523] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %650 = multiply(%649, %644) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %651 = nn.pad(%650, meta[relay.Constant][524] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %652 = @tvmgen_default_cutlass_main_489(%651, meta[relay.Constant][525] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][526] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %653 = add(%652, %636) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %654 = nn.pad(%653, meta[relay.Constant][527] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %655 = @tvmgen_default_cutlass_main_492(%654, meta[relay.Constant][528] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][529] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %656 = nn.pad(%655, meta[relay.Constant][530] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %657 = layout_transform(meta[relay.Constant][531] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %658 = nn.conv2d(%656, %657, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %659 = add(%658, meta[relay.Constant][532] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %660 = sigmoid(%659) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %661 = multiply(%659, %660) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %663 = mean(%662, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %664 = cast(%663, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %665 = @tvmgen_default_cutlass_main_495(%664, meta[relay.Constant][533] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][534] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %666 = @tvmgen_default_cutlass_main_498(%665, meta[relay.Constant][535] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][536] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %667 = multiply(%666, %661) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %668 = nn.pad(%667, meta[relay.Constant][537] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %669 = @tvmgen_default_cutlass_main_501(%668, meta[relay.Constant][538] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][539] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %670 = add(%669, %653) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %671 = nn.pad(%670, meta[relay.Constant][540] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %672 = @tvmgen_default_cutlass_main_504(%671, meta[relay.Constant][541] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][542] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %673 = nn.pad(%672, meta[relay.Constant][543] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %674 = layout_transform(meta[relay.Constant][544] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %675 = nn.conv2d(%673, %674, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %676 = add(%675, meta[relay.Constant][545] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %677 = sigmoid(%676) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %678 = multiply(%676, %677) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %679 = cast(%678, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %680 = mean(%679, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %681 = cast(%680, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %682 = @tvmgen_default_cutlass_main_507(%681, meta[relay.Constant][546] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][547] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %683 = @tvmgen_default_cutlass_main_510(%682, meta[relay.Constant][548] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][549] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %684 = multiply(%683, %678) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %685 = nn.pad(%684, meta[relay.Constant][550] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %686 = @tvmgen_default_cutlass_main_513(%685, meta[relay.Constant][551] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][552] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %687 = add(%686, %670) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %688 = nn.pad(%687, meta[relay.Constant][553] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %689 = @tvmgen_default_cutlass_main_516(%688, meta[relay.Constant][554] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][555] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %690 = nn.pad(%689, meta[relay.Constant][556] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %691 = layout_transform(meta[relay.Constant][557] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %692 = nn.conv2d(%690, %691, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %693 = add(%692, meta[relay.Constant][558] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %694 = sigmoid(%693) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %695 = multiply(%693, %694) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %697 = mean(%696, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %698 = cast(%697, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %699 = @tvmgen_default_cutlass_main_519(%698, meta[relay.Constant][559] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][560] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %700 = @tvmgen_default_cutlass_main_522(%699, meta[relay.Constant][561] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][562] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %701 = multiply(%700, %695) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %702 = nn.pad(%701, meta[relay.Constant][563] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %703 = @tvmgen_default_cutlass_main_525(%702, meta[relay.Constant][564] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][565] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %704 = add(%703, %687) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %705 = nn.pad(%704, meta[relay.Constant][566] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %706 = @tvmgen_default_cutlass_main_528(%705, meta[relay.Constant][567] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][568] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %707 = nn.pad(%706, meta[relay.Constant][569] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %708 = layout_transform(meta[relay.Constant][570] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %709 = nn.conv2d(%707, %708, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %710 = add(%709, meta[relay.Constant][571] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %711 = sigmoid(%710) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %712 = multiply(%710, %711) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %714 = mean(%713, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %715 = cast(%714, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %716 = @tvmgen_default_cutlass_main_531(%715, meta[relay.Constant][572] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][573] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %717 = @tvmgen_default_cutlass_main_534(%716, meta[relay.Constant][574] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][575] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %718 = multiply(%717, %712) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %719 = nn.pad(%718, meta[relay.Constant][576] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %720 = @tvmgen_default_cutlass_main_537(%719, meta[relay.Constant][577] /* ty=Tensor[(304, 1, 1, 1824), float16] */, meta[relay.Constant][578] /* ty=Tensor[(1, 1, 1, 304), float16] */) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %721 = add(%720, %704) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %722 = nn.pad(%721, meta[relay.Constant][579] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 304), float16] */;
  %723 = @tvmgen_default_cutlass_main_540(%722, meta[relay.Constant][580] /* ty=Tensor[(1824, 1, 1, 304), float16] */, meta[relay.Constant][581] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %724 = nn.pad(%723, meta[relay.Constant][582] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 1824), float16] */;
  %725 = layout_transform(meta[relay.Constant][583] /* ty=Tensor[(1824, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 1824, 1), float16] */;
  %726 = nn.conv2d(%724, %725, padding=[0, 0, 0, 0], groups=1824, channels=1824, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %727 = add(%726, meta[relay.Constant][584] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %728 = sigmoid(%727) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %729 = multiply(%727, %728) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(8, 7, 7, 1824), float32] */;
  %731 = mean(%730, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 1824), float32] */;
  %732 = cast(%731, dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %733 = @tvmgen_default_cutlass_main_543(%732, meta[relay.Constant][585] /* ty=Tensor[(76, 1, 1, 1824), float16] */, meta[relay.Constant][586] /* ty=Tensor[(1, 1, 1, 76), float16] */) /* ty=Tensor[(8, 1, 1, 76), float16] */;
  %734 = @tvmgen_default_cutlass_main_546(%733, meta[relay.Constant][587] /* ty=Tensor[(1824, 1, 1, 76), float16] */, meta[relay.Constant][588] /* ty=Tensor[(1, 1, 1, 1824), float16] */) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
  %735 = multiply(%734, %729) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %736 = nn.pad(%735, meta[relay.Constant][589] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
  %737 = @tvmgen_default_cutlass_main_549(%736, meta[relay.Constant][590] /* ty=Tensor[(512, 1, 1, 1824), float16] */, meta[relay.Constant][591] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %738 = nn.pad(%737, meta[relay.Constant][592] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %739 = @tvmgen_default_cutlass_main_552(%738, meta[relay.Constant][593] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][594] /* ty=Tensor[(3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %740 = nn.pad(%739, meta[relay.Constant][595] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 3072), float16] */;
  %741 = layout_transform(meta[relay.Constant][596] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %742 = nn.conv2d(%740, %741, padding=[0, 0, 0, 0], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %743 = add(%742, meta[relay.Constant][597] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %744 = sigmoid(%743) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %745 = multiply(%743, %744) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %747 = mean(%746, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %748 = cast(%747, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %749 = @tvmgen_default_cutlass_main_555(%748, meta[relay.Constant][598] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][599] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %750 = @tvmgen_default_cutlass_main_558(%749, meta[relay.Constant][600] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][601] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %751 = multiply(%750, %745) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %752 = nn.pad(%751, meta[relay.Constant][602] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %753 = @tvmgen_default_cutlass_main_561(%752, meta[relay.Constant][603] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][604] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %754 = add(%753, %737) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %755 = nn.pad(%754, meta[relay.Constant][605] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %756 = @tvmgen_default_cutlass_main_564(%755, meta[relay.Constant][606] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][607] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %757 = nn.pad(%756, meta[relay.Constant][608] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 3072), float16] */;
  %758 = layout_transform(meta[relay.Constant][609] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %759 = nn.conv2d(%757, %758, padding=[0, 0, 0, 0], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %760 = add(%759, meta[relay.Constant][610] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %761 = sigmoid(%760) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %762 = multiply(%760, %761) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %764 = mean(%763, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %765 = cast(%764, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %766 = @tvmgen_default_cutlass_main_567(%765, meta[relay.Constant][611] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][612] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %767 = @tvmgen_default_cutlass_main_570(%766, meta[relay.Constant][613] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][614] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %768 = multiply(%767, %762) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %769 = nn.pad(%768, meta[relay.Constant][615] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %770 = @tvmgen_default_cutlass_main_573(%769, meta[relay.Constant][616] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][617] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %771 = add(%770, %754) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %772 = nn.pad(%771, meta[relay.Constant][618] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %773 = @tvmgen_default_cutlass_main_576(%772, meta[relay.Constant][619] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][620] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %774 = nn.pad(%773, meta[relay.Constant][621] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 3072), float16] */;
  %775 = layout_transform(meta[relay.Constant][622] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %776 = nn.conv2d(%774, %775, padding=[0, 0, 0, 0], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %777 = add(%776, meta[relay.Constant][623] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %778 = sigmoid(%777) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %779 = multiply(%777, %778) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %781 = mean(%780, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %782 = cast(%781, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %783 = @tvmgen_default_cutlass_main_579(%782, meta[relay.Constant][624] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][625] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %784 = @tvmgen_default_cutlass_main_582(%783, meta[relay.Constant][626] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][627] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %785 = multiply(%784, %779) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %786 = nn.pad(%785, meta[relay.Constant][628] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %787 = @tvmgen_default_cutlass_main_585(%786, meta[relay.Constant][629] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][630] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %788 = add(%787, %771) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %789 = nn.pad(%788, meta[relay.Constant][631] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %790 = @tvmgen_default_cutlass_main_588(%789, meta[relay.Constant][632] /* ty=Tensor[(3072, 1, 1, 512), float16] */, meta[relay.Constant][633] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %791 = nn.pad(%790, meta[relay.Constant][634] /* ty=float16 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(8, 9, 9, 3072), float16] */;
  %792 = layout_transform(meta[relay.Constant][635] /* ty=Tensor[(3072, 3, 3, 1), float16] */, src_layout="OHWI", dst_layout="HWOI") /* ty=Tensor[(3, 3, 3072, 1), float16] */;
  %793 = nn.conv2d(%791, %792, padding=[0, 0, 0, 0], groups=3072, channels=3072, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWOI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %794 = add(%793, meta[relay.Constant][636] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %795 = sigmoid(%794) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %796 = multiply(%794, %795) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(8, 7, 7, 3072), float32] */;
  %798 = mean(%797, axis=[1, 2], keepdims=True) /* ty=Tensor[(8, 1, 1, 3072), float32] */;
  %799 = cast(%798, dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %800 = @tvmgen_default_cutlass_main_591(%799, meta[relay.Constant][637] /* ty=Tensor[(128, 1, 1, 3072), float16] */, meta[relay.Constant][638] /* ty=Tensor[(1, 1, 1, 128), float16] */) /* ty=Tensor[(8, 1, 1, 128), float16] */;
  %801 = @tvmgen_default_cutlass_main_594(%800, meta[relay.Constant][639] /* ty=Tensor[(3072, 1, 1, 128), float16] */, meta[relay.Constant][640] /* ty=Tensor[(1, 1, 1, 3072), float16] */) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
  %802 = multiply(%801, %796) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %803 = nn.pad(%802, meta[relay.Constant][641] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
  %804 = @tvmgen_default_cutlass_main_597(%803, meta[relay.Constant][642] /* ty=Tensor[(512, 1, 1, 3072), float16] */, meta[relay.Constant][643] /* ty=Tensor[(1, 1, 1, 512), float16] */) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %805 = add(%804, %788) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %806 = nn.pad(%805, meta[relay.Constant][644] /* ty=float16 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(8, 7, 7, 512), float16] */;
  %807 = @tvmgen_default_cutlass_main_600(%806, meta[relay.Constant][645] /* ty=Tensor[(1280, 1, 1, 512), float16] */, meta[relay.Constant][646] /* ty=Tensor[(1, 1, 1, 1280), float16] */) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
  %808 = transpose(%807, axes=[0, 1, 2, 3]) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(8, 7, 7, 1280), float32] */;
  %810 = mean(%809, axis=[1, 2]) /* ty=Tensor[(8, 1280), float32] */;
  %811 = cast(%810, dtype="float16") /* ty=Tensor[(8, 1280), float16] */;
  @tvmgen_default_cutlass_main_603(%811, meta[relay.Constant][647] /* ty=Tensor[(1000, 1280), float16] */, meta[relay.Constant][648] /* ty=Tensor[(1, 1000), float16] */) /* ty=Tensor[(8, 1000), float16] */
}

def @tvmgen_default_cutlass_main_0(%cutlass_0_i0: Tensor[(8, 225, 225, 3), float16], %cutlass_0_i1: Tensor[(24, 3, 3, 3), float16], %cutlass_0_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_0", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %815 = fn (%FunctionVar_146_0: Tensor[(8, 225, 225, 3), float16], %FunctionVar_146_1: Tensor[(24, 3, 3, 3), float16], %FunctionVar_146_2: Tensor[(1, 1, 1, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 112, 112, 24), float16] {
    %812 = nn.conv2d(%FunctionVar_146_0, %FunctionVar_146_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %813 = add(%812, %FunctionVar_146_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %814 = sigmoid(%813) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    multiply(%813, %814) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %815(%cutlass_0_i0, %cutlass_0_i1, %cutlass_0_i2) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_102(%cutlass_102_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_102_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_102_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_102", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %818 = fn (%FunctionVar_82_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_82_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_82_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %816 = nn.conv2d(%FunctionVar_82_0, %FunctionVar_82_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %817 = add(%816, %FunctionVar_82_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%817) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %818(%cutlass_102_i0, %cutlass_102_i1, %cutlass_102_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_105(%cutlass_105_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_105_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_105_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_105", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %820 = fn (%FunctionVar_82_01: Tensor[(8, 14, 14, 640), float16], %FunctionVar_82_11: Tensor[(160, 1, 1, 640), float16], %FunctionVar_82_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %819 = nn.conv2d(%FunctionVar_82_01, %FunctionVar_82_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%819, %FunctionVar_82_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %820(%cutlass_105_i0, %cutlass_105_i1, %cutlass_105_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_108(%cutlass_108_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_108_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_108_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_108", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %824 = fn (%FunctionVar_123_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_123_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_123_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %821 = nn.conv2d(%FunctionVar_123_0, %FunctionVar_123_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %822 = add(%821, %FunctionVar_123_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %823 = sigmoid(%822) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%822, %823) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %824(%cutlass_108_i0, %cutlass_108_i1, %cutlass_108_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_111(%cutlass_111_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_111_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_111_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_111", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %828 = fn (%FunctionVar_121_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_121_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_121_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %825 = nn.conv2d(%FunctionVar_121_0, %FunctionVar_121_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %826 = add(%825, %FunctionVar_121_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %827 = sigmoid(%826) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%826, %827) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %828(%cutlass_111_i0, %cutlass_111_i1, %cutlass_111_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_114(%cutlass_114_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_114_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_114_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_114", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %831 = fn (%FunctionVar_80_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_80_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_80_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %829 = nn.conv2d(%FunctionVar_80_0, %FunctionVar_80_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %830 = add(%829, %FunctionVar_80_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%830) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %831(%cutlass_114_i0, %cutlass_114_i1, %cutlass_114_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_117(%cutlass_117_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_117_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_117_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_117", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %833 = fn (%FunctionVar_80_01: Tensor[(8, 14, 14, 640), float16], %FunctionVar_80_11: Tensor[(160, 1, 1, 640), float16], %FunctionVar_80_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %832 = nn.conv2d(%FunctionVar_80_01, %FunctionVar_80_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%832, %FunctionVar_80_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %833(%cutlass_117_i0, %cutlass_117_i1, %cutlass_117_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_12(%cutlass_12_i0: Tensor[(8, 113, 113, 24), float16], %cutlass_12_i1: Tensor[(96, 3, 3, 24), float16], %cutlass_12_i2: Tensor[(1, 1, 1, 96), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_12", Primitive=1) -> Tensor[(8, 56, 56, 96), float16] {
  %837 = fn (%FunctionVar_142_0: Tensor[(8, 113, 113, 24), float16], %FunctionVar_142_1: Tensor[(96, 3, 3, 24), float16], %FunctionVar_142_2: Tensor[(1, 1, 1, 96), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 96), float16] {
    %834 = nn.conv2d(%FunctionVar_142_0, %FunctionVar_142_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 96), float16] */;
    %835 = add(%834, %FunctionVar_142_2) /* ty=Tensor[(8, 56, 56, 96), float16] */;
    %836 = sigmoid(%835) /* ty=Tensor[(8, 56, 56, 96), float16] */;
    multiply(%835, %836) /* ty=Tensor[(8, 56, 56, 96), float16] */
  };
  %837(%cutlass_12_i0, %cutlass_12_i1, %cutlass_12_i2) /* ty=Tensor[(8, 56, 56, 96), float16] */
}

def @tvmgen_default_cutlass_main_120(%cutlass_120_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_120_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_120_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_120", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %841 = fn (%FunctionVar_120_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_120_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_120_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %838 = nn.conv2d(%FunctionVar_120_0, %FunctionVar_120_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %839 = add(%838, %FunctionVar_120_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %840 = sigmoid(%839) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%839, %840) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %841(%cutlass_120_i0, %cutlass_120_i1, %cutlass_120_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_123(%cutlass_123_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_123_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_123_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_123", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %845 = fn (%FunctionVar_118_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_118_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_118_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %842 = nn.conv2d(%FunctionVar_118_0, %FunctionVar_118_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %843 = add(%842, %FunctionVar_118_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %844 = sigmoid(%843) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%843, %844) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %845(%cutlass_123_i0, %cutlass_123_i1, %cutlass_123_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_126(%cutlass_126_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_126_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_126_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_126", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %848 = fn (%FunctionVar_78_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_78_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_78_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %846 = nn.conv2d(%FunctionVar_78_0, %FunctionVar_78_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %847 = add(%846, %FunctionVar_78_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%847) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %848(%cutlass_126_i0, %cutlass_126_i1, %cutlass_126_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_129(%cutlass_129_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_129_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_129_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_129", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %850 = fn (%FunctionVar_78_01: Tensor[(8, 14, 14, 640), float16], %FunctionVar_78_11: Tensor[(160, 1, 1, 640), float16], %FunctionVar_78_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %849 = nn.conv2d(%FunctionVar_78_01, %FunctionVar_78_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%849, %FunctionVar_78_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %850(%cutlass_129_i0, %cutlass_129_i1, %cutlass_129_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_132(%cutlass_132_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_132_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_132_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_132", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %854 = fn (%FunctionVar_117_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_117_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_117_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %851 = nn.conv2d(%FunctionVar_117_0, %FunctionVar_117_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %852 = add(%851, %FunctionVar_117_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %853 = sigmoid(%852) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%852, %853) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %854(%cutlass_132_i0, %cutlass_132_i1, %cutlass_132_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_135(%cutlass_135_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_135_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_135_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_135", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %858 = fn (%FunctionVar_115_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_115_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_115_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %855 = nn.conv2d(%FunctionVar_115_0, %FunctionVar_115_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %856 = add(%855, %FunctionVar_115_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %857 = sigmoid(%856) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%856, %857) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %858(%cutlass_135_i0, %cutlass_135_i1, %cutlass_135_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_138(%cutlass_138_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_138_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_138_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_138", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %861 = fn (%FunctionVar_76_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_76_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_76_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %859 = nn.conv2d(%FunctionVar_76_0, %FunctionVar_76_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %860 = add(%859, %FunctionVar_76_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%860) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %861(%cutlass_138_i0, %cutlass_138_i1, %cutlass_138_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_141(%cutlass_141_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_141_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_141_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_141", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %863 = fn (%FunctionVar_76_01: Tensor[(8, 14, 14, 640), float16], %FunctionVar_76_11: Tensor[(160, 1, 1, 640), float16], %FunctionVar_76_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %862 = nn.conv2d(%FunctionVar_76_01, %FunctionVar_76_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%862, %FunctionVar_76_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %863(%cutlass_141_i0, %cutlass_141_i1, %cutlass_141_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_144(%cutlass_144_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_144_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_144_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_144", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %867 = fn (%FunctionVar_114_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_114_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_114_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %864 = nn.conv2d(%FunctionVar_114_0, %FunctionVar_114_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %865 = add(%864, %FunctionVar_114_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %866 = sigmoid(%865) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%865, %866) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %867(%cutlass_144_i0, %cutlass_144_i1, %cutlass_144_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_147(%cutlass_147_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_147_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_147_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_147", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %871 = fn (%FunctionVar_112_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_112_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_112_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %868 = nn.conv2d(%FunctionVar_112_0, %FunctionVar_112_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %869 = add(%868, %FunctionVar_112_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %870 = sigmoid(%869) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%869, %870) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %871(%cutlass_147_i0, %cutlass_147_i1, %cutlass_147_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_15(%cutlass_15_i0: Tensor[(8, 56, 56, 96), float16], %cutlass_15_i1: Tensor[(48, 1, 1, 96), float16], %cutlass_15_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_15", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %873 = fn (%FunctionVar_97_0: Tensor[(8, 56, 56, 96), float16], %FunctionVar_97_1: Tensor[(48, 1, 1, 96), float16], %FunctionVar_97_2: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %872 = nn.conv2d(%FunctionVar_97_0, %FunctionVar_97_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%872, %FunctionVar_97_2) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %873(%cutlass_15_i0, %cutlass_15_i1, %cutlass_15_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_150(%cutlass_150_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_150_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_150_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_150", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %876 = fn (%FunctionVar_74_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_74_1: Tensor[(640, 1, 1, 40), float16], %FunctionVar_74_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %874 = nn.conv2d(%FunctionVar_74_0, %FunctionVar_74_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %875 = add(%874, %FunctionVar_74_2) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%875) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %876(%cutlass_150_i0, %cutlass_150_i1, %cutlass_150_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_153(%cutlass_153_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_153_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_153_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_153", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %878 = fn (%FunctionVar_74_01: Tensor[(8, 14, 14, 640), float16], %FunctionVar_74_11: Tensor[(160, 1, 1, 640), float16], %FunctionVar_74_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %877 = nn.conv2d(%FunctionVar_74_01, %FunctionVar_74_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%877, %FunctionVar_74_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %878(%cutlass_153_i0, %cutlass_153_i1, %cutlass_153_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_156(%cutlass_156_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_156_i1: Tensor[(960, 1, 1, 160), float16], %cutlass_156_i2: Tensor[(1, 1, 1, 960), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_156", Primitive=1) -> Tensor[(8, 14, 14, 960), float16] {
  %882 = fn (%FunctionVar_111_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_111_1: Tensor[(960, 1, 1, 160), float16], %FunctionVar_111_2: Tensor[(1, 1, 1, 960), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 960), float16] {
    %879 = nn.conv2d(%FunctionVar_111_0, %FunctionVar_111_1, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 960), float16] */;
    %880 = add(%879, %FunctionVar_111_2) /* ty=Tensor[(8, 14, 14, 960), float16] */;
    %881 = sigmoid(%880) /* ty=Tensor[(8, 14, 14, 960), float16] */;
    multiply(%880, %881) /* ty=Tensor[(8, 14, 14, 960), float16] */
  };
  %882(%cutlass_156_i0, %cutlass_156_i1, %cutlass_156_i2) /* ty=Tensor[(8, 14, 14, 960), float16] */
}

def @tvmgen_default_cutlass_main_159(%cutlass_159_i0: Tensor[(8, 1, 1, 960), float16], %cutlass_159_i1: Tensor[(40, 1, 1, 960), float16], %cutlass_159_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_159", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %886 = fn (%FunctionVar_109_0: Tensor[(8, 1, 1, 960), float16], %FunctionVar_109_1: Tensor[(40, 1, 1, 960), float16], %FunctionVar_109_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %883 = nn.conv2d(%FunctionVar_109_0, %FunctionVar_109_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %884 = add(%883, %FunctionVar_109_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %885 = sigmoid(%884) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%884, %885) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %886(%cutlass_159_i0, %cutlass_159_i1, %cutlass_159_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_162(%cutlass_162_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_162_i1: Tensor[(960, 1, 1, 40), float16], %cutlass_162_i2: Tensor[(1, 1, 1, 960), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_162", Primitive=1) -> Tensor[(8, 1, 1, 960), float16] {
  %889 = fn (%FunctionVar_72_0: Tensor[(8, 1, 1, 40), float16], %FunctionVar_72_1: Tensor[(960, 1, 1, 40), float16], %FunctionVar_72_2: Tensor[(1, 1, 1, 960), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 960), float16] {
    %887 = nn.conv2d(%FunctionVar_72_0, %FunctionVar_72_1, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 960), float16] */;
    %888 = add(%887, %FunctionVar_72_2) /* ty=Tensor[(8, 1, 1, 960), float16] */;
    sigmoid(%888) /* ty=Tensor[(8, 1, 1, 960), float16] */
  };
  %889(%cutlass_162_i0, %cutlass_162_i1, %cutlass_162_i2) /* ty=Tensor[(8, 1, 1, 960), float16] */
}

def @tvmgen_default_cutlass_main_165(%cutlass_165_i0: Tensor[(8, 14, 14, 960), float16], %cutlass_165_i1: Tensor[(176, 1, 1, 960), float16], %cutlass_165_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_165", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %891 = fn (%FunctionVar_72_01: Tensor[(8, 14, 14, 960), float16], %FunctionVar_72_11: Tensor[(176, 1, 1, 960), float16], %FunctionVar_72_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %890 = nn.conv2d(%FunctionVar_72_01, %FunctionVar_72_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%890, %FunctionVar_72_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %891(%cutlass_165_i0, %cutlass_165_i1, %cutlass_165_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_168(%cutlass_168_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_168_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_168_i2: Tensor[(1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_168", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %895 = fn (%FunctionVar_108_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_108_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_108_2: Tensor[(1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %892 = nn.conv2d(%FunctionVar_108_0, %FunctionVar_108_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %893 = add(%892, %FunctionVar_108_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %894 = sigmoid(%893) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%893, %894) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %895(%cutlass_168_i0, %cutlass_168_i1, %cutlass_168_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_171(%cutlass_171_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_171_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_171_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_171", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %899 = fn (%FunctionVar_106_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_106_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_106_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %896 = nn.conv2d(%FunctionVar_106_0, %FunctionVar_106_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %897 = add(%896, %FunctionVar_106_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %898 = sigmoid(%897) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%897, %898) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %899(%cutlass_171_i0, %cutlass_171_i1, %cutlass_171_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_174(%cutlass_174_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_174_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_174_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_174", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %902 = fn (%FunctionVar_70_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_70_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_70_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %900 = nn.conv2d(%FunctionVar_70_0, %FunctionVar_70_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %901 = add(%900, %FunctionVar_70_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%901) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %902(%cutlass_174_i0, %cutlass_174_i1, %cutlass_174_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_177(%cutlass_177_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_177_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_177_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_177", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %904 = fn (%FunctionVar_70_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_70_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_70_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %903 = nn.conv2d(%FunctionVar_70_01, %FunctionVar_70_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%903, %FunctionVar_70_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %904(%cutlass_177_i0, %cutlass_177_i1, %cutlass_177_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_18(%cutlass_18_i0: Tensor[(8, 58, 58, 48), float16], %cutlass_18_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_18_i2: Tensor[(192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_18", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %908 = fn (%FunctionVar_141_0: Tensor[(8, 58, 58, 48), float16], %FunctionVar_141_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_141_2: Tensor[(192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %905 = nn.conv2d(%FunctionVar_141_0, %FunctionVar_141_1, padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %906 = add(%905, %FunctionVar_141_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %907 = sigmoid(%906) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%906, %907) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %908(%cutlass_18_i0, %cutlass_18_i1, %cutlass_18_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_180(%cutlass_180_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_180_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_180_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_180", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %912 = fn (%FunctionVar_105_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_105_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_105_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %909 = nn.conv2d(%FunctionVar_105_0, %FunctionVar_105_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %910 = add(%909, %FunctionVar_105_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %911 = sigmoid(%910) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%910, %911) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %912(%cutlass_180_i0, %cutlass_180_i1, %cutlass_180_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_183(%cutlass_183_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_183_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_183_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_183", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %916 = fn (%FunctionVar_103_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_103_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_103_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %913 = nn.conv2d(%FunctionVar_103_0, %FunctionVar_103_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %914 = add(%913, %FunctionVar_103_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %915 = sigmoid(%914) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%914, %915) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %916(%cutlass_183_i0, %cutlass_183_i1, %cutlass_183_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_186(%cutlass_186_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_186_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_186_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_186", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %919 = fn (%FunctionVar_68_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_68_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_68_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %917 = nn.conv2d(%FunctionVar_68_0, %FunctionVar_68_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %918 = add(%917, %FunctionVar_68_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%918) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %919(%cutlass_186_i0, %cutlass_186_i1, %cutlass_186_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_189(%cutlass_189_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_189_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_189_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_189", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %921 = fn (%FunctionVar_68_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_68_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_68_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %920 = nn.conv2d(%FunctionVar_68_01, %FunctionVar_68_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%920, %FunctionVar_68_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %921(%cutlass_189_i0, %cutlass_189_i1, %cutlass_189_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_192(%cutlass_192_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_192_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_192_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_192", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %925 = fn (%FunctionVar_102_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_102_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_102_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %922 = nn.conv2d(%FunctionVar_102_0, %FunctionVar_102_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %923 = add(%922, %FunctionVar_102_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %924 = sigmoid(%923) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%923, %924) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %925(%cutlass_192_i0, %cutlass_192_i1, %cutlass_192_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_195(%cutlass_195_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_195_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_195_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_195", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %929 = fn (%FunctionVar_100_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_100_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_100_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %926 = nn.conv2d(%FunctionVar_100_0, %FunctionVar_100_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %927 = add(%926, %FunctionVar_100_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %928 = sigmoid(%927) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%927, %928) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %929(%cutlass_195_i0, %cutlass_195_i1, %cutlass_195_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_198(%cutlass_198_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_198_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_198_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_198", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %932 = fn (%FunctionVar_66_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_66_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_66_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %930 = nn.conv2d(%FunctionVar_66_0, %FunctionVar_66_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %931 = add(%930, %FunctionVar_66_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%931) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %932(%cutlass_198_i0, %cutlass_198_i1, %cutlass_198_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_201(%cutlass_201_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_201_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_201_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_201", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %934 = fn (%FunctionVar_66_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_66_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_66_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %933 = nn.conv2d(%FunctionVar_66_01, %FunctionVar_66_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%933, %FunctionVar_66_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %934(%cutlass_201_i0, %cutlass_201_i1, %cutlass_201_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_204(%cutlass_204_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_204_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_204_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_204", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %938 = fn (%FunctionVar_99_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_99_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_99_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %935 = nn.conv2d(%FunctionVar_99_0, %FunctionVar_99_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %936 = add(%935, %FunctionVar_99_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %937 = sigmoid(%936) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%936, %937) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %938(%cutlass_204_i0, %cutlass_204_i1, %cutlass_204_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_207(%cutlass_207_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_207_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_207_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_207", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %942 = fn (%FunctionVar_97_01: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_97_11: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_97_21: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %939 = nn.conv2d(%FunctionVar_97_01, %FunctionVar_97_11, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %940 = add(%939, %FunctionVar_97_21) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %941 = sigmoid(%940) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%940, %941) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %942(%cutlass_207_i0, %cutlass_207_i1, %cutlass_207_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_21(%cutlass_21_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_21_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_21_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_21", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %944 = fn (%FunctionVar_96_0: Tensor[(8, 56, 56, 192), float16], %FunctionVar_96_1: Tensor[(48, 1, 1, 192), float16], %FunctionVar_96_2: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %943 = nn.conv2d(%FunctionVar_96_0, %FunctionVar_96_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%943, %FunctionVar_96_2) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %944(%cutlass_21_i0, %cutlass_21_i1, %cutlass_21_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_210(%cutlass_210_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_210_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_210_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_210", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %947 = fn (%FunctionVar_64_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_64_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_64_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %945 = nn.conv2d(%FunctionVar_64_0, %FunctionVar_64_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %946 = add(%945, %FunctionVar_64_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%946) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %947(%cutlass_210_i0, %cutlass_210_i1, %cutlass_210_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_213(%cutlass_213_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_213_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_213_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_213", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %949 = fn (%FunctionVar_64_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_64_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_64_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %948 = nn.conv2d(%FunctionVar_64_01, %FunctionVar_64_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%948, %FunctionVar_64_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %949(%cutlass_213_i0, %cutlass_213_i1, %cutlass_213_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_216(%cutlass_216_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_216_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_216_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_216", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %953 = fn (%FunctionVar_96_01: Tensor[(8, 14, 14, 176), float16], %FunctionVar_96_11: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_96_21: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %950 = nn.conv2d(%FunctionVar_96_01, %FunctionVar_96_11, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %951 = add(%950, %FunctionVar_96_21) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %952 = sigmoid(%951) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%951, %952) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %953(%cutlass_216_i0, %cutlass_216_i1, %cutlass_216_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_219(%cutlass_219_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_219_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_219_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_219", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %957 = fn (%FunctionVar_94_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_94_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_94_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %954 = nn.conv2d(%FunctionVar_94_0, %FunctionVar_94_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %955 = add(%954, %FunctionVar_94_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %956 = sigmoid(%955) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%955, %956) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %957(%cutlass_219_i0, %cutlass_219_i1, %cutlass_219_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_222(%cutlass_222_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_222_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_222_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_222", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %960 = fn (%FunctionVar_62_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_62_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_62_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %958 = nn.conv2d(%FunctionVar_62_0, %FunctionVar_62_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %959 = add(%958, %FunctionVar_62_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%959) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %960(%cutlass_222_i0, %cutlass_222_i1, %cutlass_222_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_225(%cutlass_225_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_225_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_225_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_225", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %962 = fn (%FunctionVar_62_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_62_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_62_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %961 = nn.conv2d(%FunctionVar_62_01, %FunctionVar_62_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%961, %FunctionVar_62_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %962(%cutlass_225_i0, %cutlass_225_i1, %cutlass_225_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_228(%cutlass_228_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_228_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_228_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_228", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %966 = fn (%FunctionVar_93_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_93_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_93_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %963 = nn.conv2d(%FunctionVar_93_0, %FunctionVar_93_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %964 = add(%963, %FunctionVar_93_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %965 = sigmoid(%964) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%964, %965) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %966(%cutlass_228_i0, %cutlass_228_i1, %cutlass_228_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_231(%cutlass_231_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_231_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_231_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_231", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %970 = fn (%FunctionVar_91_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_91_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_91_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %967 = nn.conv2d(%FunctionVar_91_0, %FunctionVar_91_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %968 = add(%967, %FunctionVar_91_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %969 = sigmoid(%968) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%968, %969) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %970(%cutlass_231_i0, %cutlass_231_i1, %cutlass_231_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_234(%cutlass_234_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_234_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_234_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_234", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %973 = fn (%FunctionVar_60_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_60_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_60_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %971 = nn.conv2d(%FunctionVar_60_0, %FunctionVar_60_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %972 = add(%971, %FunctionVar_60_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%972) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %973(%cutlass_234_i0, %cutlass_234_i1, %cutlass_234_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_237(%cutlass_237_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_237_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_237_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_237", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %975 = fn (%FunctionVar_60_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_60_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_60_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %974 = nn.conv2d(%FunctionVar_60_01, %FunctionVar_60_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%974, %FunctionVar_60_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %975(%cutlass_237_i0, %cutlass_237_i1, %cutlass_237_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_24(%cutlass_24_i0: Tensor[(8, 58, 58, 48), float16], %cutlass_24_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_24_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_24", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %979 = fn (%FunctionVar_140_0: Tensor[(8, 58, 58, 48), float16], %FunctionVar_140_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_140_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %976 = nn.conv2d(%FunctionVar_140_0, %FunctionVar_140_1, padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %977 = add(%976, %FunctionVar_140_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %978 = sigmoid(%977) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%977, %978) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %979(%cutlass_24_i0, %cutlass_24_i1, %cutlass_24_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_240(%cutlass_240_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_240_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_240_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_240", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %983 = fn (%FunctionVar_90_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_90_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_90_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %980 = nn.conv2d(%FunctionVar_90_0, %FunctionVar_90_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %981 = add(%980, %FunctionVar_90_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %982 = sigmoid(%981) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%981, %982) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %983(%cutlass_240_i0, %cutlass_240_i1, %cutlass_240_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_243(%cutlass_243_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_243_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_243_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_243", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %987 = fn (%FunctionVar_88_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_88_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_88_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %984 = nn.conv2d(%FunctionVar_88_0, %FunctionVar_88_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %985 = add(%984, %FunctionVar_88_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %986 = sigmoid(%985) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%985, %986) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %987(%cutlass_243_i0, %cutlass_243_i1, %cutlass_243_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_246(%cutlass_246_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_246_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_246_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_246", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %990 = fn (%FunctionVar_58_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_58_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_58_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %988 = nn.conv2d(%FunctionVar_58_0, %FunctionVar_58_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %989 = add(%988, %FunctionVar_58_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%989) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %990(%cutlass_246_i0, %cutlass_246_i1, %cutlass_246_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_249(%cutlass_249_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_249_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_249_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_249", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %992 = fn (%FunctionVar_58_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_58_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_58_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %991 = nn.conv2d(%FunctionVar_58_01, %FunctionVar_58_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%991, %FunctionVar_58_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %992(%cutlass_249_i0, %cutlass_249_i1, %cutlass_249_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_252(%cutlass_252_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_252_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_252_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_252", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %996 = fn (%FunctionVar_87_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_87_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_87_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %993 = nn.conv2d(%FunctionVar_87_0, %FunctionVar_87_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %994 = add(%993, %FunctionVar_87_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %995 = sigmoid(%994) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%994, %995) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %996(%cutlass_252_i0, %cutlass_252_i1, %cutlass_252_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_255(%cutlass_255_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_255_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_255_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_255", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1000 = fn (%FunctionVar_85_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_85_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_85_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %997 = nn.conv2d(%FunctionVar_85_0, %FunctionVar_85_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %998 = add(%997, %FunctionVar_85_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %999 = sigmoid(%998) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%998, %999) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1000(%cutlass_255_i0, %cutlass_255_i1, %cutlass_255_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_258(%cutlass_258_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_258_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_258_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_258", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1003 = fn (%FunctionVar_56_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_56_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_56_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1001 = nn.conv2d(%FunctionVar_56_0, %FunctionVar_56_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1002 = add(%1001, %FunctionVar_56_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1002) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1003(%cutlass_258_i0, %cutlass_258_i1, %cutlass_258_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_261(%cutlass_261_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_261_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_261_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_261", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1005 = fn (%FunctionVar_56_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_56_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_56_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1004 = nn.conv2d(%FunctionVar_56_01, %FunctionVar_56_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1004, %FunctionVar_56_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1005(%cutlass_261_i0, %cutlass_261_i1, %cutlass_261_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_264(%cutlass_264_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_264_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_264_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_264", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1009 = fn (%FunctionVar_84_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_84_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_84_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1006 = nn.conv2d(%FunctionVar_84_0, %FunctionVar_84_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1007 = add(%1006, %FunctionVar_84_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1008 = sigmoid(%1007) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1007, %1008) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1009(%cutlass_264_i0, %cutlass_264_i1, %cutlass_264_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_267(%cutlass_267_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_267_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_267_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_267", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1013 = fn (%FunctionVar_82_02: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_82_12: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_82_22: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1010 = nn.conv2d(%FunctionVar_82_02, %FunctionVar_82_12, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1011 = add(%1010, %FunctionVar_82_22) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1012 = sigmoid(%1011) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1011, %1012) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1013(%cutlass_267_i0, %cutlass_267_i1, %cutlass_267_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_27(%cutlass_27_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_27_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_27_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_27", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %1015 = fn (%FunctionVar_95_0: Tensor[(8, 56, 56, 192), float16], %FunctionVar_95_1: Tensor[(48, 1, 1, 192), float16], %FunctionVar_95_2: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %1014 = nn.conv2d(%FunctionVar_95_0, %FunctionVar_95_1, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%1014, %FunctionVar_95_2) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %1015(%cutlass_27_i0, %cutlass_27_i1, %cutlass_27_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_270(%cutlass_270_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_270_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_270_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_270", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1018 = fn (%FunctionVar_54_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_54_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_54_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1016 = nn.conv2d(%FunctionVar_54_0, %FunctionVar_54_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1017 = add(%1016, %FunctionVar_54_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1017) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1018(%cutlass_270_i0, %cutlass_270_i1, %cutlass_270_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_273(%cutlass_273_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_273_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_273_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_273", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1020 = fn (%FunctionVar_54_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_54_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_54_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1019 = nn.conv2d(%FunctionVar_54_01, %FunctionVar_54_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1019, %FunctionVar_54_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1020(%cutlass_273_i0, %cutlass_273_i1, %cutlass_273_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_276(%cutlass_276_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_276_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_276_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_276", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1024 = fn (%FunctionVar_81_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_81_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_81_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1021 = nn.conv2d(%FunctionVar_81_0, %FunctionVar_81_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1022 = add(%1021, %FunctionVar_81_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1023 = sigmoid(%1022) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1022, %1023) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1024(%cutlass_276_i0, %cutlass_276_i1, %cutlass_276_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_279(%cutlass_279_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_279_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_279_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_279", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1028 = fn (%FunctionVar_79_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_79_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_79_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1025 = nn.conv2d(%FunctionVar_79_0, %FunctionVar_79_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1026 = add(%1025, %FunctionVar_79_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1027 = sigmoid(%1026) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1026, %1027) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1028(%cutlass_279_i0, %cutlass_279_i1, %cutlass_279_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_282(%cutlass_282_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_282_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_282_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_282", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1031 = fn (%FunctionVar_52_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_52_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_52_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1029 = nn.conv2d(%FunctionVar_52_0, %FunctionVar_52_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1030 = add(%1029, %FunctionVar_52_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1030) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1031(%cutlass_282_i0, %cutlass_282_i1, %cutlass_282_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_285(%cutlass_285_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_285_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_285_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_285", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1033 = fn (%FunctionVar_52_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_52_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_52_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1032 = nn.conv2d(%FunctionVar_52_01, %FunctionVar_52_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1032, %FunctionVar_52_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1033(%cutlass_285_i0, %cutlass_285_i1, %cutlass_285_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_288(%cutlass_288_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_288_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_288_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_288", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1037 = fn (%FunctionVar_78_02: Tensor[(8, 14, 14, 176), float16], %FunctionVar_78_12: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_78_22: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1034 = nn.conv2d(%FunctionVar_78_02, %FunctionVar_78_12, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1035 = add(%1034, %FunctionVar_78_22) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1036 = sigmoid(%1035) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1035, %1036) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1037(%cutlass_288_i0, %cutlass_288_i1, %cutlass_288_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_291(%cutlass_291_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_291_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_291_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_291", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1041 = fn (%FunctionVar_76_02: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_76_12: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_76_22: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1038 = nn.conv2d(%FunctionVar_76_02, %FunctionVar_76_12, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1039 = add(%1038, %FunctionVar_76_22) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1040 = sigmoid(%1039) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1039, %1040) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1041(%cutlass_291_i0, %cutlass_291_i1, %cutlass_291_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_294(%cutlass_294_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_294_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_294_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_294", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1044 = fn (%FunctionVar_50_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_50_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_50_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1042 = nn.conv2d(%FunctionVar_50_0, %FunctionVar_50_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1043 = add(%1042, %FunctionVar_50_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1043) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1044(%cutlass_294_i0, %cutlass_294_i1, %cutlass_294_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_297(%cutlass_297_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_297_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_297_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_297", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1046 = fn (%FunctionVar_50_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_50_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_50_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1045 = nn.conv2d(%FunctionVar_50_01, %FunctionVar_50_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1045, %FunctionVar_50_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1046(%cutlass_297_i0, %cutlass_297_i1, %cutlass_297_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_3(%cutlass_3_i0: Tensor[(8, 114, 114, 24), float16], %cutlass_3_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_3_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_3", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %1050 = fn (%FunctionVar_145_0: Tensor[(8, 114, 114, 24), float16], %FunctionVar_145_1: Tensor[(24, 3, 3, 24), float16], %FunctionVar_145_2: Tensor[(1, 1, 1, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 112, 112, 24), float16] {
    %1047 = nn.conv2d(%FunctionVar_145_0, %FunctionVar_145_1, padding=[0, 0, 0, 0], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1048 = add(%1047, %FunctionVar_145_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1049 = sigmoid(%1048) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    multiply(%1048, %1049) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %1050(%cutlass_3_i0, %cutlass_3_i1, %cutlass_3_i2) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_30(%cutlass_30_i0: Tensor[(8, 58, 58, 48), float16], %cutlass_30_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_30_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_30", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %1054 = fn (%FunctionVar_139_0: Tensor[(8, 58, 58, 48), float16], %FunctionVar_139_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_139_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %1051 = nn.conv2d(%FunctionVar_139_0, %FunctionVar_139_1, padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %1052 = add(%1051, %FunctionVar_139_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %1053 = sigmoid(%1052) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%1052, %1053) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %1054(%cutlass_30_i0, %cutlass_30_i1, %cutlass_30_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_300(%cutlass_300_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_300_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_300_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_300", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1058 = fn (%FunctionVar_75_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_75_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_75_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1055 = nn.conv2d(%FunctionVar_75_0, %FunctionVar_75_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1056 = add(%1055, %FunctionVar_75_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1057 = sigmoid(%1056) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1056, %1057) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1058(%cutlass_300_i0, %cutlass_300_i1, %cutlass_300_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_303(%cutlass_303_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_303_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_303_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_303", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1062 = fn (%FunctionVar_73_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_73_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_73_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1059 = nn.conv2d(%FunctionVar_73_0, %FunctionVar_73_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1060 = add(%1059, %FunctionVar_73_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1061 = sigmoid(%1060) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1060, %1061) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1062(%cutlass_303_i0, %cutlass_303_i1, %cutlass_303_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_306(%cutlass_306_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_306_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_306_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_306", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1065 = fn (%FunctionVar_48_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_48_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_48_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1063 = nn.conv2d(%FunctionVar_48_0, %FunctionVar_48_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1064 = add(%1063, %FunctionVar_48_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1064) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1065(%cutlass_306_i0, %cutlass_306_i1, %cutlass_306_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_309(%cutlass_309_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_309_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_309_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_309", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1067 = fn (%FunctionVar_48_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_48_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_48_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1066 = nn.conv2d(%FunctionVar_48_01, %FunctionVar_48_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1066, %FunctionVar_48_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1067(%cutlass_309_i0, %cutlass_309_i1, %cutlass_309_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_312(%cutlass_312_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_312_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_312_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_312", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1071 = fn (%FunctionVar_72_02: Tensor[(8, 14, 14, 176), float16], %FunctionVar_72_12: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_72_22: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1068 = nn.conv2d(%FunctionVar_72_02, %FunctionVar_72_12, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1069 = add(%1068, %FunctionVar_72_22) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1070 = sigmoid(%1069) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1069, %1070) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1071(%cutlass_312_i0, %cutlass_312_i1, %cutlass_312_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_315(%cutlass_315_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_315_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_315_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_315", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1075 = fn (%FunctionVar_70_02: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_70_12: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_70_22: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1072 = nn.conv2d(%FunctionVar_70_02, %FunctionVar_70_12, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1073 = add(%1072, %FunctionVar_70_22) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1074 = sigmoid(%1073) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1073, %1074) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1075(%cutlass_315_i0, %cutlass_315_i1, %cutlass_315_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_318(%cutlass_318_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_318_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_318_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_318", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1078 = fn (%FunctionVar_46_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_46_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_46_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1076 = nn.conv2d(%FunctionVar_46_0, %FunctionVar_46_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1077 = add(%1076, %FunctionVar_46_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1077) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1078(%cutlass_318_i0, %cutlass_318_i1, %cutlass_318_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_321(%cutlass_321_i0: Tensor[(8, 14, 14, 1056), float16], %cutlass_321_i1: Tensor[(176, 1, 1, 1056), float16], %cutlass_321_i2: Tensor[(1, 1, 1, 176), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_321", Primitive=1) -> Tensor[(8, 14, 14, 176), float16] {
  %1080 = fn (%FunctionVar_46_01: Tensor[(8, 14, 14, 1056), float16], %FunctionVar_46_11: Tensor[(176, 1, 1, 1056), float16], %FunctionVar_46_21: Tensor[(1, 1, 1, 176), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 176), float16] {
    %1079 = nn.conv2d(%FunctionVar_46_01, %FunctionVar_46_11, padding=[0, 0, 0, 0], channels=176, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 176), float16] */;
    add(%1079, %FunctionVar_46_21) /* ty=Tensor[(8, 14, 14, 176), float16] */
  };
  %1080(%cutlass_321_i0, %cutlass_321_i1, %cutlass_321_i2) /* ty=Tensor[(8, 14, 14, 176), float16] */
}

def @tvmgen_default_cutlass_main_324(%cutlass_324_i0: Tensor[(8, 14, 14, 176), float16], %cutlass_324_i1: Tensor[(1056, 1, 1, 176), float16], %cutlass_324_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_324", Primitive=1) -> Tensor[(8, 14, 14, 1056), float16] {
  %1084 = fn (%FunctionVar_69_0: Tensor[(8, 14, 14, 176), float16], %FunctionVar_69_1: Tensor[(1056, 1, 1, 176), float16], %FunctionVar_69_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 1056), float16] {
    %1081 = nn.conv2d(%FunctionVar_69_0, %FunctionVar_69_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1082 = add(%1081, %FunctionVar_69_2) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    %1083 = sigmoid(%1082) /* ty=Tensor[(8, 14, 14, 1056), float16] */;
    multiply(%1082, %1083) /* ty=Tensor[(8, 14, 14, 1056), float16] */
  };
  %1084(%cutlass_324_i0, %cutlass_324_i1, %cutlass_324_i2) /* ty=Tensor[(8, 14, 14, 1056), float16] */
}

def @tvmgen_default_cutlass_main_327(%cutlass_327_i0: Tensor[(8, 1, 1, 1056), float16], %cutlass_327_i1: Tensor[(44, 1, 1, 1056), float16], %cutlass_327_i2: Tensor[(1, 1, 1, 44), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_327", Primitive=1) -> Tensor[(8, 1, 1, 44), float16] {
  %1088 = fn (%FunctionVar_67_0: Tensor[(8, 1, 1, 1056), float16], %FunctionVar_67_1: Tensor[(44, 1, 1, 1056), float16], %FunctionVar_67_2: Tensor[(1, 1, 1, 44), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 44), float16] {
    %1085 = nn.conv2d(%FunctionVar_67_0, %FunctionVar_67_1, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1086 = add(%1085, %FunctionVar_67_2) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    %1087 = sigmoid(%1086) /* ty=Tensor[(8, 1, 1, 44), float16] */;
    multiply(%1086, %1087) /* ty=Tensor[(8, 1, 1, 44), float16] */
  };
  %1088(%cutlass_327_i0, %cutlass_327_i1, %cutlass_327_i2) /* ty=Tensor[(8, 1, 1, 44), float16] */
}

def @tvmgen_default_cutlass_main_33(%cutlass_33_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_33_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_33_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_33", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %1090 = fn (%FunctionVar_94_01: Tensor[(8, 56, 56, 192), float16], %FunctionVar_94_11: Tensor[(48, 1, 1, 192), float16], %FunctionVar_94_21: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %1089 = nn.conv2d(%FunctionVar_94_01, %FunctionVar_94_11, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%1089, %FunctionVar_94_21) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %1090(%cutlass_33_i0, %cutlass_33_i1, %cutlass_33_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_330(%cutlass_330_i0: Tensor[(8, 1, 1, 44), float16], %cutlass_330_i1: Tensor[(1056, 1, 1, 44), float16], %cutlass_330_i2: Tensor[(1, 1, 1, 1056), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_330", Primitive=1) -> Tensor[(8, 1, 1, 1056), float16] {
  %1093 = fn (%FunctionVar_44_0: Tensor[(8, 1, 1, 44), float16], %FunctionVar_44_1: Tensor[(1056, 1, 1, 44), float16], %FunctionVar_44_2: Tensor[(1, 1, 1, 1056), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1056), float16] {
    %1091 = nn.conv2d(%FunctionVar_44_0, %FunctionVar_44_1, padding=[0, 0, 0, 0], channels=1056, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    %1092 = add(%1091, %FunctionVar_44_2) /* ty=Tensor[(8, 1, 1, 1056), float16] */;
    sigmoid(%1092) /* ty=Tensor[(8, 1, 1, 1056), float16] */
  };
  %1093(%cutlass_330_i0, %cutlass_330_i1, %cutlass_330_i2) /* ty=Tensor[(8, 1, 1, 1056), float16] */
}

def @tvmgen_default_cutlass_main_333(%cutlass_333_i0: Tensor[(8, 7, 7, 1056), float16], %cutlass_333_i1: Tensor[(304, 1, 1, 1056), float16], %cutlass_333_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_333", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1095 = fn (%FunctionVar_44_01: Tensor[(8, 7, 7, 1056), float16], %FunctionVar_44_11: Tensor[(304, 1, 1, 1056), float16], %FunctionVar_44_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1094 = nn.conv2d(%FunctionVar_44_01, %FunctionVar_44_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1094, %FunctionVar_44_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1095(%cutlass_333_i0, %cutlass_333_i1, %cutlass_333_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_336(%cutlass_336_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_336_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_336_i2: Tensor[(1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_336", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1099 = fn (%FunctionVar_66_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_66_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_66_22: Tensor[(1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1096 = nn.conv2d(%FunctionVar_66_02, %FunctionVar_66_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1097 = add(%1096, %FunctionVar_66_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1098 = sigmoid(%1097) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1097, %1098) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1099(%cutlass_336_i0, %cutlass_336_i1, %cutlass_336_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_339(%cutlass_339_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_339_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_339_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_339", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1103 = fn (%FunctionVar_64_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_64_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_64_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1100 = nn.conv2d(%FunctionVar_64_02, %FunctionVar_64_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1101 = add(%1100, %FunctionVar_64_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1102 = sigmoid(%1101) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1101, %1102) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1103(%cutlass_339_i0, %cutlass_339_i1, %cutlass_339_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_342(%cutlass_342_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_342_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_342_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_342", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1106 = fn (%FunctionVar_42_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_42_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_42_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1104 = nn.conv2d(%FunctionVar_42_0, %FunctionVar_42_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1105 = add(%1104, %FunctionVar_42_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1105) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1106(%cutlass_342_i0, %cutlass_342_i1, %cutlass_342_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_345(%cutlass_345_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_345_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_345_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_345", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1108 = fn (%FunctionVar_42_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_42_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_42_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1107 = nn.conv2d(%FunctionVar_42_01, %FunctionVar_42_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1107, %FunctionVar_42_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1108(%cutlass_345_i0, %cutlass_345_i1, %cutlass_345_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_348(%cutlass_348_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_348_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_348_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_348", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1112 = fn (%FunctionVar_63_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_63_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_63_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1109 = nn.conv2d(%FunctionVar_63_0, %FunctionVar_63_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1110 = add(%1109, %FunctionVar_63_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1111 = sigmoid(%1110) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1110, %1111) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1112(%cutlass_348_i0, %cutlass_348_i1, %cutlass_348_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_351(%cutlass_351_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_351_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_351_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_351", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1116 = fn (%FunctionVar_61_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_61_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_61_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1113 = nn.conv2d(%FunctionVar_61_0, %FunctionVar_61_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1114 = add(%1113, %FunctionVar_61_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1115 = sigmoid(%1114) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1114, %1115) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1116(%cutlass_351_i0, %cutlass_351_i1, %cutlass_351_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_354(%cutlass_354_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_354_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_354_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_354", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1119 = fn (%FunctionVar_40_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_40_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_40_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1117 = nn.conv2d(%FunctionVar_40_0, %FunctionVar_40_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1118 = add(%1117, %FunctionVar_40_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1118) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1119(%cutlass_354_i0, %cutlass_354_i1, %cutlass_354_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_357(%cutlass_357_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_357_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_357_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_357", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1121 = fn (%FunctionVar_40_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_40_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_40_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1120 = nn.conv2d(%FunctionVar_40_01, %FunctionVar_40_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1120, %FunctionVar_40_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1121(%cutlass_357_i0, %cutlass_357_i1, %cutlass_357_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_36(%cutlass_36_i0: Tensor[(8, 58, 58, 48), float16], %cutlass_36_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_36_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_36", Primitive=1) -> Tensor[(8, 56, 56, 192), float16] {
  %1125 = fn (%FunctionVar_138_0: Tensor[(8, 58, 58, 48), float16], %FunctionVar_138_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_138_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 56, 56, 192), float16] {
    %1122 = nn.conv2d(%FunctionVar_138_0, %FunctionVar_138_1, padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %1123 = add(%1122, %FunctionVar_138_2) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    %1124 = sigmoid(%1123) /* ty=Tensor[(8, 56, 56, 192), float16] */;
    multiply(%1123, %1124) /* ty=Tensor[(8, 56, 56, 192), float16] */
  };
  %1125(%cutlass_36_i0, %cutlass_36_i1, %cutlass_36_i2) /* ty=Tensor[(8, 56, 56, 192), float16] */
}

def @tvmgen_default_cutlass_main_360(%cutlass_360_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_360_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_360_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_360", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1129 = fn (%FunctionVar_60_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_60_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_60_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1126 = nn.conv2d(%FunctionVar_60_02, %FunctionVar_60_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1127 = add(%1126, %FunctionVar_60_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1128 = sigmoid(%1127) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1127, %1128) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1129(%cutlass_360_i0, %cutlass_360_i1, %cutlass_360_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_363(%cutlass_363_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_363_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_363_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_363", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1133 = fn (%FunctionVar_58_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_58_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_58_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1130 = nn.conv2d(%FunctionVar_58_02, %FunctionVar_58_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1131 = add(%1130, %FunctionVar_58_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1132 = sigmoid(%1131) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1131, %1132) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1133(%cutlass_363_i0, %cutlass_363_i1, %cutlass_363_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_366(%cutlass_366_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_366_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_366_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_366", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1136 = fn (%FunctionVar_38_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_38_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_38_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1134 = nn.conv2d(%FunctionVar_38_0, %FunctionVar_38_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1135 = add(%1134, %FunctionVar_38_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1135) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1136(%cutlass_366_i0, %cutlass_366_i1, %cutlass_366_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_369(%cutlass_369_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_369_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_369_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_369", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1138 = fn (%FunctionVar_38_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_38_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_38_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1137 = nn.conv2d(%FunctionVar_38_01, %FunctionVar_38_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1137, %FunctionVar_38_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1138(%cutlass_369_i0, %cutlass_369_i1, %cutlass_369_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_372(%cutlass_372_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_372_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_372_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_372", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1142 = fn (%FunctionVar_57_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_57_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_57_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1139 = nn.conv2d(%FunctionVar_57_0, %FunctionVar_57_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1140 = add(%1139, %FunctionVar_57_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1141 = sigmoid(%1140) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1140, %1141) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1142(%cutlass_372_i0, %cutlass_372_i1, %cutlass_372_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_375(%cutlass_375_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_375_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_375_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_375", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1146 = fn (%FunctionVar_55_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_55_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_55_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1143 = nn.conv2d(%FunctionVar_55_0, %FunctionVar_55_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1144 = add(%1143, %FunctionVar_55_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1145 = sigmoid(%1144) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1144, %1145) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1146(%cutlass_375_i0, %cutlass_375_i1, %cutlass_375_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_378(%cutlass_378_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_378_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_378_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_378", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1149 = fn (%FunctionVar_36_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_36_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_36_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1147 = nn.conv2d(%FunctionVar_36_0, %FunctionVar_36_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1148 = add(%1147, %FunctionVar_36_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1148) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1149(%cutlass_378_i0, %cutlass_378_i1, %cutlass_378_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_381(%cutlass_381_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_381_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_381_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_381", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1151 = fn (%FunctionVar_36_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_36_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_36_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1150 = nn.conv2d(%FunctionVar_36_01, %FunctionVar_36_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1150, %FunctionVar_36_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1151(%cutlass_381_i0, %cutlass_381_i1, %cutlass_381_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_384(%cutlass_384_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_384_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_384_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_384", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1155 = fn (%FunctionVar_54_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_54_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_54_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1152 = nn.conv2d(%FunctionVar_54_02, %FunctionVar_54_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1153 = add(%1152, %FunctionVar_54_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1154 = sigmoid(%1153) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1153, %1154) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1155(%cutlass_384_i0, %cutlass_384_i1, %cutlass_384_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_387(%cutlass_387_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_387_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_387_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_387", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1159 = fn (%FunctionVar_52_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_52_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_52_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1156 = nn.conv2d(%FunctionVar_52_02, %FunctionVar_52_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1157 = add(%1156, %FunctionVar_52_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1158 = sigmoid(%1157) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1157, %1158) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1159(%cutlass_387_i0, %cutlass_387_i1, %cutlass_387_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_39(%cutlass_39_i0: Tensor[(8, 56, 56, 192), float16], %cutlass_39_i1: Tensor[(48, 1, 1, 192), float16], %cutlass_39_i2: Tensor[(1, 1, 1, 48), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_39", Primitive=1) -> Tensor[(8, 56, 56, 48), float16] {
  %1161 = fn (%FunctionVar_93_01: Tensor[(8, 56, 56, 192), float16], %FunctionVar_93_11: Tensor[(48, 1, 1, 192), float16], %FunctionVar_93_21: Tensor[(1, 1, 1, 48), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 56, 56, 48), float16] {
    %1160 = nn.conv2d(%FunctionVar_93_01, %FunctionVar_93_11, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 56, 56, 48), float16] */;
    add(%1160, %FunctionVar_93_21) /* ty=Tensor[(8, 56, 56, 48), float16] */
  };
  %1161(%cutlass_39_i0, %cutlass_39_i1, %cutlass_39_i2) /* ty=Tensor[(8, 56, 56, 48), float16] */
}

def @tvmgen_default_cutlass_main_390(%cutlass_390_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_390_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_390_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_390", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1164 = fn (%FunctionVar_34_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_34_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_34_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1162 = nn.conv2d(%FunctionVar_34_0, %FunctionVar_34_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1163 = add(%1162, %FunctionVar_34_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1163) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1164(%cutlass_390_i0, %cutlass_390_i1, %cutlass_390_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_393(%cutlass_393_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_393_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_393_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_393", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1166 = fn (%FunctionVar_34_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_34_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_34_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1165 = nn.conv2d(%FunctionVar_34_01, %FunctionVar_34_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1165, %FunctionVar_34_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1166(%cutlass_393_i0, %cutlass_393_i1, %cutlass_393_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_396(%cutlass_396_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_396_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_396_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_396", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1170 = fn (%FunctionVar_51_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_51_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_51_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1167 = nn.conv2d(%FunctionVar_51_0, %FunctionVar_51_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1168 = add(%1167, %FunctionVar_51_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1169 = sigmoid(%1168) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1168, %1169) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1170(%cutlass_396_i0, %cutlass_396_i1, %cutlass_396_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_399(%cutlass_399_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_399_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_399_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_399", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1174 = fn (%FunctionVar_49_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_49_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_49_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1171 = nn.conv2d(%FunctionVar_49_0, %FunctionVar_49_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1172 = add(%1171, %FunctionVar_49_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1173 = sigmoid(%1172) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1172, %1173) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1174(%cutlass_399_i0, %cutlass_399_i1, %cutlass_399_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_402(%cutlass_402_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_402_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_402_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_402", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1177 = fn (%FunctionVar_32_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_32_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_32_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1175 = nn.conv2d(%FunctionVar_32_0, %FunctionVar_32_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1176 = add(%1175, %FunctionVar_32_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1176) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1177(%cutlass_402_i0, %cutlass_402_i1, %cutlass_402_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_405(%cutlass_405_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_405_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_405_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_405", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1179 = fn (%FunctionVar_32_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_32_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_32_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1178 = nn.conv2d(%FunctionVar_32_01, %FunctionVar_32_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1178, %FunctionVar_32_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1179(%cutlass_405_i0, %cutlass_405_i1, %cutlass_405_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_408(%cutlass_408_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_408_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_408_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_408", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1183 = fn (%FunctionVar_48_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_48_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_48_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1180 = nn.conv2d(%FunctionVar_48_02, %FunctionVar_48_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1181 = add(%1180, %FunctionVar_48_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1182 = sigmoid(%1181) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1181, %1182) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1183(%cutlass_408_i0, %cutlass_408_i1, %cutlass_408_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_411(%cutlass_411_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_411_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_411_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_411", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1187 = fn (%FunctionVar_46_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_46_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_46_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1184 = nn.conv2d(%FunctionVar_46_02, %FunctionVar_46_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1185 = add(%1184, %FunctionVar_46_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1186 = sigmoid(%1185) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1185, %1186) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1187(%cutlass_411_i0, %cutlass_411_i1, %cutlass_411_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_414(%cutlass_414_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_414_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_414_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_414", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1190 = fn (%FunctionVar_30_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_30_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_30_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1188 = nn.conv2d(%FunctionVar_30_0, %FunctionVar_30_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1189 = add(%1188, %FunctionVar_30_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1189) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1190(%cutlass_414_i0, %cutlass_414_i1, %cutlass_414_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_417(%cutlass_417_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_417_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_417_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_417", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1192 = fn (%FunctionVar_30_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_30_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_30_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1191 = nn.conv2d(%FunctionVar_30_01, %FunctionVar_30_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1191, %FunctionVar_30_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1192(%cutlass_417_i0, %cutlass_417_i1, %cutlass_417_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_42(%cutlass_42_i0: Tensor[(8, 57, 57, 48), float16], %cutlass_42_i1: Tensor[(192, 3, 3, 48), float16], %cutlass_42_i2: Tensor[(1, 1, 1, 192), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_42", Primitive=1) -> Tensor[(8, 28, 28, 192), float16] {
  %1196 = fn (%FunctionVar_137_0: Tensor[(8, 57, 57, 48), float16], %FunctionVar_137_1: Tensor[(192, 3, 3, 48), float16], %FunctionVar_137_2: Tensor[(1, 1, 1, 192), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 192), float16] {
    %1193 = nn.conv2d(%FunctionVar_137_0, %FunctionVar_137_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=192, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 192), float16] */;
    %1194 = add(%1193, %FunctionVar_137_2) /* ty=Tensor[(8, 28, 28, 192), float16] */;
    %1195 = sigmoid(%1194) /* ty=Tensor[(8, 28, 28, 192), float16] */;
    multiply(%1194, %1195) /* ty=Tensor[(8, 28, 28, 192), float16] */
  };
  %1196(%cutlass_42_i0, %cutlass_42_i1, %cutlass_42_i2) /* ty=Tensor[(8, 28, 28, 192), float16] */
}

def @tvmgen_default_cutlass_main_420(%cutlass_420_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_420_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_420_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_420", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1200 = fn (%FunctionVar_45_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_45_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_45_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1197 = nn.conv2d(%FunctionVar_45_0, %FunctionVar_45_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1198 = add(%1197, %FunctionVar_45_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1199 = sigmoid(%1198) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1198, %1199) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1200(%cutlass_420_i0, %cutlass_420_i1, %cutlass_420_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_423(%cutlass_423_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_423_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_423_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_423", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1204 = fn (%FunctionVar_43_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_43_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_43_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1201 = nn.conv2d(%FunctionVar_43_0, %FunctionVar_43_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1202 = add(%1201, %FunctionVar_43_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1203 = sigmoid(%1202) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1202, %1203) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1204(%cutlass_423_i0, %cutlass_423_i1, %cutlass_423_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_426(%cutlass_426_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_426_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_426_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_426", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1207 = fn (%FunctionVar_28_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_28_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_28_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1205 = nn.conv2d(%FunctionVar_28_0, %FunctionVar_28_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1206 = add(%1205, %FunctionVar_28_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1206) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1207(%cutlass_426_i0, %cutlass_426_i1, %cutlass_426_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_429(%cutlass_429_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_429_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_429_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_429", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1209 = fn (%FunctionVar_28_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_28_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_28_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1208 = nn.conv2d(%FunctionVar_28_01, %FunctionVar_28_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1208, %FunctionVar_28_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1209(%cutlass_429_i0, %cutlass_429_i1, %cutlass_429_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_432(%cutlass_432_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_432_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_432_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_432", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1213 = fn (%FunctionVar_42_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_42_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_42_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1210 = nn.conv2d(%FunctionVar_42_02, %FunctionVar_42_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1211 = add(%1210, %FunctionVar_42_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1212 = sigmoid(%1211) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1211, %1212) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1213(%cutlass_432_i0, %cutlass_432_i1, %cutlass_432_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_435(%cutlass_435_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_435_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_435_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_435", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1217 = fn (%FunctionVar_40_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_40_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_40_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1214 = nn.conv2d(%FunctionVar_40_02, %FunctionVar_40_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1215 = add(%1214, %FunctionVar_40_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1216 = sigmoid(%1215) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1215, %1216) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1217(%cutlass_435_i0, %cutlass_435_i1, %cutlass_435_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_438(%cutlass_438_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_438_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_438_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_438", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1220 = fn (%FunctionVar_26_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_26_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_26_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1218 = nn.conv2d(%FunctionVar_26_0, %FunctionVar_26_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1219 = add(%1218, %FunctionVar_26_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1219) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1220(%cutlass_438_i0, %cutlass_438_i1, %cutlass_438_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_441(%cutlass_441_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_441_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_441_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_441", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1222 = fn (%FunctionVar_26_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_26_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_26_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1221 = nn.conv2d(%FunctionVar_26_01, %FunctionVar_26_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1221, %FunctionVar_26_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1222(%cutlass_441_i0, %cutlass_441_i1, %cutlass_441_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_444(%cutlass_444_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_444_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_444_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_444", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1226 = fn (%FunctionVar_39_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_39_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_39_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1223 = nn.conv2d(%FunctionVar_39_0, %FunctionVar_39_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1224 = add(%1223, %FunctionVar_39_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1225 = sigmoid(%1224) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1224, %1225) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1226(%cutlass_444_i0, %cutlass_444_i1, %cutlass_444_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_447(%cutlass_447_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_447_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_447_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_447", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1230 = fn (%FunctionVar_37_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_37_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_37_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1227 = nn.conv2d(%FunctionVar_37_0, %FunctionVar_37_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1228 = add(%1227, %FunctionVar_37_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1229 = sigmoid(%1228) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1228, %1229) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1230(%cutlass_447_i0, %cutlass_447_i1, %cutlass_447_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_45(%cutlass_45_i0: Tensor[(8, 28, 28, 192), float16], %cutlass_45_i1: Tensor[(80, 1, 1, 192), float16], %cutlass_45_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_45", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1232 = fn (%FunctionVar_92_0: Tensor[(8, 28, 28, 192), float16], %FunctionVar_92_1: Tensor[(80, 1, 1, 192), float16], %FunctionVar_92_2: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1231 = nn.conv2d(%FunctionVar_92_0, %FunctionVar_92_1, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1231, %FunctionVar_92_2) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1232(%cutlass_45_i0, %cutlass_45_i1, %cutlass_45_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_450(%cutlass_450_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_450_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_450_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_450", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1235 = fn (%FunctionVar_24_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_24_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_24_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1233 = nn.conv2d(%FunctionVar_24_0, %FunctionVar_24_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1234 = add(%1233, %FunctionVar_24_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1234) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1235(%cutlass_450_i0, %cutlass_450_i1, %cutlass_450_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_453(%cutlass_453_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_453_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_453_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_453", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1237 = fn (%FunctionVar_24_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_24_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_24_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1236 = nn.conv2d(%FunctionVar_24_01, %FunctionVar_24_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1236, %FunctionVar_24_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1237(%cutlass_453_i0, %cutlass_453_i1, %cutlass_453_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_456(%cutlass_456_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_456_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_456_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_456", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1241 = fn (%FunctionVar_36_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_36_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_36_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1238 = nn.conv2d(%FunctionVar_36_02, %FunctionVar_36_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1239 = add(%1238, %FunctionVar_36_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1240 = sigmoid(%1239) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1239, %1240) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1241(%cutlass_456_i0, %cutlass_456_i1, %cutlass_456_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_459(%cutlass_459_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_459_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_459_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_459", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1245 = fn (%FunctionVar_34_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_34_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_34_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1242 = nn.conv2d(%FunctionVar_34_02, %FunctionVar_34_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1243 = add(%1242, %FunctionVar_34_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1244 = sigmoid(%1243) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1243, %1244) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1245(%cutlass_459_i0, %cutlass_459_i1, %cutlass_459_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_462(%cutlass_462_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_462_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_462_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_462", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1248 = fn (%FunctionVar_22_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_22_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_22_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1246 = nn.conv2d(%FunctionVar_22_0, %FunctionVar_22_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1247 = add(%1246, %FunctionVar_22_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1247) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1248(%cutlass_462_i0, %cutlass_462_i1, %cutlass_462_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_465(%cutlass_465_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_465_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_465_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_465", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1250 = fn (%FunctionVar_22_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_22_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_22_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1249 = nn.conv2d(%FunctionVar_22_01, %FunctionVar_22_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1249, %FunctionVar_22_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1250(%cutlass_465_i0, %cutlass_465_i1, %cutlass_465_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_468(%cutlass_468_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_468_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_468_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_468", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1254 = fn (%FunctionVar_33_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_33_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_33_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1251 = nn.conv2d(%FunctionVar_33_0, %FunctionVar_33_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1252 = add(%1251, %FunctionVar_33_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1253 = sigmoid(%1252) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1252, %1253) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1254(%cutlass_468_i0, %cutlass_468_i1, %cutlass_468_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_471(%cutlass_471_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_471_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_471_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_471", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1258 = fn (%FunctionVar_31_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_31_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_31_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1255 = nn.conv2d(%FunctionVar_31_0, %FunctionVar_31_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1256 = add(%1255, %FunctionVar_31_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1257 = sigmoid(%1256) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1256, %1257) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1258(%cutlass_471_i0, %cutlass_471_i1, %cutlass_471_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_474(%cutlass_474_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_474_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_474_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_474", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1261 = fn (%FunctionVar_20_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_20_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_20_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1259 = nn.conv2d(%FunctionVar_20_0, %FunctionVar_20_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1260 = add(%1259, %FunctionVar_20_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1260) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1261(%cutlass_474_i0, %cutlass_474_i1, %cutlass_474_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_477(%cutlass_477_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_477_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_477_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_477", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1263 = fn (%FunctionVar_20_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_20_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_20_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1262 = nn.conv2d(%FunctionVar_20_01, %FunctionVar_20_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1262, %FunctionVar_20_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1263(%cutlass_477_i0, %cutlass_477_i1, %cutlass_477_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_48(%cutlass_48_i0: Tensor[(8, 30, 30, 80), float16], %cutlass_48_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_48_i2: Tensor[(320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_48", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1267 = fn (%FunctionVar_136_0: Tensor[(8, 30, 30, 80), float16], %FunctionVar_136_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_136_2: Tensor[(320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1264 = nn.conv2d(%FunctionVar_136_0, %FunctionVar_136_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1265 = add(%1264, %FunctionVar_136_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1266 = sigmoid(%1265) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1265, %1266) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1267(%cutlass_48_i0, %cutlass_48_i1, %cutlass_48_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_480(%cutlass_480_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_480_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_480_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_480", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1271 = fn (%FunctionVar_30_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_30_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_30_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1268 = nn.conv2d(%FunctionVar_30_02, %FunctionVar_30_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1269 = add(%1268, %FunctionVar_30_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1270 = sigmoid(%1269) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1269, %1270) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1271(%cutlass_480_i0, %cutlass_480_i1, %cutlass_480_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_483(%cutlass_483_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_483_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_483_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_483", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1275 = fn (%FunctionVar_28_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_28_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_28_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1272 = nn.conv2d(%FunctionVar_28_02, %FunctionVar_28_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1273 = add(%1272, %FunctionVar_28_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1274 = sigmoid(%1273) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1273, %1274) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1275(%cutlass_483_i0, %cutlass_483_i1, %cutlass_483_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_486(%cutlass_486_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_486_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_486_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_486", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1278 = fn (%FunctionVar_18_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_18_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_18_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1276 = nn.conv2d(%FunctionVar_18_0, %FunctionVar_18_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1277 = add(%1276, %FunctionVar_18_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1277) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1278(%cutlass_486_i0, %cutlass_486_i1, %cutlass_486_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_489(%cutlass_489_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_489_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_489_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_489", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1280 = fn (%FunctionVar_18_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_18_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_18_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1279 = nn.conv2d(%FunctionVar_18_01, %FunctionVar_18_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1279, %FunctionVar_18_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1280(%cutlass_489_i0, %cutlass_489_i1, %cutlass_489_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_492(%cutlass_492_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_492_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_492_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_492", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1284 = fn (%FunctionVar_27_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_27_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_27_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1281 = nn.conv2d(%FunctionVar_27_0, %FunctionVar_27_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1282 = add(%1281, %FunctionVar_27_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1283 = sigmoid(%1282) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1282, %1283) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1284(%cutlass_492_i0, %cutlass_492_i1, %cutlass_492_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_495(%cutlass_495_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_495_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_495_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_495", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1288 = fn (%FunctionVar_25_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_25_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_25_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1285 = nn.conv2d(%FunctionVar_25_0, %FunctionVar_25_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1286 = add(%1285, %FunctionVar_25_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1287 = sigmoid(%1286) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1286, %1287) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1288(%cutlass_495_i0, %cutlass_495_i1, %cutlass_495_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_498(%cutlass_498_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_498_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_498_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_498", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1291 = fn (%FunctionVar_16_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_16_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_16_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1289 = nn.conv2d(%FunctionVar_16_0, %FunctionVar_16_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1290 = add(%1289, %FunctionVar_16_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1290) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1291(%cutlass_498_i0, %cutlass_498_i1, %cutlass_498_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_501(%cutlass_501_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_501_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_501_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_501", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1293 = fn (%FunctionVar_16_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_16_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_16_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1292 = nn.conv2d(%FunctionVar_16_01, %FunctionVar_16_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1292, %FunctionVar_16_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1293(%cutlass_501_i0, %cutlass_501_i1, %cutlass_501_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_504(%cutlass_504_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_504_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_504_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_504", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1297 = fn (%FunctionVar_24_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_24_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_24_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1294 = nn.conv2d(%FunctionVar_24_02, %FunctionVar_24_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1295 = add(%1294, %FunctionVar_24_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1296 = sigmoid(%1295) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1295, %1296) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1297(%cutlass_504_i0, %cutlass_504_i1, %cutlass_504_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_507(%cutlass_507_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_507_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_507_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_507", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1301 = fn (%FunctionVar_22_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_22_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_22_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1298 = nn.conv2d(%FunctionVar_22_02, %FunctionVar_22_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1299 = add(%1298, %FunctionVar_22_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1300 = sigmoid(%1299) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1299, %1300) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1301(%cutlass_507_i0, %cutlass_507_i1, %cutlass_507_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_51(%cutlass_51_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_51_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_51_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_51", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1303 = fn (%FunctionVar_91_01: Tensor[(8, 28, 28, 320), float16], %FunctionVar_91_11: Tensor[(80, 1, 1, 320), float16], %FunctionVar_91_21: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1302 = nn.conv2d(%FunctionVar_91_01, %FunctionVar_91_11, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1302, %FunctionVar_91_21) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1303(%cutlass_51_i0, %cutlass_51_i1, %cutlass_51_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_510(%cutlass_510_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_510_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_510_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_510", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1306 = fn (%FunctionVar_14_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_14_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_14_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1304 = nn.conv2d(%FunctionVar_14_0, %FunctionVar_14_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1305 = add(%1304, %FunctionVar_14_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1305) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1306(%cutlass_510_i0, %cutlass_510_i1, %cutlass_510_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_513(%cutlass_513_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_513_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_513_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_513", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1308 = fn (%FunctionVar_14_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_14_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_14_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1307 = nn.conv2d(%FunctionVar_14_01, %FunctionVar_14_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1307, %FunctionVar_14_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1308(%cutlass_513_i0, %cutlass_513_i1, %cutlass_513_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_516(%cutlass_516_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_516_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_516_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_516", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1312 = fn (%FunctionVar_21_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_21_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_21_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1309 = nn.conv2d(%FunctionVar_21_0, %FunctionVar_21_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1310 = add(%1309, %FunctionVar_21_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1311 = sigmoid(%1310) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1310, %1311) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1312(%cutlass_516_i0, %cutlass_516_i1, %cutlass_516_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_519(%cutlass_519_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_519_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_519_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_519", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1316 = fn (%FunctionVar_19_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_19_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_19_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1313 = nn.conv2d(%FunctionVar_19_0, %FunctionVar_19_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1314 = add(%1313, %FunctionVar_19_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1315 = sigmoid(%1314) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1314, %1315) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1316(%cutlass_519_i0, %cutlass_519_i1, %cutlass_519_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_522(%cutlass_522_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_522_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_522_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_522", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1319 = fn (%FunctionVar_12_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_12_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_12_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1317 = nn.conv2d(%FunctionVar_12_0, %FunctionVar_12_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1318 = add(%1317, %FunctionVar_12_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1318) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1319(%cutlass_522_i0, %cutlass_522_i1, %cutlass_522_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_525(%cutlass_525_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_525_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_525_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_525", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1321 = fn (%FunctionVar_12_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_12_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_12_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1320 = nn.conv2d(%FunctionVar_12_01, %FunctionVar_12_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1320, %FunctionVar_12_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1321(%cutlass_525_i0, %cutlass_525_i1, %cutlass_525_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_528(%cutlass_528_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_528_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_528_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_528", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1325 = fn (%FunctionVar_18_02: Tensor[(8, 7, 7, 304), float16], %FunctionVar_18_12: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_18_22: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1322 = nn.conv2d(%FunctionVar_18_02, %FunctionVar_18_12, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1323 = add(%1322, %FunctionVar_18_22) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1324 = sigmoid(%1323) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1323, %1324) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1325(%cutlass_528_i0, %cutlass_528_i1, %cutlass_528_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_531(%cutlass_531_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_531_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_531_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_531", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1329 = fn (%FunctionVar_16_02: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_16_12: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_16_22: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1326 = nn.conv2d(%FunctionVar_16_02, %FunctionVar_16_12, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1327 = add(%1326, %FunctionVar_16_22) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1328 = sigmoid(%1327) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1327, %1328) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1329(%cutlass_531_i0, %cutlass_531_i1, %cutlass_531_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_534(%cutlass_534_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_534_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_534_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_534", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1332 = fn (%FunctionVar_10_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_10_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_10_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1330 = nn.conv2d(%FunctionVar_10_0, %FunctionVar_10_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1331 = add(%1330, %FunctionVar_10_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1331) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1332(%cutlass_534_i0, %cutlass_534_i1, %cutlass_534_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_537(%cutlass_537_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_537_i1: Tensor[(304, 1, 1, 1824), float16], %cutlass_537_i2: Tensor[(1, 1, 1, 304), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_537", Primitive=1) -> Tensor[(8, 7, 7, 304), float16] {
  %1334 = fn (%FunctionVar_10_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_10_11: Tensor[(304, 1, 1, 1824), float16], %FunctionVar_10_21: Tensor[(1, 1, 1, 304), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 304), float16] {
    %1333 = nn.conv2d(%FunctionVar_10_01, %FunctionVar_10_11, padding=[0, 0, 0, 0], channels=304, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 304), float16] */;
    add(%1333, %FunctionVar_10_21) /* ty=Tensor[(8, 7, 7, 304), float16] */
  };
  %1334(%cutlass_537_i0, %cutlass_537_i1, %cutlass_537_i2) /* ty=Tensor[(8, 7, 7, 304), float16] */
}

def @tvmgen_default_cutlass_main_54(%cutlass_54_i0: Tensor[(8, 30, 30, 80), float16], %cutlass_54_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_54_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_54", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1338 = fn (%FunctionVar_135_0: Tensor[(8, 30, 30, 80), float16], %FunctionVar_135_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_135_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1335 = nn.conv2d(%FunctionVar_135_0, %FunctionVar_135_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1336 = add(%1335, %FunctionVar_135_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1337 = sigmoid(%1336) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1336, %1337) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1338(%cutlass_54_i0, %cutlass_54_i1, %cutlass_54_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_540(%cutlass_540_i0: Tensor[(8, 7, 7, 304), float16], %cutlass_540_i1: Tensor[(1824, 1, 1, 304), float16], %cutlass_540_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_540", Primitive=1) -> Tensor[(8, 7, 7, 1824), float16] {
  %1342 = fn (%FunctionVar_15_0: Tensor[(8, 7, 7, 304), float16], %FunctionVar_15_1: Tensor[(1824, 1, 1, 304), float16], %FunctionVar_15_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1824), float16] {
    %1339 = nn.conv2d(%FunctionVar_15_0, %FunctionVar_15_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1340 = add(%1339, %FunctionVar_15_2) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    %1341 = sigmoid(%1340) /* ty=Tensor[(8, 7, 7, 1824), float16] */;
    multiply(%1340, %1341) /* ty=Tensor[(8, 7, 7, 1824), float16] */
  };
  %1342(%cutlass_540_i0, %cutlass_540_i1, %cutlass_540_i2) /* ty=Tensor[(8, 7, 7, 1824), float16] */
}

def @tvmgen_default_cutlass_main_543(%cutlass_543_i0: Tensor[(8, 1, 1, 1824), float16], %cutlass_543_i1: Tensor[(76, 1, 1, 1824), float16], %cutlass_543_i2: Tensor[(1, 1, 1, 76), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_543", Primitive=1) -> Tensor[(8, 1, 1, 76), float16] {
  %1346 = fn (%FunctionVar_13_0: Tensor[(8, 1, 1, 1824), float16], %FunctionVar_13_1: Tensor[(76, 1, 1, 1824), float16], %FunctionVar_13_2: Tensor[(1, 1, 1, 76), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 76), float16] {
    %1343 = nn.conv2d(%FunctionVar_13_0, %FunctionVar_13_1, padding=[0, 0, 0, 0], channels=76, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1344 = add(%1343, %FunctionVar_13_2) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    %1345 = sigmoid(%1344) /* ty=Tensor[(8, 1, 1, 76), float16] */;
    multiply(%1344, %1345) /* ty=Tensor[(8, 1, 1, 76), float16] */
  };
  %1346(%cutlass_543_i0, %cutlass_543_i1, %cutlass_543_i2) /* ty=Tensor[(8, 1, 1, 76), float16] */
}

def @tvmgen_default_cutlass_main_546(%cutlass_546_i0: Tensor[(8, 1, 1, 76), float16], %cutlass_546_i1: Tensor[(1824, 1, 1, 76), float16], %cutlass_546_i2: Tensor[(1, 1, 1, 1824), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_546", Primitive=1) -> Tensor[(8, 1, 1, 1824), float16] {
  %1349 = fn (%FunctionVar_8_0: Tensor[(8, 1, 1, 76), float16], %FunctionVar_8_1: Tensor[(1824, 1, 1, 76), float16], %FunctionVar_8_2: Tensor[(1, 1, 1, 1824), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 1824), float16] {
    %1347 = nn.conv2d(%FunctionVar_8_0, %FunctionVar_8_1, padding=[0, 0, 0, 0], channels=1824, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    %1348 = add(%1347, %FunctionVar_8_2) /* ty=Tensor[(8, 1, 1, 1824), float16] */;
    sigmoid(%1348) /* ty=Tensor[(8, 1, 1, 1824), float16] */
  };
  %1349(%cutlass_546_i0, %cutlass_546_i1, %cutlass_546_i2) /* ty=Tensor[(8, 1, 1, 1824), float16] */
}

def @tvmgen_default_cutlass_main_549(%cutlass_549_i0: Tensor[(8, 7, 7, 1824), float16], %cutlass_549_i1: Tensor[(512, 1, 1, 1824), float16], %cutlass_549_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_549", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1351 = fn (%FunctionVar_8_01: Tensor[(8, 7, 7, 1824), float16], %FunctionVar_8_11: Tensor[(512, 1, 1, 1824), float16], %FunctionVar_8_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1350 = nn.conv2d(%FunctionVar_8_01, %FunctionVar_8_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1350, %FunctionVar_8_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1351(%cutlass_549_i0, %cutlass_549_i1, %cutlass_549_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_552(%cutlass_552_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_552_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_552_i2: Tensor[(3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_552", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1355 = fn (%FunctionVar_12_02: Tensor[(8, 7, 7, 512), float16], %FunctionVar_12_12: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_12_22: Tensor[(3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1352 = nn.conv2d(%FunctionVar_12_02, %FunctionVar_12_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1353 = add(%1352, %FunctionVar_12_22) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1354 = sigmoid(%1353) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1353, %1354) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1355(%cutlass_552_i0, %cutlass_552_i1, %cutlass_552_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_555(%cutlass_555_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_555_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_555_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_555", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1359 = fn (%FunctionVar_10_02: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_10_12: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_10_22: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1356 = nn.conv2d(%FunctionVar_10_02, %FunctionVar_10_12, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1357 = add(%1356, %FunctionVar_10_22) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1358 = sigmoid(%1357) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1357, %1358) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1359(%cutlass_555_i0, %cutlass_555_i1, %cutlass_555_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_558(%cutlass_558_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_558_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_558_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_558", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1362 = fn (%FunctionVar_6_0: Tensor[(8, 1, 1, 128), float16], %FunctionVar_6_1: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_6_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1360 = nn.conv2d(%FunctionVar_6_0, %FunctionVar_6_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1361 = add(%1360, %FunctionVar_6_2) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1361) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1362(%cutlass_558_i0, %cutlass_558_i1, %cutlass_558_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_561(%cutlass_561_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_561_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_561_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_561", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1364 = fn (%FunctionVar_6_01: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_6_11: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_6_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1363 = nn.conv2d(%FunctionVar_6_01, %FunctionVar_6_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1363, %FunctionVar_6_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1364(%cutlass_561_i0, %cutlass_561_i1, %cutlass_561_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_564(%cutlass_564_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_564_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_564_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_564", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1368 = fn (%FunctionVar_9_0: Tensor[(8, 7, 7, 512), float16], %FunctionVar_9_1: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_9_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1365 = nn.conv2d(%FunctionVar_9_0, %FunctionVar_9_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1366 = add(%1365, %FunctionVar_9_2) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1367 = sigmoid(%1366) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1366, %1367) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1368(%cutlass_564_i0, %cutlass_564_i1, %cutlass_564_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_567(%cutlass_567_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_567_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_567_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_567", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1372 = fn (%FunctionVar_7_0: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_7_1: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_7_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1369 = nn.conv2d(%FunctionVar_7_0, %FunctionVar_7_1, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1370 = add(%1369, %FunctionVar_7_2) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1371 = sigmoid(%1370) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1370, %1371) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1372(%cutlass_567_i0, %cutlass_567_i1, %cutlass_567_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_57(%cutlass_57_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_57_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_57_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_57", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1374 = fn (%FunctionVar_90_01: Tensor[(8, 28, 28, 320), float16], %FunctionVar_90_11: Tensor[(80, 1, 1, 320), float16], %FunctionVar_90_21: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1373 = nn.conv2d(%FunctionVar_90_01, %FunctionVar_90_11, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1373, %FunctionVar_90_21) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1374(%cutlass_57_i0, %cutlass_57_i1, %cutlass_57_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_570(%cutlass_570_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_570_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_570_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_570", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1377 = fn (%FunctionVar_4_0: Tensor[(8, 1, 1, 128), float16], %FunctionVar_4_1: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_4_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1375 = nn.conv2d(%FunctionVar_4_0, %FunctionVar_4_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1376 = add(%1375, %FunctionVar_4_2) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1376) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1377(%cutlass_570_i0, %cutlass_570_i1, %cutlass_570_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_573(%cutlass_573_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_573_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_573_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_573", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1379 = fn (%FunctionVar_4_01: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_4_11: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_4_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1378 = nn.conv2d(%FunctionVar_4_01, %FunctionVar_4_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1378, %FunctionVar_4_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1379(%cutlass_573_i0, %cutlass_573_i1, %cutlass_573_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_576(%cutlass_576_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_576_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_576_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_576", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1383 = fn (%FunctionVar_6_02: Tensor[(8, 7, 7, 512), float16], %FunctionVar_6_12: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_6_22: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1380 = nn.conv2d(%FunctionVar_6_02, %FunctionVar_6_12, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1381 = add(%1380, %FunctionVar_6_22) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1382 = sigmoid(%1381) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1381, %1382) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1383(%cutlass_576_i0, %cutlass_576_i1, %cutlass_576_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_579(%cutlass_579_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_579_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_579_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_579", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1387 = fn (%FunctionVar_4_02: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_4_12: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_4_22: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1384 = nn.conv2d(%FunctionVar_4_02, %FunctionVar_4_12, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1385 = add(%1384, %FunctionVar_4_22) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1386 = sigmoid(%1385) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1385, %1386) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1387(%cutlass_579_i0, %cutlass_579_i1, %cutlass_579_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_582(%cutlass_582_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_582_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_582_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_582", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1390 = fn (%FunctionVar_2_0: Tensor[(8, 1, 1, 128), float16], %FunctionVar_2_1: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_2_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1388 = nn.conv2d(%FunctionVar_2_0, %FunctionVar_2_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1389 = add(%1388, %FunctionVar_2_2) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1389) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1390(%cutlass_582_i0, %cutlass_582_i1, %cutlass_582_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_585(%cutlass_585_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_585_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_585_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_585", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1392 = fn (%FunctionVar_2_01: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_2_11: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_2_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1391 = nn.conv2d(%FunctionVar_2_01, %FunctionVar_2_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1391, %FunctionVar_2_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1392(%cutlass_585_i0, %cutlass_585_i1, %cutlass_585_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_588(%cutlass_588_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_588_i1: Tensor[(3072, 1, 1, 512), float16], %cutlass_588_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_588", Primitive=1) -> Tensor[(8, 7, 7, 3072), float16] {
  %1396 = fn (%FunctionVar_3_0: Tensor[(8, 7, 7, 512), float16], %FunctionVar_3_1: Tensor[(3072, 1, 1, 512), float16], %FunctionVar_3_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 3072), float16] {
    %1393 = nn.conv2d(%FunctionVar_3_0, %FunctionVar_3_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1394 = add(%1393, %FunctionVar_3_2) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    %1395 = sigmoid(%1394) /* ty=Tensor[(8, 7, 7, 3072), float16] */;
    multiply(%1394, %1395) /* ty=Tensor[(8, 7, 7, 3072), float16] */
  };
  %1396(%cutlass_588_i0, %cutlass_588_i1, %cutlass_588_i2) /* ty=Tensor[(8, 7, 7, 3072), float16] */
}

def @tvmgen_default_cutlass_main_591(%cutlass_591_i0: Tensor[(8, 1, 1, 3072), float16], %cutlass_591_i1: Tensor[(128, 1, 1, 3072), float16], %cutlass_591_i2: Tensor[(1, 1, 1, 128), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_591", Primitive=1) -> Tensor[(8, 1, 1, 128), float16] {
  %1400 = fn (%FunctionVar_1_0: Tensor[(8, 1, 1, 3072), float16], %FunctionVar_1_1: Tensor[(128, 1, 1, 3072), float16], %FunctionVar_1_2: Tensor[(1, 1, 1, 128), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 128), float16] {
    %1397 = nn.conv2d(%FunctionVar_1_0, %FunctionVar_1_1, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1398 = add(%1397, %FunctionVar_1_2) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    %1399 = sigmoid(%1398) /* ty=Tensor[(8, 1, 1, 128), float16] */;
    multiply(%1398, %1399) /* ty=Tensor[(8, 1, 1, 128), float16] */
  };
  %1400(%cutlass_591_i0, %cutlass_591_i1, %cutlass_591_i2) /* ty=Tensor[(8, 1, 1, 128), float16] */
}

def @tvmgen_default_cutlass_main_594(%cutlass_594_i0: Tensor[(8, 1, 1, 128), float16], %cutlass_594_i1: Tensor[(3072, 1, 1, 128), float16], %cutlass_594_i2: Tensor[(1, 1, 1, 3072), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_594", Primitive=1) -> Tensor[(8, 1, 1, 3072), float16] {
  %1403 = fn (%FunctionVar_0_0: Tensor[(8, 1, 1, 128), float16], %FunctionVar_0_1: Tensor[(3072, 1, 1, 128), float16], %FunctionVar_0_2: Tensor[(1, 1, 1, 3072), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 3072), float16] {
    %1401 = nn.conv2d(%FunctionVar_0_0, %FunctionVar_0_1, padding=[0, 0, 0, 0], channels=3072, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    %1402 = add(%1401, %FunctionVar_0_2) /* ty=Tensor[(8, 1, 1, 3072), float16] */;
    sigmoid(%1402) /* ty=Tensor[(8, 1, 1, 3072), float16] */
  };
  %1403(%cutlass_594_i0, %cutlass_594_i1, %cutlass_594_i2) /* ty=Tensor[(8, 1, 1, 3072), float16] */
}

def @tvmgen_default_cutlass_main_597(%cutlass_597_i0: Tensor[(8, 7, 7, 3072), float16], %cutlass_597_i1: Tensor[(512, 1, 1, 3072), float16], %cutlass_597_i2: Tensor[(1, 1, 1, 512), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_597", Primitive=1) -> Tensor[(8, 7, 7, 512), float16] {
  %1405 = fn (%FunctionVar_0_01: Tensor[(8, 7, 7, 3072), float16], %FunctionVar_0_11: Tensor[(512, 1, 1, 3072), float16], %FunctionVar_0_21: Tensor[(1, 1, 1, 512), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 7, 7, 512), float16] {
    %1404 = nn.conv2d(%FunctionVar_0_01, %FunctionVar_0_11, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 512), float16] */;
    add(%1404, %FunctionVar_0_21) /* ty=Tensor[(8, 7, 7, 512), float16] */
  };
  %1405(%cutlass_597_i0, %cutlass_597_i1, %cutlass_597_i2) /* ty=Tensor[(8, 7, 7, 512), float16] */
}

def @tvmgen_default_cutlass_main_6(%cutlass_6_i0: Tensor[(8, 114, 114, 24), float16], %cutlass_6_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_6_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_6", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %1409 = fn (%FunctionVar_144_0: Tensor[(8, 114, 114, 24), float16], %FunctionVar_144_1: Tensor[(24, 3, 3, 24), float16], %FunctionVar_144_2: Tensor[(1, 1, 1, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 112, 112, 24), float16] {
    %1406 = nn.conv2d(%FunctionVar_144_0, %FunctionVar_144_1, padding=[0, 0, 0, 0], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1407 = add(%1406, %FunctionVar_144_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1408 = sigmoid(%1407) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    multiply(%1407, %1408) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %1409(%cutlass_6_i0, %cutlass_6_i1, %cutlass_6_i2) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_60(%cutlass_60_i0: Tensor[(8, 30, 30, 80), float16], %cutlass_60_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_60_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_60", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1413 = fn (%FunctionVar_134_0: Tensor[(8, 30, 30, 80), float16], %FunctionVar_134_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_134_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1410 = nn.conv2d(%FunctionVar_134_0, %FunctionVar_134_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1411 = add(%1410, %FunctionVar_134_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1412 = sigmoid(%1411) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1411, %1412) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1413(%cutlass_60_i0, %cutlass_60_i1, %cutlass_60_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_600(%cutlass_600_i0: Tensor[(8, 7, 7, 512), float16], %cutlass_600_i1: Tensor[(1280, 1, 1, 512), float16], %cutlass_600_i2: Tensor[(1, 1, 1, 1280), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_600", Primitive=1) -> Tensor[(8, 7, 7, 1280), float16] {
  %1417 = fn (%FunctionVar_0_02: Tensor[(8, 7, 7, 512), float16], %FunctionVar_0_12: Tensor[(1280, 1, 1, 512), float16], %FunctionVar_0_22: Tensor[(1, 1, 1, 1280), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 7, 7, 1280), float16] {
    %1414 = nn.conv2d(%FunctionVar_0_02, %FunctionVar_0_12, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    %1415 = add(%1414, %FunctionVar_0_22) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    %1416 = sigmoid(%1415) /* ty=Tensor[(8, 7, 7, 1280), float16] */;
    multiply(%1415, %1416) /* ty=Tensor[(8, 7, 7, 1280), float16] */
  };
  %1417(%cutlass_600_i0, %cutlass_600_i1, %cutlass_600_i2) /* ty=Tensor[(8, 7, 7, 1280), float16] */
}

def @tvmgen_default_cutlass_main_603(%cutlass_603_i0: Tensor[(8, 1280), float16], %cutlass_603_i1: Tensor[(1000, 1280), float16], %cutlass_603_i2: Tensor[(1, 1000), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_603", Primitive=1) -> Tensor[(8, 1000), float16] {
  %1419 = fn (%FunctionVar_0_03: Tensor[(8, 1280), float16], %FunctionVar_0_13: Tensor[(1000, 1280), float16], %FunctionVar_0_23: Tensor[(1, 1000), float16], PartitionedFromPattern="nn.dense_add_", Composite="cutlass.dense_bias") -> Tensor[(8, 1000), float16] {
    %1418 = nn.dense(%FunctionVar_0_03, %FunctionVar_0_13, units=None, out_dtype="float16") /* ty=Tensor[(8, 1000), float16] */;
    add(%1418, %FunctionVar_0_23) /* ty=Tensor[(8, 1000), float16] */
  };
  %1419(%cutlass_603_i0, %cutlass_603_i1, %cutlass_603_i2) /* ty=Tensor[(8, 1000), float16] */
}

def @tvmgen_default_cutlass_main_63(%cutlass_63_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_63_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_63_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_63", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1421 = fn (%FunctionVar_89_0: Tensor[(8, 28, 28, 320), float16], %FunctionVar_89_1: Tensor[(80, 1, 1, 320), float16], %FunctionVar_89_2: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1420 = nn.conv2d(%FunctionVar_89_0, %FunctionVar_89_1, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1420, %FunctionVar_89_2) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1421(%cutlass_63_i0, %cutlass_63_i1, %cutlass_63_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_66(%cutlass_66_i0: Tensor[(8, 30, 30, 80), float16], %cutlass_66_i1: Tensor[(320, 3, 3, 80), float16], %cutlass_66_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_66", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1425 = fn (%FunctionVar_133_0: Tensor[(8, 30, 30, 80), float16], %FunctionVar_133_1: Tensor[(320, 3, 3, 80), float16], %FunctionVar_133_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1422 = nn.conv2d(%FunctionVar_133_0, %FunctionVar_133_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1423 = add(%1422, %FunctionVar_133_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1424 = sigmoid(%1423) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1423, %1424) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1425(%cutlass_66_i0, %cutlass_66_i1, %cutlass_66_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_69(%cutlass_69_i0: Tensor[(8, 28, 28, 320), float16], %cutlass_69_i1: Tensor[(80, 1, 1, 320), float16], %cutlass_69_i2: Tensor[(1, 1, 1, 80), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_69", Primitive=1) -> Tensor[(8, 28, 28, 80), float16] {
  %1427 = fn (%FunctionVar_88_01: Tensor[(8, 28, 28, 320), float16], %FunctionVar_88_11: Tensor[(80, 1, 1, 320), float16], %FunctionVar_88_21: Tensor[(1, 1, 1, 80), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 28, 28, 80), float16] {
    %1426 = nn.conv2d(%FunctionVar_88_01, %FunctionVar_88_11, padding=[0, 0, 0, 0], channels=80, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 80), float16] */;
    add(%1426, %FunctionVar_88_21) /* ty=Tensor[(8, 28, 28, 80), float16] */
  };
  %1427(%cutlass_69_i0, %cutlass_69_i1, %cutlass_69_i2) /* ty=Tensor[(8, 28, 28, 80), float16] */
}

def @tvmgen_default_cutlass_main_72(%cutlass_72_i0: Tensor[(8, 28, 28, 80), float16], %cutlass_72_i1: Tensor[(320, 1, 1, 80), float16], %cutlass_72_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_72", Primitive=1) -> Tensor[(8, 28, 28, 320), float16] {
  %1431 = fn (%FunctionVar_132_0: Tensor[(8, 28, 28, 80), float16], %FunctionVar_132_1: Tensor[(320, 1, 1, 80), float16], %FunctionVar_132_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 28, 28, 320), float16] {
    %1428 = nn.conv2d(%FunctionVar_132_0, %FunctionVar_132_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1429 = add(%1428, %FunctionVar_132_2) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    %1430 = sigmoid(%1429) /* ty=Tensor[(8, 28, 28, 320), float16] */;
    multiply(%1429, %1430) /* ty=Tensor[(8, 28, 28, 320), float16] */
  };
  %1431(%cutlass_72_i0, %cutlass_72_i1, %cutlass_72_i2) /* ty=Tensor[(8, 28, 28, 320), float16] */
}

def @tvmgen_default_cutlass_main_75(%cutlass_75_i0: Tensor[(8, 1, 1, 320), float16], %cutlass_75_i1: Tensor[(20, 1, 1, 320), float16], %cutlass_75_i2: Tensor[(1, 1, 1, 20), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_75", Primitive=1) -> Tensor[(8, 1, 1, 20), float16] {
  %1435 = fn (%FunctionVar_130_0: Tensor[(8, 1, 1, 320), float16], %FunctionVar_130_1: Tensor[(20, 1, 1, 320), float16], %FunctionVar_130_2: Tensor[(1, 1, 1, 20), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 20), float16] {
    %1432 = nn.conv2d(%FunctionVar_130_0, %FunctionVar_130_1, padding=[0, 0, 0, 0], channels=20, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 20), float16] */;
    %1433 = add(%1432, %FunctionVar_130_2) /* ty=Tensor[(8, 1, 1, 20), float16] */;
    %1434 = sigmoid(%1433) /* ty=Tensor[(8, 1, 1, 20), float16] */;
    multiply(%1433, %1434) /* ty=Tensor[(8, 1, 1, 20), float16] */
  };
  %1435(%cutlass_75_i0, %cutlass_75_i1, %cutlass_75_i2) /* ty=Tensor[(8, 1, 1, 20), float16] */
}

def @tvmgen_default_cutlass_main_78(%cutlass_78_i0: Tensor[(8, 1, 1, 20), float16], %cutlass_78_i1: Tensor[(320, 1, 1, 20), float16], %cutlass_78_i2: Tensor[(1, 1, 1, 320), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_78", Primitive=1) -> Tensor[(8, 1, 1, 320), float16] {
  %1438 = fn (%FunctionVar_86_0: Tensor[(8, 1, 1, 20), float16], %FunctionVar_86_1: Tensor[(320, 1, 1, 20), float16], %FunctionVar_86_2: Tensor[(1, 1, 1, 320), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 320), float16] {
    %1436 = nn.conv2d(%FunctionVar_86_0, %FunctionVar_86_1, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 320), float16] */;
    %1437 = add(%1436, %FunctionVar_86_2) /* ty=Tensor[(8, 1, 1, 320), float16] */;
    sigmoid(%1437) /* ty=Tensor[(8, 1, 1, 320), float16] */
  };
  %1438(%cutlass_78_i0, %cutlass_78_i1, %cutlass_78_i2) /* ty=Tensor[(8, 1, 1, 320), float16] */
}

def @tvmgen_default_cutlass_main_81(%cutlass_81_i0: Tensor[(8, 14, 14, 320), float16], %cutlass_81_i1: Tensor[(160, 1, 1, 320), float16], %cutlass_81_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_81", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %1440 = fn (%FunctionVar_86_01: Tensor[(8, 14, 14, 320), float16], %FunctionVar_86_11: Tensor[(160, 1, 1, 320), float16], %FunctionVar_86_21: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %1439 = nn.conv2d(%FunctionVar_86_01, %FunctionVar_86_11, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%1439, %FunctionVar_86_21) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %1440(%cutlass_81_i0, %cutlass_81_i1, %cutlass_81_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_84(%cutlass_84_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_84_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_84_i2: Tensor[(640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_84", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %1444 = fn (%FunctionVar_129_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_129_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_129_2: Tensor[(640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %1441 = nn.conv2d(%FunctionVar_129_0, %FunctionVar_129_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1442 = add(%1441, %FunctionVar_129_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1443 = sigmoid(%1442) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%1442, %1443) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %1444(%cutlass_84_i0, %cutlass_84_i1, %cutlass_84_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_87(%cutlass_87_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_87_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_87_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_87", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %1448 = fn (%FunctionVar_127_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_127_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_127_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %1445 = nn.conv2d(%FunctionVar_127_0, %FunctionVar_127_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1446 = add(%1445, %FunctionVar_127_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1447 = sigmoid(%1446) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%1446, %1447) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %1448(%cutlass_87_i0, %cutlass_87_i1, %cutlass_87_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}

def @tvmgen_default_cutlass_main_9(%cutlass_9_i0: Tensor[(8, 114, 114, 24), float16], %cutlass_9_i1: Tensor[(24, 3, 3, 24), float16], %cutlass_9_i2: Tensor[(1, 1, 1, 24), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_9", Primitive=1) -> Tensor[(8, 112, 112, 24), float16] {
  %1452 = fn (%FunctionVar_143_0: Tensor[(8, 114, 114, 24), float16], %FunctionVar_143_1: Tensor[(24, 3, 3, 24), float16], %FunctionVar_143_2: Tensor[(1, 1, 1, 24), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 112, 112, 24), float16] {
    %1449 = nn.conv2d(%FunctionVar_143_0, %FunctionVar_143_1, padding=[0, 0, 0, 0], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1450 = add(%1449, %FunctionVar_143_2) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    %1451 = sigmoid(%1450) /* ty=Tensor[(8, 112, 112, 24), float16] */;
    multiply(%1450, %1451) /* ty=Tensor[(8, 112, 112, 24), float16] */
  };
  %1452(%cutlass_9_i0, %cutlass_9_i1, %cutlass_9_i2) /* ty=Tensor[(8, 112, 112, 24), float16] */
}

def @tvmgen_default_cutlass_main_90(%cutlass_90_i0: Tensor[(8, 1, 1, 40), float16], %cutlass_90_i1: Tensor[(640, 1, 1, 40), float16], %cutlass_90_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_90", Primitive=1) -> Tensor[(8, 1, 1, 640), float16] {
  %1455 = fn (%FunctionVar_84_01: Tensor[(8, 1, 1, 40), float16], %FunctionVar_84_11: Tensor[(640, 1, 1, 40), float16], %FunctionVar_84_21: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_", Composite="cutlass.conv2d_bias_sigmoid") -> Tensor[(8, 1, 1, 640), float16] {
    %1453 = nn.conv2d(%FunctionVar_84_01, %FunctionVar_84_11, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 640), float16] */;
    %1454 = add(%1453, %FunctionVar_84_21) /* ty=Tensor[(8, 1, 1, 640), float16] */;
    sigmoid(%1454) /* ty=Tensor[(8, 1, 1, 640), float16] */
  };
  %1455(%cutlass_90_i0, %cutlass_90_i1, %cutlass_90_i2) /* ty=Tensor[(8, 1, 1, 640), float16] */
}

def @tvmgen_default_cutlass_main_93(%cutlass_93_i0: Tensor[(8, 14, 14, 640), float16], %cutlass_93_i1: Tensor[(160, 1, 1, 640), float16], %cutlass_93_i2: Tensor[(1, 1, 1, 160), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_93", Primitive=1) -> Tensor[(8, 14, 14, 160), float16] {
  %1457 = fn (%FunctionVar_84_02: Tensor[(8, 14, 14, 640), float16], %FunctionVar_84_12: Tensor[(160, 1, 1, 640), float16], %FunctionVar_84_22: Tensor[(1, 1, 1, 160), float16], PartitionedFromPattern="nn.conv2d_add_", Composite="cutlass.conv2d_bias") -> Tensor[(8, 14, 14, 160), float16] {
    %1456 = nn.conv2d(%FunctionVar_84_02, %FunctionVar_84_12, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 160), float16] */;
    add(%1456, %FunctionVar_84_22) /* ty=Tensor[(8, 14, 14, 160), float16] */
  };
  %1457(%cutlass_93_i0, %cutlass_93_i1, %cutlass_93_i2) /* ty=Tensor[(8, 14, 14, 160), float16] */
}

def @tvmgen_default_cutlass_main_96(%cutlass_96_i0: Tensor[(8, 14, 14, 160), float16], %cutlass_96_i1: Tensor[(640, 1, 1, 160), float16], %cutlass_96_i2: Tensor[(1, 1, 1, 640), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_96", Primitive=1) -> Tensor[(8, 14, 14, 640), float16] {
  %1461 = fn (%FunctionVar_126_0: Tensor[(8, 14, 14, 160), float16], %FunctionVar_126_1: Tensor[(640, 1, 1, 160), float16], %FunctionVar_126_2: Tensor[(1, 1, 1, 640), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 14, 14, 640), float16] {
    %1458 = nn.conv2d(%FunctionVar_126_0, %FunctionVar_126_1, padding=[0, 0, 0, 0], channels=640, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1459 = add(%1458, %FunctionVar_126_2) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    %1460 = sigmoid(%1459) /* ty=Tensor[(8, 14, 14, 640), float16] */;
    multiply(%1459, %1460) /* ty=Tensor[(8, 14, 14, 640), float16] */
  };
  %1461(%cutlass_96_i0, %cutlass_96_i1, %cutlass_96_i2) /* ty=Tensor[(8, 14, 14, 640), float16] */
}

def @tvmgen_default_cutlass_main_99(%cutlass_99_i0: Tensor[(8, 1, 1, 640), float16], %cutlass_99_i1: Tensor[(40, 1, 1, 640), float16], %cutlass_99_i2: Tensor[(1, 1, 1, 40), float16], Inline=1, Compiler="cutlass", global_symbol="tvmgen_default_cutlass_main_99", Primitive=1) -> Tensor[(8, 1, 1, 40), float16] {
  %1465 = fn (%FunctionVar_124_0: Tensor[(8, 1, 1, 640), float16], %FunctionVar_124_1: Tensor[(40, 1, 1, 640), float16], %FunctionVar_124_2: Tensor[(1, 1, 1, 40), float16], PartitionedFromPattern="nn.conv2d_add_sigmoid_multiply_", Composite="cutlass.conv2d_bias_silu") -> Tensor[(8, 1, 1, 40), float16] {
    %1462 = nn.conv2d(%FunctionVar_124_0, %FunctionVar_124_1, padding=[0, 0, 0, 0], channels=40, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="OHWI", out_dtype="float16") /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1463 = add(%1462, %FunctionVar_124_2) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    %1464 = sigmoid(%1463) /* ty=Tensor[(8, 1, 1, 40), float16] */;
    multiply(%1463, %1464) /* ty=Tensor[(8, 1, 1, 40), float16] */
  };
  %1465(%cutlass_99_i0, %cutlass_99_i1, %cutlass_99_i2) /* ty=Tensor[(8, 1, 1, 40), float16] */
}


[-7.5537e-01  4.0344e-02 -4.6313e-01 -9.3408e-01 -3.8086e-01 -2.7563e-01
 -4.9707e-01  2.6392e-01  6.9287e-01  3.2324e-01 -1.1426e-01 -5.1025e-01
 -4.8584e-01  3.1006e-02 -3.6401e-01  2.4487e-01 -1.0291e-01  3.9648e-01
 -1.8799e-01  3.8550e-01  1.5557e+00 -6.6643e-03 -5.1709e-01 -4.7729e-01
  1.5308e-01  1.2207e-02 -7.8418e-01 -6.6113e-01 -1.9800e-01 -1.3535e+00
  1.6919e-01 -5.5322e-01  4.2847e-01 -1.2295e+00  1.6919e-01  3.8428e-01
  5.3320e-01 -3.1226e-01  8.7830e-02  3.4570e-01 -1.7480e-01 -7.0947e-01
  1.1055e+00  1.6479e-02 -3.3643e-01 -3.0322e-01  2.5879e-02 -3.9087e-01
 -1.0488e+00 -4.7607e-01 -2.9321e-01 -3.3130e-01 -2.1716e-01 -1.0449e-01
  8.4082e-01 -7.5488e-01 -2.5586e-01 -2.1423e-02  1.0186e+00  6.4160e-01
 -5.2246e-02 -4.7046e-01  3.4485e-02 -2.9468e-01 -5.4834e-01 -5.8740e-01
  5.4199e-01 -5.6201e-01  3.2373e-01 -2.8296e-01  2.5684e-01 -5.8936e-01
  2.0386e-02  8.0957e-01 -5.2246e-01 -1.8250e-01  5.9912e-01 -7.8223e-01
 -8.0261e-03 -3.4351e-01 -6.5625e-01 -2.9175e-02  6.1768e-01  4.9194e-02
 -7.9102e-01  2.7924e-02  1.4775e+00  3.3105e-01 -2.5488e-01 -2.9541e-01
 -3.9697e-01  6.7725e-01 -5.9912e-01 -1.4526e-01 -1.2524e-01 -7.4902e-01
 -4.4238e-01 -7.9834e-01 -2.1362e-01 -1.1444e-01 -2.3145e-01  1.5373e-02
 -3.6938e-01  8.1787e-02  9.1553e-01 -3.8232e-01  3.2056e-01  1.2500e-01
 -4.0039e-01 -5.4980e-01 -3.3740e-01  4.9951e-01  3.1519e-01  6.5186e-02
  6.2256e-01 -5.0049e-01 -5.2588e-01 -3.5620e-01 -7.4036e-02  1.5674e-01
 -7.8662e-01  2.0703e-01  3.1567e-01 -6.5723e-01  1.9312e-01 -2.3450e-01
 -4.1309e-01  2.2668e-01  1.3074e-01  2.2278e-02 -3.9355e-01  5.2100e-01
  4.0796e-01  8.8013e-02 -2.8833e-01 -1.5234e-01  1.8909e-01  4.2676e-01
 -5.5762e-01 -2.3730e-01 -3.3447e-02  7.3242e-04 -6.0742e-01 -2.7466e-02
  5.3418e-01 -1.1182e-01  4.6729e-01  5.0000e-01 -6.3721e-01 -9.3115e-01
  9.4360e-02  2.7617e+00 -8.2153e-02  1.3184e-01  1.2695e-01 -3.3295e-02
  4.0259e-01  1.1748e+00  9.1406e-01 -1.1633e-01 -6.2207e-01  2.4390e-01
  6.0645e-01 -4.3701e-01 -5.0488e-01 -1.5342e+00 -4.3164e-01 -5.7910e-01
  2.7759e-01 -1.3809e+00 -8.5596e-01  1.7761e-01 -2.9639e-01  1.7930e+00
  8.2178e-01 -8.1738e-01 -8.3691e-01 -9.4238e-02 -2.8979e-01 -2.6270e-01
 -3.8300e-02  7.8174e-01 -4.4702e-01 -9.9548e-02  2.2217e-01  1.7480e-01
  1.7998e+00  1.1758e+00 -2.2522e-01 -1.2225e-01 -1.1309e+00 -4.8828e-01
 -8.0688e-02  1.4043e+00 -2.3755e-01  1.0586e+00 -6.7444e-03  4.0405e-02
 -2.1997e-01  6.9824e-02 -5.7959e-01 -5.4932e-02 -7.0996e-01  2.9785e-01
 -1.4307e-01 -5.5029e-01 -3.1445e-01  6.7188e-01  3.4277e-01 -4.1260e-02
  7.7393e-02  1.0557e+00 -7.9932e-01  3.4937e-01 -5.4443e-01  9.9609e-01
 -1.1914e+00  2.3499e-02  7.8076e-01 -2.8149e-01 -8.7402e-02 -8.4570e-01
  5.4932e-04  2.4590e+00  3.0933e-01  4.7803e-01 -7.2559e-01  2.5977e+00
 -4.1626e-01  6.5430e-01  2.6147e-01  7.8418e-01  1.1621e+00  4.3750e-01
  3.1128e-03  8.4326e-01 -7.3291e-01  6.8701e-01  2.7612e-01  8.3740e-01
  1.6543e+00  4.0588e-02 -1.0657e-01  1.5060e-02  2.4963e-01  7.6270e-01
 -6.8262e-01  2.8296e-01  1.6357e+00  4.2456e-01  2.1895e+00 -3.5938e-01
 -3.0518e-01  2.7812e+00  4.4507e-01 -4.5068e-01 -1.0986e-03 -4.8706e-01
  3.1311e-02  1.9619e+00  9.3896e-01  3.6719e-01  5.4980e-01  4.1797e+00
  2.0684e+00  1.2607e+00  3.6353e-01  1.7505e-01  8.4106e-02 -1.2610e-01
  9.4580e-01  1.6328e+00  2.0430e+00  2.8105e+00  3.3340e+00 -2.8540e-01
  6.6602e-01  6.4609e+00  5.4844e+00  2.7832e+00  4.6289e+00  3.5195e+00
  3.9219e+00  1.6191e+00  2.8418e+00  4.8984e+00  1.0303e+00  3.1816e+00
  2.2510e-01  5.0879e-01 -1.3367e-02 -6.0254e-01  1.3242e+00  2.5537e-01
  2.2412e-01  4.1406e-01  1.3855e-01 -1.1289e+00  2.0977e+00  1.2451e+00
 -3.7891e-01 -1.2024e-01 -1.3782e-01 -9.3567e-02 -6.5332e-01 -5.0684e-01
 -3.6163e-02 -4.2480e-01 -3.7354e-01  4.0833e-02 -4.5947e-01 -1.3269e-01
 -4.8462e-01  1.8677e-01 -2.7100e-01  1.8945e-01 -3.7500e-01 -8.4863e-01
  4.8901e-01 -4.5850e-01 -9.1455e-01 -6.9641e-02  2.1033e-01 -3.3594e-01
 -2.4780e-02  6.8970e-02  2.5488e-01 -1.5466e-01 -5.2490e-01 -1.5125e-01
  1.3867e+00  2.1309e+00  7.2217e-01  1.6475e+00 -7.4121e-01  2.5293e+00
  1.9238e+00  1.5312e+00  8.7012e-01  1.0291e-01 -1.6089e-01  7.6904e-02
 -6.4990e-01 -8.6621e-01  2.5000e-01 -8.2581e-02  6.0547e-01 -6.5796e-02
 -8.3350e-01 -8.9844e-01  1.4844e-01 -6.5234e-01  1.4697e-01  8.1641e-01
 -1.2891e+00  7.6270e-01  6.8320e+00  4.5742e+00  3.7871e+00  2.6328e+00
  1.7871e+00  1.7715e+00  1.7744e+00  1.4966e-01 -3.7061e-01  3.0029e-01
 -1.2604e-02 -7.0923e-02  9.9707e-01 -1.5466e-01  6.7334e-01  1.0732e+00
 -8.6133e-01  1.3320e+00  9.9902e-01  1.6577e-01  1.2324e+00  2.1777e-01
  9.7852e-01 -5.3320e-01  1.2109e+00  1.0089e-01  5.6299e-01  9.3945e-01
  2.0879e+00  1.0065e-01 -3.3423e-01  2.7305e+00  2.9761e-01 -4.8560e-01
 -9.9609e-01  1.9458e-01 -3.1934e-01 -4.5703e-01 -7.6855e-01 -7.3486e-01
 -1.5508e+00 -6.1621e-01 -9.5264e-01 -1.1133e-01 -8.9258e-01  3.7231e-01
  3.4607e-02 -6.2598e-01 -7.5830e-01 -3.2788e-01 -2.6514e-01 -3.5889e-01
 -9.7949e-01 -1.8274e-01 -5.7227e-01 -8.3154e-01  9.1699e-01 -4.4531e-01
 -4.7461e-01 -3.8989e-01  4.1809e-02  6.9971e-01  6.0120e-03  3.2959e-01
 -1.8677e-01  5.9375e-01 -1.2344e+00 -3.8281e-01 -4.6973e-01 -8.9111e-01
 -3.2666e-01 -7.9346e-03  1.5906e-01  5.5273e-01 -4.4775e-01 -7.6758e-01
  5.5908e-01  3.2324e-01  1.9226e-01  3.8501e-01 -4.4214e-01 -3.7744e-01
  3.1348e-01  1.7102e-01  1.3647e-01  8.4619e-01 -1.8921e-01 -3.1934e-01
 -6.6797e-01  1.4014e-01  9.1980e-02  1.3525e-01 -5.0659e-02 -7.6660e-02
 -6.8945e-01  8.5449e-04  5.5176e-01 -2.1790e-01 -1.3877e+00  6.8799e-01
  2.1948e-01  6.8164e-01 -8.0176e-01 -3.5693e-01 -8.7769e-02 -3.6377e-02
 -6.2793e-01  2.5742e+00  1.1615e-01 -1.1426e+00 -6.1426e-01 -1.1377e-01
 -4.4019e-01  8.2129e-01  5.6348e-01  5.9631e-02  2.4561e-01 -5.7959e-01
 -3.4180e-01  3.0249e-01  1.7676e-01 -1.4404e-02  2.2278e-01 -5.9052e-02
 -1.7651e-01 -7.8760e-01 -4.6753e-02 -2.5952e-01  3.4790e-03 -4.6338e-01
  1.7468e-01 -7.6416e-01 -3.2959e-02 -1.0176e+00 -5.9814e-01 -5.7227e-01
 -6.9238e-01 -1.1768e+00  1.6101e-01 -4.1870e-01 -3.3569e-04 -1.1504e+00
  4.6606e-01  3.0078e-01 -1.8760e+00 -7.3389e-01 -1.0352e+00  6.0498e-01
  1.4307e+00  1.8579e-01 -6.2695e-01 -3.3740e-01  2.9688e-01 -2.4219e-01
 -5.0873e-02 -5.9521e-01  1.9263e-01 -2.8516e-01  2.4414e-01  1.8372e-01
 -9.0918e-01  8.0078e-02  2.8662e-01 -6.6602e-01 -3.4717e-01 -2.1204e-01
 -3.6743e-01 -3.1543e-01 -2.6733e-01  3.9575e-01 -6.2500e-01 -4.6680e-01
 -4.5850e-01 -8.2031e-01  3.6328e-01 -4.2542e-02  2.3401e-01 -2.6318e-01
 -3.0762e-01  1.2207e-01 -6.0645e-01 -1.0654e+00 -9.3457e-01  8.5449e-01
 -5.1758e-01  8.5083e-02 -1.3013e-01  1.2573e-02 -3.9917e-01 -8.3435e-02
 -7.1582e-01 -2.5415e-01 -3.3008e-01 -6.6992e-01  2.3706e-01 -4.5410e-01
  1.3193e+00 -6.8555e-01  1.8677e-01 -7.6074e-01 -5.3662e-01 -6.2164e-02
  4.1650e-01 -7.1533e-01  1.1200e-02 -7.3682e-01  3.5425e-01  3.2129e-01
 -3.0908e-01 -7.9395e-01 -2.8442e-01 -1.1123e+00  3.3057e-01 -4.8438e-01
 -7.9004e-01  1.7419e-01  1.5908e+00 -3.9368e-02  1.0215e+00  4.5197e-02
 -1.0117e+00 -2.0435e-01 -8.3801e-02  7.1094e-01 -4.4403e-02 -7.4316e-01
  1.9196e-02  7.4890e-02 -5.3906e-01  2.0471e-01  1.9397e-01  1.2695e-01
  1.5381e-01 -3.7891e-01 -7.0752e-01 -8.0078e-01 -6.7676e-01 -3.7842e-01
  1.9867e-02  3.7061e-01  3.8257e-01 -4.7607e-02 -8.3008e-01 -7.4414e-01
  6.1816e-01 -4.4580e-01 -1.6089e-01 -1.3086e-01 -6.0120e-02 -3.1299e-01
 -3.0078e-01 -2.7783e-01 -4.0454e-01 -2.6880e-01 -7.5989e-03 -4.1309e-01
 -1.3057e+00 -7.7393e-01 -1.4600e-01  2.8625e-02  4.1187e-01 -5.5859e-01
 -4.5508e-01 -4.9731e-01  7.3242e-01 -4.2334e-01  5.0098e-01  2.5732e-01
 -4.7876e-01 -4.5532e-01  6.8970e-02 -3.7622e-01 -8.2715e-01 -1.6327e-02
 -7.3584e-01  3.2166e-02 -5.2686e-01 -4.1846e-01 -2.4353e-01 -2.8369e-01
 -7.9004e-01 -2.4976e-01  5.1855e-01 -2.9565e-01 -5.9277e-01 -1.3843e-01
 -5.7373e-01  1.9495e-01  2.1484e-01  1.0211e-01  2.6947e-02  6.6223e-03
 -7.3145e-01  1.1548e-01  1.2842e-01 -2.0361e-01 -4.8608e-01  9.8755e-02
  1.6003e-01 -2.0923e-01  2.2327e-01 -3.4790e-01  6.5735e-02  5.5664e-01
 -6.0693e-01 -1.1172e+00 -5.3320e-01 -7.7539e-01 -3.4497e-01 -3.6475e-01
  4.9609e-01 -9.4238e-01 -4.8950e-01 -6.4160e-01 -5.5762e-01 -7.7515e-02
 -1.1104e+00 -6.5869e-01 -1.3794e-01 -7.0654e-01  2.4316e-01  2.4731e-01
 -6.5137e-01 -5.3662e-01 -4.8169e-01 -7.9773e-02 -2.9980e-01 -3.9917e-02
 -7.4414e-01 -8.3203e-01  3.1543e-01 -7.5195e-01  2.6587e-01 -8.9062e-01
  1.3525e-01 -2.1667e-01 -7.1777e-01 -2.4646e-01 -1.8237e-01 -6.5918e-01
  8.9551e-01 -4.7607e-01  1.2158e-01 -4.3262e-01 -7.1094e-01  3.7744e-01
 -8.6523e-01  2.7222e-01  2.5830e-01 -1.6577e-01 -1.5588e-01  1.2250e-01
 -3.8257e-01 -1.9421e-01  8.8379e-01  5.5084e-02 -4.5532e-01 -1.4880e-01
  1.5161e-01 -3.6240e-03  7.7148e-02  1.9873e-01  5.2441e-01  2.4207e-01
  3.8696e-02 -2.1228e-01  1.0527e+00  3.1787e-01 -7.2559e-01 -4.0869e-01
 -5.6592e-01  2.1375e-01  4.7559e-01 -1.3428e+00 -9.0869e-01  8.3862e-02
 -1.1285e-01  9.5020e-01 -7.1289e-01  2.2186e-02  1.7639e-01  2.3975e-01
  5.9473e-01 -6.6748e-01 -5.1367e-01 -5.4688e-01  7.9575e-03 -8.5352e-01
 -4.0894e-01 -6.5820e-01  3.0298e-01  4.5972e-01 -1.3340e+00  3.7402e-01
  4.9854e-01 -1.0703e+00 -2.9932e-01 -6.2207e-01 -2.4536e-01  2.3438e-02
  2.9858e-01 -9.4910e-02  1.1631e+00 -3.0835e-01 -5.3894e-02 -4.6094e-01
  4.7998e-01 -5.2344e-01 -4.5898e-01 -4.5410e-01 -7.5439e-01  6.4062e-01
 -5.6396e-01  1.0156e+00 -1.4990e-01 -2.5659e-01 -6.6797e-01 -6.2866e-02
 -3.8647e-01  3.5449e-01 -5.2637e-01  4.0625e-01 -4.7852e-02 -1.2744e+00
  6.1035e-02 -5.4443e-01 -3.5327e-01  4.2505e-01  2.3315e-01 -4.0503e-01
 -2.2583e-01 -8.0713e-01  1.8298e-01  3.0981e-01 -5.1562e-01 -1.1299e+00
 -2.3145e-01 -5.3589e-02 -1.8469e-01 -8.0322e-02  2.8076e-02 -4.7192e-01
 -4.5923e-01  5.6396e-01 -6.2305e-01 -4.4482e-01 -6.2109e-01 -4.9219e-01
 -5.9863e-01  3.7573e-01 -1.8994e-01  2.0593e-01 -1.2317e-01 -3.8794e-01
 -4.2261e-01  4.3042e-01 -5.0586e-01 -1.6846e-02 -3.6499e-01 -4.2676e-01
 -2.5195e-01 -9.4971e-01  1.0114e-01 -5.0977e-01 -5.6348e-01 -4.5093e-01
  3.6560e-02 -5.4590e-01  4.4281e-02 -3.4326e-01 -4.4067e-01  1.3257e-01
  1.6870e-01 -7.5684e-03 -7.9297e-01 -1.3770e-01 -2.8760e-01 -5.4321e-03
 -5.8398e-01  9.5557e-01 -4.5117e-01 -1.9507e-01  3.3154e-01 -1.9702e-01
  5.5420e-02  2.6758e-01 -1.9360e-01  1.9995e-01  7.1533e-01  2.8198e-01
 -6.7432e-01  2.5000e-01  3.5693e-01 -1.0107e+00  5.4932e-03  1.6577e-01
  1.5088e+00  2.7173e-01 -4.3311e-01  8.9062e-01 -2.7588e-01 -6.8164e-01
  1.5454e-01 -3.7817e-01 -5.8545e-01 -3.6572e-01  4.5996e-01 -6.8115e-01
 -2.8101e-01 -2.7271e-01 -6.1279e-01 -5.9180e-01 -1.0068e+00 -8.8037e-01
 -3.3545e-01 -1.8042e-01  3.2568e-01 -4.0649e-01 -7.6221e-01 -2.6001e-01
  1.0205e+00  5.3864e-02 -4.6558e-01  3.3350e-01 -3.9551e-01  6.3416e-02
 -3.2520e-01 -2.4390e-01 -3.9062e-01 -1.4893e-01 -3.3765e-01 -6.0547e-01
 -2.0654e-01  1.0999e-01  5.0110e-02 -4.6631e-01 -6.7578e-01 -1.0039e+00
 -2.9224e-01 -5.5908e-01 -1.2683e-01 -2.7197e-01  2.3254e-01 -2.4365e-01
 -7.4707e-01 -2.0496e-01  1.3928e-01  4.8779e-01  1.2939e-01 -6.0254e-01
 -4.5923e-01  9.9707e-01 -5.2148e-01 -7.3730e-01 -3.7891e-01  1.6895e-01
 -2.5146e-01 -2.9251e-02  2.0728e-01 -4.6143e-01 -7.2461e-01 -7.8955e-01
 -1.2128e-01  3.1250e-01 -1.4563e-01 -4.9951e-01 -8.6719e-01 -3.3081e-01
  2.5220e-01  2.8870e-02 -6.1475e-01 -6.5088e-01 -6.3428e-01  8.0469e-01
 -1.3066e+00 -1.4805e+00 -8.7012e-01 -1.0400e+00 -6.1523e-01 -4.0723e-01
 -2.5732e-01  2.6245e-03 -8.5693e-01  1.2463e-01 -1.6235e-01  4.8950e-02
 -8.4961e-02 -1.5149e-01 -1.0303e+00 -3.0957e-01 -5.4932e-01  1.2734e+00
 -4.4647e-02 -5.7617e-01  1.3672e-01 -5.5127e-01 -2.3633e-01  1.2622e-01
  1.1734e-02  1.5234e-01 -7.5488e-01 -7.5098e-01 -2.8613e-01 -7.6270e-01
 -4.7607e-01 -5.1709e-01 -5.8936e-01 -1.2637e+00 -7.8418e-01 -2.8198e-01
  1.1943e+00  5.5859e-01  1.6777e+00  2.2742e-01 -2.6001e-01  2.4683e-01
  2.9736e-01 -2.8735e-01 -4.9316e-02  1.1182e-01  5.9631e-02  1.3660e-01
  5.0323e-02 -5.4932e-01 -1.7261e-01 -2.5830e-01  4.3408e-01 -8.9600e-01
  1.9946e-01  3.2715e-02 -8.1299e-01  4.0527e-01 -3.3057e-01 -4.5105e-02
  4.3066e-01  2.1240e-01  1.0078e+00  2.7881e-01 -7.7271e-02 -4.3896e-01
  1.0962e-01 -5.1123e-01  8.2471e-01  5.0659e-02]
Evaluate inference time cost...
Execution time summary:
 mean (ms)   median (ms)    max (ms)     min (ms)     std (ms)  
   8.4753       8.3537       8.9236       8.3231       0.2318   
               
